// src/pages/customer/SupportPage.js
import React, { useState, useEffect } from 'react'; // Import useEffect
import { FiSend, FiMessageSquare, FiHelpCircle, FiBookOpen } from 'react-icons/fi';
import { Link } from 'react-router-dom';
import { supabase } from '../../supabaseClient'; // Import supabase client
import './SupportPage.css'; // We will create this

const SupportPage = () => {
  // User info for pre-fill, requires fetching logged-in user
  const [user, setUser] = useState(null);
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [subject, setSubject] = useState('');
  const [message, setMessage] = useState('');
  const [formMessage, setFormMessage] = useState('');
  const [isFormSuccess, setIsFormSuccess] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isLoadingUser, setIsLoadingUser] = useState(true); // Loading state for user info


  // Fetch logged-in user's profile on mount to pre-fill form
  useEffect(() => {
    let isMounted = true; // Add a cleanup flag
    const fetchUser = async () => {
      setIsLoadingUser(true);
      const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();

      if (!isMounted) return; // Check if component is still mounted

      if (authError || !authUser) {
        // User is not logged in. The form can still be submitted, but without customer_id
        // For this protected page, ProtectedRoute should handle unauthenticated users,
        // but the component might render briefly during load. Handle this case.
        setUser(null); // Explicitly set user to null
        setIsLoadingUser(false);
      } else {
         // Fetch profile from public.Users table to get first/last name etc.
         const { data: userData, error: userError } = await supabase
             .from('Users')
             .select('first_name, last_name, email') // Select the fields needed
             .eq('id', authUser.id)
             .single();
        
          if (!isMounted) return; // Check if component is still mounted

          if (userError || !userData) {
             console.error("Error fetching user profile for support form:", userError);
             // User is authenticated, but profile fetch failed.
             // Can still pre-fill from authUser email, but names will be empty.
             setUser(authUser); // Use auth user data as fallback
             setEmail(authUser.email || ''); // Pre-fill email from auth user
             setName(''); // Name needs public profile data
          } else {
            setUser(userData); // Set fetched profile data
            setName(`${userData.first_name || ''} ${userData.last_name || ''}`.trim());
            setEmail(userData.email || authUser.email || ''); // Prioritize profile email, fallback to auth user email
          }
        setIsLoadingUser(false);
      }
    };

    fetchUser();

    return () => { // Cleanup function
        isMounted = false;
    };
  }, []); // Empty dependency array: run only once on mount


  const handleSubmitSupportQuery = async (e) => {
    e.preventDefault();
    setFormMessage('');
    setIsFormSuccess(false);
    setIsSubmitting(true);

    if (!name.trim() || !email.trim() || !subject.trim() || !message.trim()) {
      setFormMessage("Veuillez remplir tous les champs obligatoires.");
      setIsFormSuccess(false); // Not success
      setIsSubmitting(false);
      return;
    }
    if (!/\S+@\S+\.\S+/.test(email.trim())) {
        setFormMessage("Veuillez entrer une adresse e-mail valide.");
        setIsFormSuccess(false); // Not success
        setIsSubmitting(false);
        return;
    }

    try {
      // --- Use Supabase to insert the support query ---
      // Assuming you have a 'support_queries' table
      // It should have a column like 'customer_id' which is a UUID and nullable
      const { data, error } = await supabase
        .from('support_queries')
        .insert({
           customer_id: user?.id || null, // Link to authenticated user if exists
           name: name.trim(),
           email: email.trim(),
           subject: subject.trim(),
           message: message.trim(),
           // created_at column should have a default value in the DB (now())
           // status column could be added (e.g., 'new', 'open', 'closed')
        });

      if (error) {
        console.error("Supabase Support Query Error:", error);
        setFormMessage(`Échec de l\'envoi de votre demande : ${error.message}`); // Dev detail
        // setFormMessage('Échec de l\'envoi de votre demande. Veuillez réessayer.'); // Prod generic
        setIsFormSuccess(false);
      } else {
         console.log("Support Query Submitted via Supabase:", data); // Log returned data for verification
         setFormMessage("Votre demande d'assistance a été envoyée avec succès. Nous vous répondrons bientôt.");
         setIsFormSuccess(true);
         // Clear form fields after success, EXCEPT potentially name/email if user is logged in
         // Check if user was pre-filled. If so, keep those.
         if (!user) { // If user was not logged in (name/email manually entered)
            setName('');
            setEmail('');
         }
         setSubject('');
         setMessage('');
      }

    } catch (err) {
      console.error("Support Query Unexpected Error:", err);
       setFormMessage('Une erreur inattendue s\'est produite. Veuillez réessayer.');
       setIsFormSuccess(false);
    } finally {
      setIsSubmitting(false);
    }
  };


  // Show loading state while fetching user info
  if (isLoadingUser) {
    return (
       <div className="support-page fade-in-up">
         <div className="page-header">
            <h1>Support Client</h1>
            <p className="text-secondary">Chargement...</p> {/* Or a spinner */}
         </div>
         <div className="support-content-layout">
            <div className="support-resources">
                <h3 className="support-section-title">Ressources Utiles</h3>
                <div className="loading-placeholder" style={{height: '50px', marginBottom:'10px'}}></div>
                <div className="loading-placeholder" style={{height: '50px', marginBottom:'10px'}}></div>
                <div className="loading-placeholder" style={{height: '50px'}}></div>
            </div>
            <div className="support-form-container">
                <h3 className="support-section-title">Envoyer une Demande</h3>
                <div className="loading-placeholder" style={{height: '300px'}}></div>
            </div>
         </div>
       </div>
    );
  }


  return (
    <div className="support-page fade-in-up">
      <div className="page-header">
        <h1>Support Client</h1>
        <p className="text-secondary">Besoin d'aide ? Contactez-nous ou consultez nos ressources.</p>
      </div>

      <div className="support-content-layout">
        {/* Left Column: Links to other resources */}
        <div className="support-resources">
          <h3 className="support-section-title">Ressources Utiles</h3>
          {/* Ensure these links are correct based on your App.js routes */}
          {/* THIS LINK ALREADY POINTS TO THE CORRECT ROUTE FOR THE KNOWLEDGE BASE */}
          <Link to="/customer/knowledge-base" className="support-resource-link">
            <FiBookOpen /> Base de Connaissances
          </Link>
          <Link to="/customer/faq" className="support-resource-link">
            <FiHelpCircle /> FAQ (Questions Fréquemment Posées)
          </Link>
          <Link to="/customer/my-problems" className="support-resource-link">
            <FiMessageSquare /> Suivre Mes Demandes
          </Link>
        </div>

        {/* Right Column: Contact Form */}
        <div className="support-form-container">
          <h3 className="support-section-title">Envoyer une Demande</h3>

           {formMessage && ( // Display message here instead of alert
              <p className={`form-message ${isFormSuccess ? 'success' : 'error'}`}>
                {formMessage}
              </p>
            )}

          {/* Hide form fields on success unless there was an error */}
           {(!isFormSuccess || (formMessage && formMessage.toLowerCase().includes('échec'))) && (
             <form onSubmit={handleSubmitSupportQuery} className="support-query-form">
              <div className="form-group">
                <label htmlFor="supportName" className="label">Votre Nom <span className="required">*</span></label>
                <input
                  type="text"
                  id="supportName"
                  className="input-field"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  placeholder="Entrez votre nom complet"
                  required
                   disabled={isSubmitting || (user && (user.first_name || user.last_name))} // Disable if submitting or user is logged in and name is pre-filled
                />
              </div>
              <div className="form-group">
                <label htmlFor="supportEmail" className="label">Votre E-mail <span className="required">*</span></label>
                <input
                  type="email"
                  id="supportEmail"
                  className="input-field"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="nom@example.com"
                  required
                   disabled={isSubmitting || (user && user.email)} // Disable if submitting or user is logged in and email is pre-filled
                />
              </div>
              <div className="form-group">
                <label htmlFor="supportSubject" className="label">Sujet <span className="required">*</span></label>
                <input
                  type="text"
                  id="supportSubject"
                  className="input-field"
                  value={subject}
                  onChange={(e) => setSubject(e.target.value)}
                  placeholder="Objet de votre demande"
                  required
                  disabled={isSubmitting}
                />
              </div>
              <div className="form-group">
                <label htmlFor="supportMessage" className="label">Message <span className="required">*</span></label>
                <textarea
                  id="supportMessage"
                  className="textarea-field"
                  rows="6"
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  placeholder="Décrivez votre question ou problème en détail..."
                  required
                   disabled={isSubmitting}
                ></textarea>
              </div>

              <div className="form-actions">
                <button type="submit" className="btn btn-primary btn-icon" disabled={isSubmitting}>
                  {isSubmitting ? (
                     <>
                      <FiSend /> Envoi en cours...
                     </>
                  ) : (
                      <>
                         <FiSend /> Envoyer la Demande
                      </>
                   )}
                </button>
              </div>
            </form>
          )}

           {/* Option to show something different after success */}
           {isFormSuccess && !(formMessage && formMessage.toLowerCase().includes('échec')) && (
               <div className="success-feedback" style={{textAlign: 'center', padding: '40px 20px'}}>
                  {/* Add an illustration or specific message here */}
                  <p>Merci de nous avoir contactés. Nous avons bien reçu votre demande et vous répondrons dans les plus brefs délais.</p>
               </div>
           )}


        </div>
      </div>
    </div>
  );
};

export default SupportPage;