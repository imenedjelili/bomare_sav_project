// src/pages/customer/ReportIssue.js
import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { FiUpload, FiSend, FiXCircle } from 'react-icons/fi';
import { supabase } from '../../supabaseClient';
import './ReportIssue.css';

// Sample categories (can be hardcoded or fetched from a 'issue_categories' DB table)
const issueCategories = [
  { value: '', label: 'Sélectionner une catégorie...', dbValue: '' },
  { value: 'hardware', label: 'Problème Matériel', dbValue: 'hardware' },
  { value: 'software', label: 'Problème Logiciel', dbValue: 'software' },
  { value: 'connectivity', label: 'Problème de Connectivité', dbValue: 'connectivity' },
  { value: 'power', label: 'Problème d\'Alimentation', dbValue: 'power' },
  { value: 'display', label: 'Problème d\'Affichage', dbValue: 'display' },
  { value: 'sound', label: 'Problème de Son', dbValue: 'sound' },
  { value: 'other', label: 'Autre', dbValue: 'other' },
];

// Sample sub-categories (similarly, hardcode or fetch from 'issue_subcategories')
const subCategoriesData = {
  hardware: [
    { value: '', label: 'Sélectionner une sous-catégorie...' },
    { value: 'screen_broken', label: 'Écran cassé / Endommagé' },
    { value: 'button_defective', label: 'Bouton défectueux' },
    { value: 'port_damaged', label: 'Port (USB, HDMI, etc.) endommagé' },
    { value: 'battery_issue', label: 'Problème de batterie' },
  ],
  software: [
    { value: '', label: 'Sélectionner une sous-catégorie...' },
    { value: 'app_crash', label: 'Application ne démarre pas / plante' },
    { value: 'system_slow', label: 'Système lent / instable' },
    { value: 'update_failed', label: 'Échec de la mise à jour' },
  ],
  connectivity: [
    { value: '', label: 'Sélectionner une sous-catégorie...' },
    { value: 'wifi_no_connect', label: 'WiFi instable / ne se connecte pas' },
    { value: 'bluetooth_pairing', label: 'Problème d\'appairage Bluetooth' },
  ],
   other: [
       { value: '', label: 'Sélectionner une sous-catégorie (Optionnel)...' },
   ],
   'power': [{ value: '', label: 'Sélectionner une sous-catégorie (Optionnel)...' }],
   'display': [{ value: '', label: 'Sélectionner une sous-catégorie (Optionnel)...' }],
   'sound': [{ value: '', label: 'Sélectionner une sous-catégorie (Optionnel)...' }],
};


const ReportIssue = () => {
  const navigate = useNavigate();
  const [userProducts, setUserProducts] = useState([]);
  const [selectedProductSerial, setSelectedProductSerial] = useState('');
  const [selectedIssueCategoryValue, setSelectedIssueCategoryValue] = useState('');
  const [selectedSubCategoryValue, setSelectedSubCategoryValue] = useState('');
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [files, setFiles] = useState([]);
  const [notifyEmail, setNotifyEmail] = useState(true);
  const [notifyPhone, setNotifyPhone] = useState(false);
  const [notifySMS, setNotifySMS] = useState(false);

   const [isLoadingProducts, setIsLoadingProducts] = useState(true);
   const [isSubmitting, setIsSubmitting] = useState(false);
   const [error, setError] = useState(null);
   const [successMessage, setSuccessMessage] = useState('');


   useEffect(() => {
        let isMounted = true;

       const fetchUserProducts = async () => {
           setIsLoadingProducts(true);
           setError(null);

           const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();

           if (!isMounted) return;

           if (authError || !authUser) {
               setError("Vous devez être connecté pour signaler un problème.");
               setIsLoadingProducts(false);
               return;
           }

            try {
                const { data: productsData, error: productsError } = await supabase
                    .from('customer_product')
                    .select(`id, serie_number, produc_name`)
                    .eq('customer_id', authUser.id)
                    .order('produc_name', { ascending: true });

                 if (!isMounted) return;

                 if (productsError) {
                     console.error("Error fetching user products for report issue:", productsError);
                     setError(`Impossible de charger votre liste de produits. Détail: ${productsError.message}`);
                     setUserProducts([]);
                 } else {
                     console.log("Fetched user products:", productsData);
                     const mappedProducts = productsData.map(p => ({
                         id: p.id,
                         serial: p.serie_number,
                         name: p.produc_name || 'Produit inconnu',
                     }));
                     setUserProducts(mappedProducts);
                 }
            } catch (err) {
                if (!isMounted) return;
               console.error("Unexpected error fetching user products:", err);
                setError("Une erreur inattendue est survenue lors du chargement des produits.");
               setUserProducts([]);
            } finally {
                if (!isMounted) return;
               setIsLoadingProducts(false);
            }
       };

       fetchUserProducts();
       return () => { isMounted = false; };
   }, []);


  const handleFileChange = (e) => {
    const selectedFiles = Array.from(e.target.files);
    const currentFiles = [...files];
    const maxFiles = 5;
    const maxFileSizeMb = 10;
    const maxFileSize = maxFileSizeMb * 1024 * 1024;

    selectedFiles.forEach((file) => {
       if (currentFiles.length >= maxFiles) {
            if (!e.alertShownMaxFiles) {
               alert(`Vous pouvez télécharger un maximum de ${maxFiles} fichiers.`);
                e.alertShownMaxFiles = true;
            }
            return;
       }
       if (file.size > maxFileSize) {
           if (!e.alertShownMaxSize) {
                alert(`Certains fichiers sont trop volumineux (Max ${maxFileSizeMb}Mo par fichier).`);
                e.alertShownMaxSize = true;
            }
           return;
       }
        if (currentFiles.some(existingFile => existingFile.name === file.name && existingFile.size === file.size && existingFile.lastModified === file.lastModified)) {
            if (!e.alertShownDuplicate) {
               alert(`Certains fichiers ont déjà été ajoutés.`);
               e.alertShownDuplicate = true;
            }
            return;
        }
        currentFiles.push(file);
    });
    setFiles(currentFiles.slice(0, maxFiles));
    e.target.value = null;
  };

  const removeFile = (fileNameToRemove, fileLastModifiedToRemove) => {
    setFiles(prevFiles => prevFiles.filter(file => !(file.name === fileNameToRemove && file.lastModified === fileLastModifiedToRemove)));
  };


  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    setSuccessMessage('');

    const selectedProduct = userProducts.find(p => p.serial === selectedProductSerial);
    const selectedCategoryDbValue = issueCategories.find(c => c.value === selectedIssueCategoryValue)?.dbValue;

    if (!selectedProductSerial || !selectedIssueCategoryValue || !title.trim() || !description.trim()) {
        setError("Veuillez remplir tous les champs obligatoires (marqués d'une *).");
        return;
    }
     if (!selectedProduct) {
         setError("Erreur interne: Impossible de déterminer le produit sélectionné.");
         console.error("Submission Error: Selected product serial", selectedProductSerial, "not found in userProducts list.");
         return;
     }
     if (!selectedCategoryDbValue && selectedIssueCategoryValue !== '') {
          setError("Erreur interne: Catégorie de problème invalide sélectionnée.");
          console.error("Submission Error: Selected issue category value", selectedIssueCategoryValue, "did not map to a dbValue.");
         return;
     }

    setIsSubmitting(true);

    console.log(`Submitting problem for product serial: ${selectedProductSerial} (ID: ${selectedProduct.id})`);
    console.log("Category:", selectedCategoryDbValue);
    console.log("Title (UI only):", title.trim());
    console.log("Description (problem):", description.trim());
    console.log("Attached Files (simulation):", files.map(f => ({ name: f.name, size: f.size })));
    console.log("Notification preferences (simulation):", { notifyEmail, notifyPhone, notifySMS });

    try {
       const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();
       if (authError || !authUser) {
            setError("Erreur d'authentification. Veuillez vous reconnecter.");
             setIsSubmitting(false);
           return;
       }

       // Prepare insert object based on actual customer_tickets schema
       const ticketDataToInsert = {
           customer_id: authUser.id,
           product_id: selectedProduct.id,
           problem: description.trim(),
           category: selectedCategoryDbValue,
           status_problem: 'Pending', // Explicitly set to an allowed value that matches the CHECK constraint
       };

       const { data: newTicket, error: insertError } = await supabase
           .from('customer_tickets')
           .insert(ticketDataToInsert)
           .select()
           .single();

       if (insertError) {
         console.error("Supabase Insert Ticket Error:", insertError);
          setError(`Échec de la soumission de votre problème. Veuillez réessayer. ${insertError.message}`);
         setSuccessMessage('');
       } else if (newTicket) {
         console.log("Ticket submitted successfully, details:", newTicket);
         setSuccessMessage("Votre problème a été signalé avec succès. Redirection vers la page 'Mes Problèmes'...");
         setSelectedProductSerial('');
         setSelectedIssueCategoryValue('');
         setSelectedSubCategoryValue('');
         setTitle('');
         setDescription('');
         setFiles([]);
         const navigateTimer = setTimeout(() => {
           navigate('/customer/my-problems', { replace: true });
         }, 2500);
          return () => clearTimeout(navigateTimer);
       } else {
             setError('Échec de la soumission de votre problème. Réponse inattendue.');
             setSuccessMessage('');
       }
    } catch (err) {
       console.error("Unexpected error during problem submission:", err);
        setError('Une erreur inattendue est survenue lors de la soumission du problème. Veuillez réessayer.');
        setSuccessMessage('');
    } finally {
         if (error || !successMessage) {
            setIsSubmitting(false);
         }
    }
  };

   const productsForDropdown = userProducts;
   const availableSubCategories = subCategoriesData[selectedIssueCategoryValue] || subCategoriesData['other'] || [];

   if (isLoadingProducts) {
       return (
            <div className="report-issue-page fade-in-up">
                 <div className="page-header">
                    <h1>Signaler un Problème</h1>
                   <p className="text-secondary">Chargement de votre liste de produits...</p>
                   <div className="loading-spinner" aria-label="Chargement..."></div>
                 </div>
            </div>
       );
   }

    if (!isLoadingProducts && userProducts.length === 0) {
         return (
            <div className="report-issue-page fade-in-up">
                 <div className="page-header">
                    <h1>Signaler un Problème</h1>
                   <p className="text-secondary">Vous devez enregistrer un produit avant de pouvoir signaler un problème.</p>
                 </div>
                 <div className="report-issue-form-container" style={{textAlign: 'center'}}>
                      <p className="text-secondary" style={{marginBottom: '20px'}}>
                          Aucun produit disponible à signaler un problème.
                     </p>
                      <Link to="/customer/register-product" className="btn btn-primary">
                         Enregistrer un produit
                     </Link>
                  </div>
            </div>
         );
    }


  return (
    <div className="report-issue-page fade-in-up">
      <div className="page-header">
        <h1>Signaler un Problème</h1>
        <p className="text-secondary">Soumettez une nouvelle demande d'assistance.</p>
      </div>

      <div className="report-issue-form-container">

           {error && <p className="form-message error">{error}</p>}
           {successMessage && <p className="form-message success">{successMessage}</p>}

           {!successMessage || error ? (
             <form onSubmit={handleSubmit} className="report-issue-form">

              <div className="form-section">
                <label htmlFor="product" className="label">Sélectionner le Produit <span className="required">*</span></label>
                <select
                  id="product"
                  className="select-field custom-select"
                  value={selectedProductSerial}
                  onChange={(e) => setSelectedProductSerial(e.target.value)}
                  required
                   disabled={isLoadingProducts || isSubmitting || userProducts.length === 0}
                >
                  <option value="" disabled>Sélectionnez votre produit...</option>
                  {productsForDropdown.map(product => (
                    <option key={product.id} value={product.serial}>
                      {product.name} (Numéro de série : {product.serial})
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-section">
                <label htmlFor="category" className="label">Catégorie du Problème <span className="required">*</span></label>
                <select
                  id="category"
                  className="select-field custom-select"
                  value={selectedIssueCategoryValue}
                  onChange={(e) => {
                    setSelectedIssueCategoryValue(e.target.value);
                    setSelectedSubCategoryValue('');
                  }}
                  required
                   disabled={isSubmitting}
                >
                  {issueCategories.map(cat => (
                    <option key={cat.value} value={cat.value} disabled={cat.value === ''}>{cat.label}</option>
                  ))}
                </select>
              </div>

               {selectedIssueCategoryValue && availableSubCategories && availableSubCategories.length > 1 && (
                 <div className="form-section">
                  <label htmlFor="subCategory" className="label">Sous-catégorie du Problème</label>
                  <select
                    id="subCategory"
                    className="select-field custom-select"
                    value={selectedSubCategoryValue}
                    onChange={(e) => setSelectedSubCategoryValue(e.target.value)}
                     disabled={isSubmitting}
                  >
                    {availableSubCategories.map(subCat => (
                      <option key={subCat.value} value={subCat.value} disabled={subCat.value === ''}>{subCat.label}</option>
                    ))}
                  </select>
                </div>
              )}

              <div className="form-section">
                <label htmlFor="title" className="label">Titre du Problème <span className="required">*</span></label>
                <input
                  type="text"
                  id="title"
                  className="input-field"
                  placeholder="Entrez un titre bref pour votre problème"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  required
                   disabled={isSubmitting}
                />
              </div>

              <div className="form-section">
                <label htmlFor="description" className="label">Description du Problème <span className="required">*</span></label>
                <textarea
                  id="description"
                  className="textarea-field"
                  rows="5"
                  placeholder="Veuillez décrire votre problème en détail..."
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  required
                   disabled={isSubmitting}
                ></textarea>
              </div>

              <div className="form-section file-upload-section">
                <label htmlFor="attachments" className="label">Pièces Jointes (Optionnel)</label>
                <input
                    type="file"
                    id="attachments"
                    className="file-input-hidden"
                    multiple
                    onChange={handleFileChange}
                    accept="image/*,video/*,.pdf,.doc,.docx,.txt,.zip"
                     disabled={isSubmitting}
                />
                <label htmlFor="attachments" className="file-input-custom-button" disabled={isSubmitting || files.length >= 5}>
                    <FiUpload size={18} />
                    <span>{files.length >= 5 ? `Maximum (${5}) fichiers ajoutés` : 'Télécharger des photos ou vidéos (Max 5 fichiers, 10 Mo chacun)'}</span>
                </label>

                {files.length > 0 && (
                  <ul className="file-preview-list">
                    {files.map(file => (
                      <li key={file.name + file.lastModified} className="file-preview-item">
                        <span>{file.name} ({(file.size / 1024 / 1024).toFixed(2)} Mo)</span>
                        <button
                          type="button"
                          onClick={() => removeFile(file.name, file.lastModified)}
                          className="remove-file-btn"
                          aria-label={`Retirer le fichier ${file.name}`}
                           disabled={isSubmitting}
                        >
                            <FiXCircle size={16} />
                        </button>
                      </li>
                    ))}
                  </ul>
                )}
              </div>

              <div className="form-section">
                <label className="label">Notifications actives pour cette demande</label>
                <div className="custom-checkbox-group">
                    <label className="custom-checkbox-label">
                        <input type="checkbox" checked={notifyEmail} onChange={(e) => setNotifyEmail(e.target.checked)} disabled={isSubmitting} />
                        <span className="custom-checkbox-box"></span>
                        E-mail
                    </label>
                    <label className="custom-checkbox-label">
                        <input type="checkbox" checked={notifyPhone} onChange={(e) => setNotifyPhone(e.target.checked)} disabled={isSubmitting} />
                        <span className="custom-checkbox-box"></span>
                        Téléphone
                    </label>
                    <label className="custom-checkbox-label">
                        <input type="checkbox" checked={notifySMS} onChange={(e) => setNotifySMS(e.target.checked)} disabled={isSubmitting} />
                        <span className="custom-checkbox-box"></span>
                        SMS
                    </label>
                </div>
              </div>

              <div className="form-actions-report">
                <button
                  type="button"
                  className="btn btn-secondary btn-icon"
                  onClick={() => navigate('/customer/my-problems')}
                  disabled={isSubmitting}
                >
                  <FiXCircle /> Annuler
                </button>
                <button
                  type="submit"
                  className="btn btn-primary btn-icon"
                  disabled={isSubmitting || isLoadingProducts || userProducts.length === 0}
                >
                   {isSubmitting ? (<><FiSend /> Soumission...</>) : (<><FiSend /> Soumettre le Problème</>)}
                </button>
              </div>
            </form>
           ) : (
               !error && successMessage && (
                   <div className="submission-success-message" style={{textAlign: 'center', padding: '40px 20px'}}>
                       <h3>{successMessage}</h3>
                        <Link to="/customer/my-problems" className="btn btn-secondary" style={{marginTop: '20px'}}>Voir mes problèmes</Link>
                   </div>
               )
           )}
      </div>
    </div>
  );
};

export default ReportIssue;