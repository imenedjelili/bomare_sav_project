// src/pages/customer/WarrantyProducts.js
import React, { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { FiPlus } from 'react-icons/fi';
import { supabase } from '../../supabaseClient'; // Import supabase client
import './WarrantyProducts.css'; // Assuming you have this CSS file

// Map status keys from DB (status_warranty) to front-end keys/text/CSS classes (reuse or redefine)
// Ensure these match values in your DB's status_warranty column
const WARRANTY_STATUS_MAPPING = {
  'active': { key: 'active', label: 'Sous Garantie', cssClass: 'active' },
  'expired': { key: 'expired', label: 'Expirée', cssClass: 'expired' },
  'extended': { key: 'extended', label: 'Prolongée', cssClass: 'extended' },
  'under warranty': { key: 'active', label: 'Sous Garantie', cssClass: 'active' }, // Example: map DB value with space
  'pending_reg': { key: 'pending', label: 'Enregistrement en attente', cssClass: 'pending' }, // Example pending registration status
  'under_repair': { key: 'active', label: 'En réparation', cssClass: 'active' }, // Still 'active' warranty wise?
  'unknown': { key: 'unknown', label: 'Statut inconnu', cssClass: 'unknown' } // Default unknown for null/unexpected values
};

// Problem tab configuration
// Ensure keys here match filtering logic and statusKey values
const productTabsConfig = [
  { key: 'all', label: 'Tous les Produits' },
  { key: 'active', label: 'Sous Garantie' }, // Maps to statusKey 'active' or 'under_repair' etc.
  { key: 'expired', label: 'Expiré' },      // Maps to statusKey 'expired'
  { key: 'extended', label: 'Prolongé' },   // Assuming statusKey 'extended'
  // Add 'pending' tab if you use 'pending_reg' status
  // { key: 'pending', label: 'Enregistrement en attente' },
];


const WarrantyProducts = () => {
  const [activeTabKey, setActiveTabKey] = useState('all');
  const [allUserProducts, setAllUserProducts] = useState([]); // Store all fetched products
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);


  // Fetch user products on mount
  useEffect(() => {
    const fetchUserProducts = async () => {
      setIsLoading(true);
      setError(null); // Clear previous errors

      const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();
      if (authError || !authUser) {
        // If user is not logged in, ProtectedRoute should ideally redirect.
        // This is a fallback message.
        setError("Vous devez être connecté pour voir vos produits.");
        setIsLoading(false);
        return;
      }

      try {
        // Fetch user's products from customer_product for the logged-in user
        // The previous error was caused by comments within the SELECT string interpolation.
        // Removed comments, keeping only the column names.
        const { data: productsData, error: productsError } = await supabase
          .from('customer_product')
          .select(`
            id,
            serie_number,
            produc_name,
            "Purchase Date",
            "Warranty Expiration",
            status_warranty
          `)
          .eq('customer_id', authUser.id)
          // Ensure ordering by column name with space uses double quotes
          .order('"Purchase Date"', { ascending: false });

        if (productsError) {
          console.error("Error fetching user products:", productsError);
          // Display the specific error message from Supabase/PostgREST
          setError(`Impossible de charger vos produits enregistrés. Détail: ${productsError.message}`);
          setAllUserProducts([]); // Clear products list on error
        } else {
          console.log("Fetched user products:", productsData);
          // Map DB data to component friendly format
          const mappedProducts = productsData.map(p => ({
            id: p.id, // DB row ID
            serial: p.serie_number || 'N/A', // Handle potential nulls
            name: p.produc_name || 'Produit inconnu', // Handle potential nulls
            // Access date fields using bracket notation because of the space in the column name
            purchaseDate: p["Purchase Date"] ? new Date(p["Purchase Date"]).toLocaleDateString('fr-FR') : 'Date inconnue',
            warrantyExpiration: p["Warranty Expiration"] ? new Date(p["Warranty Expiration"]).toLocaleDateString('fr-FR') : 'Date inconnue',
            statusKey: p.status_warranty?.toLowerCase() || 'unknown', // Use DB column for key, lowercase for consistency, fallback to unknown
            // Map DB status value to display label/text using the mapping
            status: WARRANTY_STATUS_MAPPING[p.status_warranty?.toLowerCase()]?.label || WARRANTY_STATUS_MAPPING['unknown'].label,
            // Store original purchase date value for sorting purposes in the filter effect
            originalPurchaseDate: p["Purchase Date"],
          }));
          setAllUserProducts(mappedProducts); // Store the full list
        }
      } catch (err) {
        console.error("Unexpected error fetching user products:", err);
        setError("Une erreur inattendue est survenue lors du chargement de vos produits.");
        setAllUserProducts([]);
      } finally {
        setIsLoading(false);
      }
    };

    // Fetch products only when the component mounts or if the user changes (handled by outer routing)
    fetchUserProducts();

  }, []); // Empty dependency array: run only on mount


  // Effect to filter products based on the active tab key
  // Runs when the full list of products or the active tab changes
  useEffect(() => {
    let productsToShow = allUserProducts; // Start with the full list

    if (activeTabKey !== 'all') {
      // Filter based on statusKey derived from DB `status_warranty`
      if (activeTabKey === 'active') {
        // Map 'active' tab to include statuses like 'active', 'under warranty', 'under_repair' from DB (case-insensitive)
        productsToShow = productsToShow.filter(p =>
          ['active', 'under warranty', 'under_repair'].includes(p.statusKey)
        );
      } else if (activeTabKey === 'extended') {
        // Map 'extended' tab to include status 'extended' from DB (case-insensitive)
        productsToShow = productsToShow.filter(p => p.statusKey === 'extended');
      } else if (activeTabKey === 'expired') {
        // Map 'expired' tab to include status 'expired' from DB (case-insensitive)
        productsToShow = productsToShow.filter(p => p.statusKey === 'expired');
      }
      // Add other filters here if you add more tabs based on status
      // else if (activeTabKey === 'pending') {
      //    productsToShow = productsToShow.filter(p => p.statusKey === 'pending_reg');
      // }
      else {
        // Fallback - shouldn't be hit with well-defined tabs/logic
        console.warn(`Unknown activeTabKey: ${activeTabKey}`);
        productsToShow = [];
      }
    }

    // Sort filtered products by original purchase date (descending)
    productsToShow.sort((a, b) => {
      const dateA = a.originalPurchaseDate ? new Date(a.originalPurchaseDate).getTime() : 0; // Use original value or timestamp
      const dateB = b.originalPurchaseDate ? new Date(b.originalPurchaseDate).getTime() : 0;
      return dateB - dateA; // Descending sort
    });


    setFilteredProducts(productsToShow);

    // Re-filter when the main list of products changes or the active tab key changes
  }, [activeTabKey, allUserProducts]); // Dependencies


  // Calculate counts for tabs based on *allUserProducts* list
  // Recalculates whenever the main product list changes
  const productCounts = useMemo(() => {
    return productTabsConfig.reduce((acc, tab) => {
      if (tab.key === 'all') {
        // Count all products except those with 'unknown' status (if desired)
        acc[tab.key] = allUserProducts.filter(p => p.statusKey !== 'unknown').length;
      } else if (tab.key === 'active') { // Count active based on mapped keys (case-insensitive match)
        acc[tab.key] = allUserProducts.filter(p =>
          ['active', 'under warranty', 'under_repair'].includes(p.statusKey)
        ).length;
      } else if (tab.key === 'extended') { // Count extended based on mapped key (case-insensitive match)
        acc[tab.key] = allUserProducts.filter(p => p.statusKey === 'extended').length;
      } else if (tab.key === 'expired') { // Count expired based on mapped key (case-insensitive match)
        acc[tab.key] = allUserProducts.filter(p => p.statusKey === 'expired').length;
      }
      // Add counts for other tabs like 'pending' here if needed
      // else if (tab.key === 'pending') {
      //    acc[tab.key] = allUserProducts.filter(p => p.statusKey?.toLowerCase() === 'pending_reg').length;
      // }
      else {
        // Default for keys not explicitly handled (e.g., 'unknown' tab if added) - unlikely with current config
        acc[tab.key] = allUserProducts.filter(p => p.statusKey === tab.key).length;
      }
      return acc;
    }, {});
  }, [allUserProducts]); // Dependency


  // Render loading state while data is being fetched
  if (isLoading) {
    return (
      <div className="warranty-products-page fade-in-up">
        <div className="page-header">
          <h1>Chargement...</h1>
          <p className="text-secondary">Chargement de vos produits et garanties.</p>
        </div>
        {/* Optional: Add a spinner */}
      </div>
    );
  }

  // Render error state if fetching failed
  if (error) {
    return (
      <div className="warranty-products-page fade-in-up">
        <div className="page-header">
          <h1>Erreur</h1>
          <p className="text-secondary">Une erreur est survenue lors du chargement de vos produits.</p>
        </div>
        <div className="custom-card auth-message error" style={{ maxWidth: '600px', margin: '20px auto' }}>
          <p>{error}</p>
          {/* If the error message suggests authentication is required */}
          {error.includes("connecté") && ( // Simple check for the authentication message
            <Link to="/login" className="btn btn-primary" style={{ marginTop: '15px' }}>Se connecter</Link>
          )}
        </div>
      </div>
    );
  }


  return (
    <div className="warranty-products-page fade-in-up">
      <div className="page-header">
        <h1>Garantie & Produits</h1>
        <p className="text-secondary">Gérez vos produits enregistrés et les informations de garantie.</p>
      </div>

      {/* Tab Filters */}
      <div className="product-filters-container">
        {productTabsConfig.map(tab => (
          <button
            key={tab.key}
            className={`product-filter-btn ${activeTabKey === tab.key ? 'active' : ''}`}
            onClick={() => setActiveTabKey(tab.key)}
            disabled={isLoading} // Disable tabs while loading
          >
            {tab.label} ({productCounts[tab.key] || 0})
          </button>
        ))}
      </div>

      {/* List of Product Cards */}
      <div className="products-list-warranty-container">
        {filteredProducts.length > 0 ? (
          filteredProducts.map(product => (
            <div key={product.id} className="product-warranty-item-card"> {/* Use DB ID as key */}
              <div className="product-card-main-info">
                <h3>{product.name}</h3>
                <p className="product-meta text-secondary">Numéro de série : {product.serial}</p>
                <p className="product-meta text-secondary">Date d'achat : {product.purchaseDate}</p>
                <p className="product-meta text-secondary">Expiration de la garantie : {product.warrantyExpiration}</p>
              </div>
              <div className="product-card-status-action">
                {/* Use mapped status key and status label */}
                {/* Use mapped status cssClass property for styling */}
                <span className={`warranty-status-badge status-${WARRANTY_STATUS_MAPPING[product.statusKey]?.cssClass || WARRANTY_STATUS_MAPPING['unknown'].cssClass}`}>
                  {product.status} {/* Display the mapped label */}
                </span>
                {/* Link to a dedicated product detail page or warranty detail */}
                {/* CORRECTED LINK: Points to the warranty detail page */}
                <Link
                  to={`/customer/warranty-products/${product.id}`} 
                  className="btn btn-secondary"
                  disabled={isLoading} // Disable link while loading
                >
                  Voir les détails
                </Link>
              </div>
            </div>
          ))
        ) : (
          <div className="custom-card no-products-warranty-message">
            <p className="text-secondary">
              {/* Message depends on whether loading or filtered list is empty */}
              {isLoading ? 'Chargement des produits...' :
                allUserProducts.length === 0 ? "Vous n'avez enregistré aucun produit pour le moment." :
                  `Aucun produit trouvé pour "${productTabsConfig.find(t => t.key === activeTabKey)?.label || 'cette catégorie'}".`
              }
            </p>
            {/* Show "Register New Product" button if not loading */}
            {!isLoading && (
              <Link to="/customer/register-product" className="btn btn-primary btn-icon" style={{ marginTop: '15px' }}> {/* Link to product registration form */}
                <FiPlus size={18} style={{ marginRight: '6px' }} /> Enregistrer un nouveau produit
              </Link>
            )}
            {/* Option to view all products if a filter is active and there are products */}
            {!isLoading && activeTabKey !== 'all' && allUserProducts.length > 0 && (
              <button className="btn btn-secondary" style={{ marginTop: '10px' }} onClick={() => setActiveTabKey('all')}>
                Voir tous mes produits
              </button>
            )}
          </div>
        )}
      </div>

      {/* Add Product Button at the bottom */}
      <div className="add-product-button-container">
        {/* This link needs to go to a registration form page, assuming you have one */}
        {/* It's the same destination as the button in the empty state */}
        {/* UPDATED LINK: Points to the registration form page */}
        <Link to="/customer/register-product" className="btn btn-primary btn-icon btn-lg" disabled={isLoading}> {/* Link to a product registration form */}
          <FiPlus size={18} style={{ marginRight: '8px' }} /> Ajouter un Autre Produit
        </Link>
      </div>
    </div>
  );
};

export default WarrantyProducts;