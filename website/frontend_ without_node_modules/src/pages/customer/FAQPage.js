// src/pages/customer/FAQPage.js
import React, { useState, useEffect } from 'react'; // Need useEffect for fetching
import { FiChevronDown, FiChevronUp } from 'react-icons/fi';
import './FAQPage.css'; // Assuming you have this CSS file

// >>> IMPORTANT: Import your actual Supabase client instance <<<
// Adjust the path based on where you saved your supabaseClient.js file
import { supabase } from '../../supabaseClient'; // Assuming it's in src/supabaseClient.js


// >>> Hardcoded faqData array REMOVED to allow fetching from Supabase <<<
// const faqData = [ ... ]; // This entire array has been removed.


const FAQItem = ({ item, index, isActive, onToggle }) => {
  return (
    <div className="faq-item">
      <button
        className={`faq-question ${isActive ? 'active' : ''}`}
        onClick={() => onToggle(index)}
        aria-expanded={isActive}
        aria-controls={`faq-answer-${index}`}
      >
        <span>{item.question}</span>
        {isActive ? <FiChevronUp /> : <FiChevronDown />}
      </button>
      {isActive && (
        <div id={`faq-answer-${index}`} className="faq-answer">
          <p>{item.answer}</p>
        </div>
      )}
    </div>
  );
};


const FAQPage = () => {
  // State variables for data, loading, and error
  const [customerFaqs, setCustomerFaqs] = useState([]);
  const [activeIndex, setActiveIndex] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // useEffect hook to fetch data on component mount
  useEffect(() => {
    const fetchCustomerFaqs = async () => {
      setLoading(true);
      setError(null); // Clear previous errors

      // Fetch data from the 'customer_faqs' table in Supabase
      const { data, error } = await supabase
        .from('customer_faqs') // Ensure this table name is correct ('customer_faqs')
        .select('id, question, answer') // Select necessary columns (id is good for key)
        .order('id', { ascending: true }); // Order by id (adjust if needed)

      if (error) {
        console.error('Error fetching customer FAQs:', error);
        setError(error);
        setCustomerFaqs([]); // Set FAQs array to empty on error
      } else {
        setCustomerFaqs(data || []); // Set FAQs array with fetched data (handle null case)
      }
      setLoading(false); // Set loading to false after fetch
    };

    fetchCustomerFaqs(); // Call the fetch function

    // No cleanup needed for this simple fetch on mount
  }, []); // Empty dependency array means this effect runs only once after the initial render


  const handleToggle = (index) => {
    setActiveIndex(activeIndex === index ? null : index);
  };

  // Render based on loading, error, and fetched data states
  if (loading) {
    return (
      <div className="faq-page fade-in-up">
        <div className="page-header">
          <h1>Questions Fréquemment Posées (FAQ)</h1>
          <p className="text-secondary">Chargement...</p>
        </div>
        <div className="faq-list-container">
          {/* Display a loading message or spinner */}
          <p className="text-secondary" style={{ textAlign: 'center' }}>Chargement des FAQs depuis la base de données...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="faq-page fade-in-up">
         <div className="page-header">
          <h1>Questions Fréquemment Posées (FAQ)</h1>
          <p className="text-secondary">Une erreur est survenue.</p>
        </div>
        <div className="faq-list-container">
          <p className="text-danger" style={{ textAlign: 'center' }}>Erreur lors du chargement des FAQs: {error.message || 'Veuillez réessayer plus tard.'}</p>
           {/* Optional: Add a retry button */}
           {/* <button onClick={() => window.location.reload()} className="btn btn-primary">Réessayer</button> */}
        </div>
      </div>
    );
  }

  // Render the FAQs if loading is false, no error, and data is available
  return (
    <div className="faq-page fade-in-up">
      <div className="page-header">
        <h1>Questions Fréquemment Posées (FAQ)</h1>
        <p className="text-secondary">Trouvez rapidement des réponses à vos interrogations.</p>
      </div>

      <div className="faq-list-container">
        {/* Map over the fetched customerFaqs state */}
        {customerFaqs.length > 0 ? (
          customerFaqs.map((item, index) => (
            <FAQItem
              key={item.id || index} // Use item.id from fetched data as key
              item={item}
              index={index}
              isActive={activeIndex === index}
              onToggle={handleToggle}
            />
          ))
        ) : (
          // Message shown if the fetch was successful but the database table is empty
          <p className="text-secondary" style={{ textAlign: 'center' }}>Aucune FAQ disponible pour le moment.</p>
        )}
      </div>
    </div>
  );
};

export default FAQPage;