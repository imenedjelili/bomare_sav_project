// src/pages/customer/NotificationDetailPage.js
import React, { useEffect, useState } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import { FiArrowLeft, FiBell } from 'react-icons/fi';
// You might want to reuse ProblemDetailPage.css or create NotificationDetailPage.css
import './ProblemDetailPage.css'; // Reusing styles for simplicity

const NotificationDetailPage = () => {
  const { notificationId } = useParams();
  const navigate = useNavigate();
  const [notification, setNotification] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    let isMounted = true;
    const fetchNotificationDetails = async () => {
      if (!isMounted) return;
      setIsLoading(true);
      setError(null);

      const { data: { user }, error: authError } = await supabase.auth.getUser();
      if (!isMounted) return;

      if (authError || !user) {
        setError("Authentification requise pour voir cette notification.");
        setIsLoading(false);
        return;
      }

      try {
        const { data, error: fetchErr } = await supabase
          .from('notifications')
          .select('*') // Select all fields for now, adjust as needed
          .eq('id', notificationId)
          .eq('customer_id', user.id) // Ensure user can only see their own notifications
          .single();

        if (!isMounted) return;

        if (fetchErr) {
          setError(fetchErr.code === 'PGRST116' ? `Notification ${notificationId} non trouvée ou accès non autorisé.` : `Erreur: ${fetchErr.message}`);
          setNotification(null);
        } else {
          setNotification(data);
        }
      } catch (e) {
        if (isMounted) setError("Une erreur inattendue est survenue lors de la récupération de la notification.");
      } finally {
        if (isMounted) setIsLoading(false);
      }
    };

    if (notificationId) {
      fetchNotificationDetails();
    } else {
        setError("ID de notification non spécifié.");
        setIsLoading(false);
    }

    return () => { isMounted = false; };
  }, [notificationId]);

  if (isLoading) {
    return (
      <div className="problem-detail-page-loading"> {/* Reuse problem detail loading style */}
        <h2>Chargement de la Notification...</h2>
        <div className="loading-spinner-detail"></div> {/* Reuse spinner style */}
      </div>
    );
  }

  if (error) {
    return (
      <div className="problem-detail-page fade-in-up">
        <div className="page-header"><h1>Erreur de Notification</h1></div>
        <div className="custom-card error-card">
          <p className="text-danger">{error}</p>
          <Link to="/customer/notifications" className="btn btn-secondary" style={{ marginTop: '20px' }}>
            <FiArrowLeft style={{ marginRight: '8px' }} /> Retour aux Notifications
          </Link>
        </div>
      </div>
    );
  }

  if (!notification) {
    return (
      <div className="problem-detail-page fade-in-up">
        <div className="page-header"><h1>Notification Introuvable</h1></div>
        <div className="custom-card info-card">
          <p>Les détails pour cette notification n'ont pas pu être chargés.</p>
          <Link to="/customer/notifications" className="btn btn-secondary" style={{ marginTop: '20px' }}>
            <FiArrowLeft style={{ marginRight: '8px' }} /> Retour aux Notifications
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="problem-detail-page fade-in-up"> {/* Reuse general detail page styles */}
      <div className="page-header">
        <h1>Détail de la Notification</h1>
        <button onClick={() => navigate(-1)} className="btn btn-secondary btn-sm btn-icon page-header-action-btn">
          <FiArrowLeft /> Retour
        </button>
      </div>
      <div className="problem-detail-container"> {/* Reuse container style */}
        <div className="custom-card problem-summary-card"> {/* Reuse card styles */}
          <div style={{display: 'flex', alignItems: 'center', marginBottom: '15px'}}>
            <FiBell size={24} style={{ marginRight: '10px', color: 'var(--accent-color)' }} />
            <h2>{notification.title || 'Notification'}</h2>
          </div>
          <div className="problem-meta-grid">
            <div><strong>Date:</strong> {new Date(notification.created_at).toLocaleString('fr-FR')}</div>
            <div><strong>Type:</strong> {notification.type || 'N/A'}</div>
            {/* You can add more relevant fields from your 'notifications' table here */}
          </div>
        </div>

        <div className="custom-card problem-description-card">
            <h3>Message:</h3>
            <p className="text-secondary" style={{whiteSpace: 'pre-wrap'}}>{notification.message || "Aucun message détaillé."}</p>
        </div>
        
        {/* You could add related links or actions here */}
        {/* Example: if notification is about a problem ticket
        {notification.related_ticket_id && 
            <div className="custom-card problem-actions-card">
                 <Link to={`/customer/my-problems/detail/${notification.related_ticket_id}`} className="btn btn-primary">
                    Voir le Problème Associé
                 </Link>
            </div>
        }
        */}
      </div>
    </div>
  );
};

export default NotificationDetailPage;