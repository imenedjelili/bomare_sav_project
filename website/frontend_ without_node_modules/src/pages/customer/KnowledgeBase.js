// src/pages/customer/KnowledgeBase.js
import React, { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { FiSearch, FiEye, FiChevronRight } from 'react-icons/fi';
// import { mockKnowledgeBase } from '../../services/mockData'; // Remove mock data
import { supabase } from '../../supabaseClient'; // Import supabase client
import './KnowledgeBase.css';

// Example categories (need to match what you store in DB)
const categoriesConfig = [
  { key: 'all', label: 'Tous' },
  { key: 'tvs', label: 'TVs' }, // Use lowercase keys for comparison consistency
  { key: 'smartphones', label: 'Smartphones' },
  { key: 'audio', label: 'Audio domestique' },
  { key: 'tablets', label: 'Tablettes' },
  { key: 'other', label: 'Autres' }, // Add 'Autres' or match what's in DB
];

// Helper function to map DB guide data to component friendly format
const mapDbGuideToComponent = (dbGuide) => ({
    id: dbGuide.id,
    title: dbGuide.title,
    // description: dbGuide.content?.substring(0, 150) + '...' || '', // Assuming 'content' holds the guide text
    date: dbGuide.published_at ? new Date(dbGuide.published_at).toLocaleDateString('fr-FR') : dbGuide.created_at ? new Date(dbGuide.created_at).toLocaleDateString('fr-FR') : 'Date inconnue', // Use publish date or created date
    category: dbGuide.category || 'Autres', // Assume a 'category' column exists in the guides table
    // Add other fields like 'url' if you store guides elsewhere (PDF/video)
    // If content is stored in DB: need to fetch it for the detail page
    // url: `/customer/knowledge-base/guide/${dbGuide.id}`, // Link to detail page
});


const KnowledgeBase = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [activeCategoryKey, setActiveCategoryKey] = useState('all');
  const [allGuides, setAllGuides] = useState([]); // Store all guides fetched
  const [filteredGuides, setFilteredGuides] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);


  // Fetch all guides on mount
  useEffect(() => {
    const fetchGuides = async () => {
      setIsLoading(true);
      setError(null);
      try {
        // Fetch guides from a hypothetical 'guides' table
        // Assumed columns: id, title, content, category, published_at, created_at
        const { data: guidesData, error: guidesError } = await supabase
            .from('guides') // Replace 'guides' with your actual table name for knowledge base articles/videos/etc.
            .select('id, title, category, created_at, published_at') // Fetch necessary fields, NOT the full content here usually
            .eq('is_published', true) // Assuming a column to filter draft vs published
            .order('published_at', { ascending: false, nullsFirst: false }); // Order by publish date

        if (guidesError) {
          console.error("Error fetching guides:", guidesError);
          setError("Impossible de charger les guides de la base de connaissances.");
          setAllGuides([]);
        } else {
            console.log("Fetched guides:", guidesData);
             const mappedGuides = guidesData.map(mapDbGuideToComponent);
            setAllGuides(mappedGuides); // Store all fetched guides
        }
      } catch (err) {
        console.error("Unexpected error fetching guides:", err);
         setError("Une erreur inattendue s'est produite lors du chargement des guides.");
        setAllGuides([]);
      } finally {
        setIsLoading(false);
      }
    };

    fetchGuides();
  }, []); // Empty dependency array


  // Effect to filter guides based on search term and active category
  useEffect(() => {
    let guidesToShow = allGuides; // Start with the full list from state

    if (activeCategoryKey !== 'all') {
      guidesToShow = guidesToShow.filter(guide =>
         guide.category && guide.category.toLowerCase() === activeCategoryKey.toLowerCase()
      );
    }

    if (searchTerm) {
      guidesToShow = guidesToShow.filter(guide =>
        guide.title.toLowerCase().includes(searchTerm.toLowerCase()) // Filter by title
        // Add more fields if needed: || guide.content.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
     // Sort if necessary - can sort client-side after filtering if list is not huge
     guidesToShow.sort((a,b) => new Date(b.date) - new Date(a.date)); // Sort by date desc


    setFilteredGuides(guidesToShow);

    // Re-filter when the main guides list changes OR filters/search terms change
  }, [searchTerm, activeCategoryKey, allGuides]);


  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleCategoryFilter = (categoryKey) => {
    setActiveCategoryKey(categoryKey);
     // Clear search term when changing category? Optional behaviour.
     // setSearchTerm('');
  };

  // Display Logic: For 'all' category, maybe only show recent X. For specific categories, show all.
   // Decided to show the first 3 *filtered* guides if category is 'all', otherwise show all *filtered* guides for that category.
  const displayedSubset = activeCategoryKey === 'all' ? filteredGuides.slice(0, 3) : filteredGuides;


  if (isLoading) {
      return (
          <div className="knowledge-base-page fade-in-up">
              <div className="page-header">
                <h1>Chargement...</h1>
                <p className="text-secondary">Chargement de la base de connaissances.</p>
              </div>
           </div>
      );
  }

   if (error) {
      return (
         <div className="knowledge-base-page fade-in-up">
              <div className="page-header">
                <h1>Erreur</h1>
                <p className="text-secondary">Une erreur est survenue lors du chargement de la base de connaissances.</p>
              </div>
               <div className="custom-card auth-message error" style={{ maxWidth: '600px', margin: '20px auto' }}>
                 <p>{error}</p>
              </div>
           </div>
      );
   }


  return (
    <div className="knowledge-base-page fade-in-up">
      <div className="page-header">
        <h1>Base de Connaissances</h1>
        <p className="text-secondary">Trouvez des solutions aux problèmes courants et accédez aux guides produits.</p>
      </div>

      {/* Search Bar */}
      <div className="kb-search-bar-container">
        <div className="search-bar-kb">
          <input
            type="text"
            placeholder="Rechercher..."
            value={searchTerm}
            onChange={handleSearchChange}
             disabled={isLoading} // Disable search while loading
          />
          <FiSearch className="search-icon-kb" />
        </div>
      </div>

      {/* Category Filters */}
      <div className="kb-filters-container">
        <span className="kb-filter-label">Filtrer par catégorie :</span>
        <div className="kb-category-tabs">
          {categoriesConfig.map(category => (
            <button
              key={category.key}
              className={`kb-category-filter-btn ${activeCategoryKey === category.key ? 'active' : ''}`}
              onClick={() => handleCategoryFilter(category.key)}
               disabled={isLoading} // Disable filters while loading
            >
              {category.label}
            </button>
          ))}
        </div>
      </div>

      {/* Guides List Section */}
      <div className="guides-section-header">
         <h3>Guides {activeCategoryKey === 'all' ? 'Récents' : categoriesConfig.find(c=>c.key === activeCategoryKey)?.label} :</h3>
          {/* "Voir plus" link for 'all' category if more than the subset exists */}
         {(activeCategoryKey === 'all' && filteredGuides.length > displayedSubset.length) && (
              <Link to="/customer/knowledge-base?category=all" className="view-all-guides-link"> {/* Link to the same page but with category filter */}
                Voir tous les guides <FiChevronRight /> {/* Update text/icon as needed */}
            </Link>
          )}
      </div>

      {/* List of Guide Cards */}
      <div className="guides-list-container">
        {displayedSubset.length > 0 ? (
          displayedSubset.map(guide => (
            <div key={guide.id} className="custom-card guide-item-card">
              <div className="guide-card-content">
                <h4>{guide.title}</h4>
                {/* If description preview exists in your fetched data */}
                {/* <p className="text-secondary guide-description-preview">{guide.description}</p> */}
              </div>
              <div className="guide-card-meta">
                <span className="guide-date text-accent">{guide.date}</span>
                {/* Link to a dedicated guide detail page, passing the guide ID */}
                 <Link to={`/customer/knowledge-base/guide/${guide.id}`} className="card-action-icon" aria-label={`Voir le guide : ${guide.title}`}>
                   <FiEye size={16} />
                </Link>
              </div>
            </div>
          ))
        ) : (
          <div className="custom-card no-guides-message">
            <p className="text-secondary">
               {/* Improved message based on filtering */}
                {isLoading ? 'Chargement des guides...' : (searchTerm || activeCategoryKey !== 'all') ? `Aucun guide trouvé pour "${searchTerm || ''}" dans "${categoriesConfig.find(c=>c.key === activeCategoryKey)?.label || 'Tous'}".` : `Aucun guide n'est encore disponible dans la base de connaissances.`}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default KnowledgeBase;