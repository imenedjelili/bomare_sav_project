// src/pages/customer/SettingsPage.js
import React, { useState, useEffect } from 'react';
import { FiSave, FiBell, FiLock, FiGlobe, FiEye, FiEyeOff, FiSettings } from 'react-icons/fi';
import { useTranslation } from 'react-i18next'; // Import useTranslation
import { supabase } from '../../supabaseClient';
import './SettingsPage.css'; 

const SettingsPage = () => {
  const { t, i18n } = useTranslation(); // Initialize useTranslation

  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null); 

  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showCurrentPassword, setShowCurrentPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [passwordError, setPasswordError] = useState(null);
  const [passwordSuccess, setPasswordSuccess] = useState(null);
  const [isChangingPassword, setIsChangingPassword] = useState(false);

   const [userProfile, setUserProfile] = useState({
       first_name: '',
       last_name: '',
       email: '',
   });
  const [isSavingProfile, setIsSavingProfile] = useState(false);
  
  // Language state now reflects i18n's current language
  const [selectedLanguage, setSelectedLanguage] = useState(i18n.language);

  // Sync local selectedLanguage state with i18n language changes
  useEffect(() => {
    setSelectedLanguage(i18n.language);
  }, [i18n.language]);


   useEffect(() => {
       let isMounted = true; 

      const fetchProfile = async () => {
           setIsLoading(true);
           setError(null);

           const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();

            if (!isMounted) return;

            if (authError || !authUser) {
                 setError(t("settingsPage.authError"));
                 setIsLoading(false);
                 setUserProfile({}); 
                 return;
            }

           try {
              const { data: profileData, error: profileError } = await supabase
                  .from('Users')
                  .select(`first_name, last_name, email`)
                  .eq('id', authUser.id)
                  .single();

               if (!isMounted) return;

               if (profileError) {
                   console.error("Error fetching user profile:", profileError);
                    setError(t("settingsPage.errorText"));
               } else if (profileData) {
                   setUserProfile(profileData);
               } else {
                   console.warn("User profile row not found while fetching profile data.");
               }

           } catch (err) {
                if (!isMounted) return;
               console.error("Unexpected error fetching user profile:", err);
                setError(t("settingsPage.errorText"));
           } finally {
                if (!isMounted) return;
               setIsLoading(false);
           }
      };

       fetchProfile();
        return () => { isMounted = false; };
   }, [t]); // Added t to dependency array


   const handleProfileChange = (e) => {
       const { name, value } = e.target;
       setUserProfile(prevProfile => ({
           ...prevProfile,
           [name]: value
       }));
   };

   const handleProfileSave = async () => {
        setIsSavingProfile(true);
        setError(null);
        setPasswordError(null);
        setPasswordSuccess(null);

        try {
            const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();
             if (authError || !authUser) {
                 setError(t("settingsPage.authError"));
                 setIsSavingProfile(false);
                 return;
             }
             const { error: updateError } = await supabase
                .from('Users')
                 .update({
                    first_name: userProfile.first_name,
                    last_name: userProfile.last_name,
                 })
                 .eq('id', authUser.id);

            if (updateError) {
                console.error("Supabase Save Profile Error:", updateError);
                 const userMessage = updateError.message || 'Veuillez rÃ©essayer.';
                 setError(t("settingsPage.profileSavedError", { message: userMessage }));
                 alert(t("settingsPage.profileSavedError", { message: userMessage }));
            } else {
                 alert(t("settingsPage.profileSavedSuccess"));
            }
        } catch (err) {
             console.error("Unexpected error saving profile:", err);
             setError(t("settingsPage.unexpectedSaveError"));
             alert(t("settingsPage.unexpectedSaveError"));
        } finally {
             setIsSavingProfile(false);
        }
   };

   const handleNotificationPreferenceChange = (e) => {
      // const { name, checked } = e.target;
      // This part remains non-functional as per original logic
       console.log(`Notification preference change. This will NOT be saved.`);
   };

    const handleLanguageChange = (e) => {
       const newLanguage = e.target.value;
       setSelectedLanguage(newLanguage); // Update local state for the dropdown
       i18n.changeLanguage(newLanguage); // Change the actual language
    };

  const handlePasswordSubmit = async (e) => {
    e.preventDefault();
    setPasswordError(null);
    setPasswordSuccess(null);
    setError(null);

     if (!currentPassword || !newPassword || !confirmPassword) {
         setPasswordError(t("settingsPage.passwordErrorRequired"));
         return;
     }
     if (newPassword !== confirmPassword) {
          setPasswordError(t("settingsPage.passwordErrorMismatch"));
          return;
     }
    if (newPassword.length < 6) {
      setPasswordError(t("settingsPage.passwordErrorLength"));
      return;
    }
      if (currentPassword === newPassword) {
           setPasswordError(t("settingsPage.passwordErrorSameAsOld"));
          return;
      }

    setIsChangingPassword(true);

    try {
        const { data, error: updateError } = await supabase.auth.updateUser({
             password: newPassword
         });

        if (updateError) {
             console.error("Supabase Change Password Error:", updateError);
             setPasswordSuccess(null);
             setPasswordError(t("settingsPage.passwordChangedError", { message: updateError.message || 'Please try again.'}));
        } else if (data?.user) {
            console.log("Password updated successfully:", data.user);
             setPasswordSuccess(t("settingsPage.passwordChangedSuccess"));
            setCurrentPassword('');
            setNewPassword('');
            setConfirmPassword('');
        } else {
            console.warn("Password update returned no user data:", data);
             setPasswordError(t("settingsPage.passwordChangedError", { message: 'Unknown error after password change.'}));
        }

    } catch (err) {
       console.error("Unexpected error during password change:", err);
       setPasswordError(t("settingsPage.passwordUnexpectedError"));
    } finally {
       setIsChangingPassword(false);
    }
  };

    if (isLoading) {
        return (
             <div className="settings-page fade-in-up">
                <div className="page-header">
                   <h1>{t('settingsPage.loadingTitle')}</h1>
                   <p className="text-secondary">{t('settingsPage.loadingText')}</p>
                    <div style={{marginTop: '20px'}}><div className="loading-spinner"></div></div>
                </div>
             </div>
        );
    }

   if (error && !isLoading) { // Check !isLoading to ensure error is from fetch, not an action
       return (
         <div className="settings-page fade-in-up">
             <div className="page-header">
                 <h1>{t('settingsPage.errorTitle')}</h1>
                 <p className="text-secondary">{t('settingsPage.errorText')}</p>
             </div>
             <div className="custom-card auth-message error" style={{ maxWidth: '600px', margin: '20px auto' }}>
                <p>{error}</p>
             </div>
         </div>
       );
   }

  return (
    <div className="settings-page fade-in-up">
      <div className="page-header">
        <h1>{t('settingsPage.pageTitle')}</h1>
        <p className="text-secondary">{t('settingsPage.pageSubtitle')}</p>
      </div>

      <div className="settings-sections-container">
         <section className="custom-card settings-section">
             <h3 className="settings-section-title"><FiSettings size={20} /> {t('settingsPage.profileInfoTitle')}</h3>
             <form onSubmit={(e) => { e.preventDefault(); handleProfileSave(); }}>
                 <div className="form-group">
                    <label htmlFor="firstNameInput" className="label">{t('settingsPage.firstNameLabel')}</label>
                     <input
                         type="text"
                         id="firstNameInput"
                         className="input-field"
                         name="first_name"
                         value={userProfile.first_name || ''}
                         onChange={handleProfileChange}
                         disabled={isSavingProfile}
                     />
                 </div>
                 <div className="form-group">
                    <label htmlFor="lastNameInput" className="label">{t('settingsPage.lastNameLabel')}</label>
                     <input
                         type="text"
                         id="lastNameInput"
                         className="input-field"
                         name="last_name"
                         value={userProfile.last_name || ''}
                         onChange={handleProfileChange}
                         disabled={isSavingProfile}
                     />
                 </div>
                 <div className="form-group">
                    <label className="label">{t('settingsPage.emailLabel')}</label>
                     <p className="input-field-display">{userProfile.email || t('settingsPage.emailNotAvailable')}</p>
                 </div>
                 <div className="form-actions">
                   <button type="submit" className="btn btn-primary btn-icon" disabled={isSavingProfile}>
                     {isSavingProfile ? (<><FiSave /> {t('settingsPage.savingProfileButton')}</>) : (<><FiSave /> {t('settingsPage.saveProfileButton')}</>)}
                   </button>
                 </div>
             </form>
         </section>

        <section className="custom-card settings-section">
          <h3 className="settings-section-title"><FiLock size={20} /> {t('settingsPage.changePasswordTitle')}</h3>
          {passwordError && <p className="form-message error">{passwordError}</p>}
          {passwordSuccess && <p className="form-message success">{passwordSuccess}</p>}

          <form onSubmit={handlePasswordSubmit}>
            <div className="form-group">
              <label htmlFor="currentPasswordInput" className="label">{t('settingsPage.currentPasswordLabel')}</label>
              <div className="password-input-wrapper">
                <input
                  type={showCurrentPassword ? "text" : "password"}
                  id="currentPasswordInput"
                  className="input-field"
                  value={currentPassword}
                  onChange={(e) => setCurrentPassword(e.target.value)}
                  placeholder={t('settingsPage.currentPasswordPlaceholder')}
                  required
                   disabled={isChangingPassword}
                />
                <button
                  type="button"
                  className="password-toggle"
                  onClick={() => setShowCurrentPassword(!showCurrentPassword)}
                  aria-label={showCurrentPassword ? t('settingsPage.hidePassword') : t('settingsPage.showPassword')}
                   disabled={isChangingPassword}
                >
                  {showCurrentPassword ? <FiEyeOff /> : <FiEye />}
                </button>
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="newPasswordInput" className="label">{t('settingsPage.newPasswordLabel')}</label>
              <div className="password-input-wrapper">
                <input
                  type={showNewPassword ? "text" : "password"}
                  id="newPasswordInput"
                  className="input-field"
                  value={newPassword}
                  onChange={(e) => setNewPassword(e.target.value)}
                  placeholder={t('settingsPage.newPasswordPlaceholder')}
                  required
                  minLength={6}
                   disabled={isChangingPassword}
                />
                <button
                  type="button"
                  className="password-toggle"
                  onClick={() => setShowNewPassword(!showNewPassword)}
                  aria-label={showNewPassword ? t('settingsPage.hidePassword') : t('settingsPage.showPassword')}
                   disabled={isChangingPassword}
                >
                  {showNewPassword ? <FiEyeOff /> : <FiEye />}
                </button>
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="confirmPasswordInput" className="label">{t('settingsPage.confirmPasswordLabel')}</label>
              <div className="password-input-wrapper">
              <input
                type={showConfirmPassword ? "text" : "password"}
                id="confirmPasswordInput"
                className="input-field"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                placeholder={t('settingsPage.confirmPasswordPlaceholder')}
                required
                minLength={6}
                 disabled={isChangingPassword}
              />
              <button
                type="button"
                className="password-toggle"
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                aria-label={showConfirmPassword ? t('settingsPage.hidePassword') : t('settingsPage.showPassword')}
                 disabled={isChangingPassword}
                >
                  {showConfirmPassword ? <FiEyeOff /> : <FiEye />}
                </button>
              </div>
            </div>

            <div className="form-actions">
              <button type="submit" className="btn btn-primary btn-icon" disabled={isChangingPassword}>
                {isChangingPassword ? (<><FiSave /> {t('settingsPage.savingPasswordButton')}</>) : (<><FiSave /> {t('settingsPage.savePasswordButton')}</>)}
              </button>
            </div>
          </form>
        </section>

        <section className="custom-card settings-section">
          <h3 className="settings-section-title"><FiBell size={20} /> {t('settingsPage.notificationPreferencesTitle')}</h3>
           <p className="form-message warning">{t('settingsPage.notificationsNotSavedWarning')}</p>
          <div className="custom-checkbox-group settings-checkbox-group">
            <label className="custom-checkbox-label">
              <input type="checkbox" name="notify_email" defaultChecked={true} onChange={handleNotificationPreferenceChange} disabled={true} />
              <span className="custom-checkbox-box"></span>
              {t('settingsPage.notifyByEmailLabel')}
            </label>
            <label className="custom-checkbox-label">
              <input type="checkbox" name="notify_phone" defaultChecked={false} onChange={handleNotificationPreferenceChange} disabled={true} />
              <span className="custom-checkbox-box"></span>
              {t('settingsPage.notifyByPhoneLabel')}
            </label>
            <label className="custom-checkbox-label">
              <input type="checkbox" name="notify_sms" defaultChecked={false} onChange={handleNotificationPreferenceChange} disabled={true} />
              <span className="custom-checkbox-box"></span>
              {t('settingsPage.notifyBySmsLabel')}
            </label>
          </div>
        </section>

        <section className="custom-card settings-section">
          <h3 className="settings-section-title"><FiGlobe size={20} /> {t('settingsPage.displayLanguageTitle')}</h3>
           {/* <p className="form-message warning">{t('settingsPage.languageNotSavedWarning')}</p> Commented out as language IS saved by i18next */}
          <div className="form-group">
            <label htmlFor="languageSelect" className="label">{t('settingsPage.chooseLanguageLabel')}</label>
            <select
                id="languageSelect"
                className="select-field custom-select"
                name="language"
                value={selectedLanguage} // Controlled by i18n.language via useEffect
                onChange={handleLanguageChange}
            >
              <option value="fr">{t('settingsPage.languageFrench')}</option>
              <option value="en">{t('settingsPage.languageEnglish')}</option>
              <option value="ar">{t('settingsPage.languageArabic')}</option>
            </select>
          </div>
        </section>

      </div>
    </div>
  );
};

export default SettingsPage;