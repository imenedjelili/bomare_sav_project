// src/pages/customer/Dashboard.js
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { FiChevronRight } from 'react-icons/fi';
import { useTranslation } from 'react-i18next'; // Correct import
import { supabase } from '../../supabaseClient';
import './Dashboard.css';

const ACTIVE_STATUS_KEYS = ['new', 'pending', 'inprogress', 'planned'];

const Dashboard = () => {
  const { t, i18n } = useTranslation(); // Ensure 'i18n' is destructured here
  const [user, setUser] = useState(null);
  const [problems, setProblems] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  // Debug log to check i18n object
  // console.log("Dashboard.js - i18n object:", i18n);
  // console.log("Dashboard.js - i18n.language:", i18n ? i18n.language : "i18n object is undefined/null");


  const getStatusText = (statusKey) => {
    return t(`dashboard.statusMapping.${statusKey}`, { defaultValue: t('dashboard.statusMapping.unknown') });
  };


  useEffect(() => {
    let isMounted = true;

    const fetchData = async () => {
      if (!isMounted) return;
      setIsLoading(true);
      setError(null);

      try {
          const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();

          if (authError || !authUser) {
              if (isMounted) {
                 console.error("Dashboard fetch: No authenticated user found.", authError);
                 setError(t("dashboard.mustBeLoggedIn"));
                 setIsLoading(false);
              }
              return;
          }

          const userId = authUser.id;

           if (isMounted) {
               const { data: userData, error: userError } = await supabase
                   .from('Users')
                   .select('first_name, last_name')
                   .eq('id', userId)
                   .single();

               if (isMounted) {
                   if (userError || !userData) {
                       console.error("Error fetching user profile for dashboard welcome:", userError);
                       setUser({ name: t('dashboard.welcomeUserDefault') });
                       setError(prevError => `${prevError ? prevError + ' / ' : ''} ${t('dashboard.errorLoadingName')}`);
                   } else {
                       setUser({ name: `${userData.first_name || ''} ${userData.last_name || ''}`.trim() || t('dashboard.welcomeUserDefault') });
                   }
               }
           }

           if (isMounted) {
               const { data: problemsData, error: problemsError } = await supabase
                   .from('customer_tickets')
                   .select(`
                     id,
                     problem,
                     status_problem,
                     created_at,
                     updated_at,
                     customer_product (
                         id,
                         serie_number,
                         produc_name,
                         products (
                             product_name
                         )
                     )
                   `)
                   .eq('customer_id', userId)
                   .order('created_at', { ascending: false });

               if (isMounted) {
                   if (problemsError) {
                       console.error("Error fetching user problems:", problemsError);
                       setError(prevError => `${prevError ? prevError + ' / ' : ''} ${t('dashboard.errorLoadingProblems')}`);
                       setProblems([]);
                   } else {
                       const currentLanguage = i18n.language; // Get current language
                       const mappedProblems = problemsData
                           .filter(p => p.customer_product !== null)
                           .map(p => {
                               const statusKey = p.status_problem || 'unknown';
                               return {
                                   id: p.id,
                                   title: p.problem ? (p.problem.length > 50 ? p.problem.substring(0, 50) + '...' : p.problem) : t('dashboard.problemTitleDefault'),
                                   details: p.problem ? (p.problem.length > 150 ? p.problem.substring(0, 150) + '...' : p.problem) : t('dashboard.problemDetailsDefault'),
                                   statusKey: statusKey,
                                   status: getStatusText(statusKey), 
                                   cssClass: statusKey, 
                                   signalDate: p.created_at ? new Date(p.created_at).toLocaleDateString(currentLanguage) : t('dashboard.unknownDate'), // Use captured currentLanguage
                                   lastUpdate: p.updated_at ? new Date(p.updated_at).toLocaleDateString(currentLanguage) : (p.created_at ? new Date(p.created_at).toLocaleDateString(currentLanguage) : t('dashboard.never')), // Use captured currentLanguage
                                   productName: p.customer_product?.products?.product_name || p.customer_product?.produc_name || t('dashboard.unknownProduct'),
                                   productSerial: p.customer_product?.serie_number || t('dashboard.notApplicableShort'),
                               };
                           });
                       setProblems(mappedProblems);
                   }
               }
           }
      } catch (err) {
          if (isMounted) {
             console.error("Dashboard fetch unexpected error:", err);
             setError(prevError => `${prevError ? prevError + ' / ' : ''} ${t('dashboard.unexpectedError')}`);
             setUser(null);
             setProblems([]);
          }
      } finally {
          if (isMounted) {
              setIsLoading(false);
          }
      }
    };

    // Check if i18n object is available before fetching data that depends on i18n.language
    if (i18n && i18n.language) {
        fetchData();
    } else {
        // If i18n.language is not yet available, you might want to wait or log a warning.
        // The Suspense mechanism should ideally prevent this component from rendering until i18n is ready.
        console.warn("Dashboard.js: i18n.language not available on initial effect run. Waiting for Suspense or language detection.");
    }


    return () => {
        isMounted = false;
    };
  }, [t, i18n]); // Changed dependency from i18n.language to i18n.
                  // The t function and i18n instance are generally stable references from the hook.
                  // The effect will re-run if t or i18n object reference changes (which is rare but correct).
                  // The actual language change is handled by i18next internally, re-rendering components that use 't' or 'i18n.language'.


  const activeProblemsList = problems
       .filter(problem => ACTIVE_STATUS_KEYS.includes(problem.statusKey))
       .slice(0, 2);

  const openProblemsCount = problems.filter(p => ['new', 'inprogress', 'planned'].includes(p.statusKey)).length;
  const pendingResponseCount = problems.filter(p => p.statusKey === 'pending').length;


  if (isLoading) {
      return (
           <div className="dashboard-page fade-in-up" style={{ textAlign: 'center', padding: '50px' }}>
              <div className="page-header">
                 <h1>{t('dashboard.loading')}</h1>
                 <p className="text-secondary">{t('dashboard.preparingDashboard')}</p>
              </div>
           </div>
      );
  }

   if (error && problems.length === 0 && !isLoading) {
       return (
            <div className="dashboard-page fade-in-up" style={{ textAlign: 'center', padding: '50px', color: 'var(--error-color)' }}>
                <div className="page-header">
                    <h1>{t('dashboard.errorLoading')}</h1>
                    <p className="text-secondary">{t('dashboard.cannotDisplayDashboard')}</p>
                </div>
                <div className="custom-card auth-message error" style={{ maxWidth: '600px', margin: '20px auto' }}>
                   <p>{error}</p>
                </div>
            </div>
       );
   }

  const displayedUser = user || { name: t('dashboard.welcomeUserDefault') };

  return (
    <div className="dashboard-page fade-in-up">
      <div className="welcome-message-container delay-1">
        <h2>{t('dashboard.welcome', { name: displayedUser.name })}</h2>
        <p className="text-secondary">
            {error && !isLoading && openProblemsCount === 0 && problems.length === 0 && (
                 <span className="auth-message error" style={{ display: 'block', margin: '10px 0', fontSize: '0.9em', color: 'var(--error-color)' }}>{error}</span>
             )}
            {t('dashboard.welcomeSubtitle', { count: openProblemsCount, openCount: openProblemsCount, pendingCount: pendingResponseCount, context: `${openProblemsCount === 1 ? 'one' : 'other'}_${pendingResponseCount === 1 ? 'one' : 'other'}` })}
        </p>
      </div>

      <div className="dashboard-actions-container delay-2">
        <Link to="/customer/report-issue" className="action-card report">
          <h3>{t('dashboard.reportProblem')}</h3>
        </Link>
        <Link to="/customer/knowledge-base" className="action-card knowledge center-action-card">
          <h3>{t('dashboard.searchKnowledgeBase')}</h3>
        </Link>
        <Link to="/customer/my-products" className="action-card warranty">
          <h3>{t('dashboard.viewProductsAndWarranty')}</h3>
        </Link>
      </div>

      <div className="active-problems-section delay-3">
        <div className="active-problems-header">
          <h3>
            {problems.length > activeProblemsList.length 
                ? t('dashboard.activeProblemsFull', { visibleCount: activeProblemsList.length, totalCount: problems.length}) 
                : t('dashboard.activeProblems', { count: activeProblemsList.length })
            }
            </h3>
          {problems.length > 0 && (
             <Link to="/customer/my-problems" className="view-all-link">
               {t('dashboard.viewAll', { count: problems.length })} <FiChevronRight />
             </Link>
          )}
        </div>
        {activeProblemsList.length > 0 ? (
          activeProblemsList.map(problem => (
            <div key={problem.id} className={`custom-card problem-card-dashboard status-${problem.cssClass}`}>
              <div className="problem-card-content">
                <h4>{t('dashboard.ticketId', { id: problem.id })} - {problem.title}</h4>
                <p className="text-secondary small-text">{t('dashboard.productLabel')} : {problem.productName} ({problem.productSerial})</p>
                <p className="text-secondary small-text">{t('dashboard.reportedOn')} : {problem.signalDate} | {t('dashboard.lastUpdatedOn')} : {problem.lastUpdate}</p>
                 {problem.details && <p className="text-secondary small-text">{problem.details}</p>}
                <p className="problem-status-line">
                  {t('dashboard.statusLabel')} : <span className={`status-text status-text-${problem.cssClass}`}>{problem.status}</span>
                </p>
              </div>
              <div className="problem-card-action-button">
                 <Link to={`/customer/my-problems/detail/${problem.id}`} className="btn btn-secondary">
                   {t('dashboard.viewDetails')}
                 </Link>
              </div>
            </div>
          ))
        ) : (
          <div className="custom-card no-problems-message">
             {problems.length > 0 ? (
                  <p className="text-secondary">{t('dashboard.noActiveProblems')}</p>
              ) : (
                  <p className="text-secondary">{t('dashboard.noProblemsRecorded')}</p>
             )}
             <Link to="/customer/report-issue" className="btn btn-primary" style={{marginTop: '15px'}}>{t('dashboard.reportNewProblem')}</Link>
          </div>
        )}

        {problems.length > 0 && activeProblemsList.length === 0 && (
            <div style={{ textAlign: 'center', marginTop: '20px' }}>
                 <Link to="/customer/my-problems" className="view-all-link">
                   {t('dashboard.viewAllMyProblems', { count: problems.length })} <FiChevronRight />
                 </Link>
             </div>
        )}
      </div>
    </div>
  );
};

export default Dashboard;