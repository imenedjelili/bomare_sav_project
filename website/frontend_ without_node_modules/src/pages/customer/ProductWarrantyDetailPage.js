// src/pages/customer/ProductWarrantyDetailPage.js
import React, { useState, useEffect } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { FiArrowLeft, FiFileText, FiCalendar, FiShield, FiInfo, FiAlertTriangle } from 'react-icons/fi';
import { supabase } from '../../supabaseClient';
import './ProductWarrantyDetailPage.css'; // Create this CSS file

// Re-use or redefine WARRANTY_STATUS_MAPPING to match your DB check constraint
const WARRANTY_STATUS_MAPPING = {
  'under warranty': { key: 'under warranty', label: 'Sous Garantie', cssClass: 'active' },
  'expired': { key: 'expired', label: 'Expirée', cssClass: 'expired' },
  'out of warranty': { key: 'expired', label: 'Hors Garantie', cssClass: 'expired' }, // Map to 'expired' for styling
  'Extended warranty (purchased)': { key: 'extended', label: 'Garantie Prolongée', cssClass: 'extended' },
  'unknown': { key: 'unknown', label: 'Statut Inconnu', cssClass: 'unknown' }
};

// Function to calculate warranty status based on purchase date
const calculateDynamicWarrantyStatus = (purchaseDateStr) => {
    if (!purchaseDateStr || purchaseDateStr === 'Date inconnue') {
        return 'unknown'; // Cannot determine without a purchase date
    }

    // Convert "dd/mm/yyyy" to Date object
    const parts = purchaseDateStr.split('/');
    if (parts.length !== 3) return 'unknown'; // Invalid date format
    const purchaseDate = new Date(parts[2], parts[1] - 1, parts[0]); // year, month (0-indexed), day

    if (isNaN(purchaseDate.getTime())) return 'unknown'; // Invalid date

    const fiveYearsFromPurchase = new Date(purchaseDate);
    fiveYearsFromPurchase.setFullYear(purchaseDate.getFullYear() + 5);

    const now = new Date();

    if (now < fiveYearsFromPurchase) {
        return 'under warranty';
    } else {
        return 'expired'; // Or 'out of warranty' if you prefer that specific DB string
    }
};


const ProductWarrantyDetailPage = () => {
  const { productId } = useParams(); // This ID should be customer_product.id
  const navigate = useNavigate();
  const [productDetails, setProductDetails] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    let isMounted = true;

    const fetchProductDetails = async () => {
      if (!isMounted) return;
      setIsLoading(true);
      setError(null);

      const { data: { user }, error: authError } = await supabase.auth.getUser();
      if (!isMounted) return;

      if (authError || !user) {
        setError("Authentification requise.");
        setIsLoading(false);
        return;
      }

      try {
        console.log(`Fetching details for customer_product ID: ${productId} by user ${user.id}`);
        const { data, error: fetchError } = await supabase
          .from('customer_product')
          .select(`
            id,
            serie_number,
            produc_name,
            "Purchase Date",
            "Warranty Expiration", 
            status_warranty,
            produt_id, 
            products ( 
              product_name,
              type,
              seris_number 
            )
          `)
          .eq('id', productId)
          .eq('customer_id', user.id) // Ensure user owns this product entry
          .single();

        if (!isMounted) return;

        if (fetchError) {
          console.error("Error fetching product/warranty details:", fetchError);
          setError(fetchError.code === 'PGRST116' ? `Produit ou garantie N°${productId} non trouvé ou accès non autorisé.` : `Erreur: ${fetchError.message}`);
          setProductDetails(null);
        } else if (data) {
          console.log("Fetched product/warranty details:", data);

          // Original purchase date for calculation
          const purchaseDateForCalc = data["Purchase Date"] ? new Date(data["Purchase Date"]).toLocaleDateString('fr-FR', { year: 'numeric', month: '2-digit', day: '2-digit' }) : 'Date inconnue';
          
          // Calculate dynamic status
          const dynamicStatusKey = calculateDynamicWarrantyStatus(purchaseDateForCalc);
          
          // Determine which status to use: the one from DB or the calculated one
          // For now, let's prioritize the dynamic one if it's different and relevant,
          // or you can choose to always show the DB one and calculated one side-by-side.
          // This example uses the dynamic status for display text/class.
          const displayStatusKey = dynamicStatusKey; // Or: data.status_warranty?.toLowerCase() || 'unknown';
          const statusInfo = WARRANTY_STATUS_MAPPING[displayStatusKey] || WARRANTY_STATUS_MAPPING['unknown'];


          // Calculate warranty end date (5 years from purchase)
          let calculatedWarrantyEndDate = 'N/A';
          if (data["Purchase Date"]) {
            const pDate = new Date(data["Purchase Date"]);
            if (!isNaN(pDate.getTime())) {
                const endDate = new Date(pDate);
                endDate.setFullYear(pDate.getFullYear() + 5);
                calculatedWarrantyEndDate = endDate.toLocaleDateString('fr-FR');
            }
          }


          setProductDetails({
            id: data.id,
            userGivenName: data.produc_name || 'N/A',
            serialNumber: data.serie_number || 'N/A',
            purchaseDate: data["Purchase Date"] ? new Date(data["Purchase Date"]).toLocaleDateString('fr-FR') : 'Inconnue',
            // dbWarrantyExpiration: data["Warranty Expiration"] ? new Date(data["Warranty Expiration"]).toLocaleDateString('fr-FR') : 'N/A',
            dbStatusWarranty: data.status_warranty, // Original DB status
            
            // Product Catalog Info
            catalogProductName: data.products?.product_name || 'Information Produit Indisponible',
            productType: data.products?.type || 'N/A',
            catalogSeriesNumber: data.products?.seris_number || 'N/A', // if exists

            // Calculated & Display Values
            calculatedWarrantyEndDate: calculatedWarrantyEndDate,
            displayStatusLabel: statusInfo.label,
            displayStatusClass: statusInfo.cssClass,
            dynamicStatusKey: dynamicStatusKey, // Store the calculated status key
          });
        } else {
          setError(`Produit ou garantie N°${productId} non trouvé.`);
          setProductDetails(null);
        }
      } catch (e) {
        if (isMounted) {
          console.error("Unexpected error fetching product/warranty details:", e);
          setError("Une erreur inattendue est survenue.");
        }
      } finally {
        if (isMounted) setIsLoading(false);
      }
    };

    if (productId) {
      fetchProductDetails();
    } else {
      setError("ID de produit non spécifié.");
      setIsLoading(false);
    }

    return () => { isMounted = false; };
  }, [productId]);

  if (isLoading) {
    return (
      <div className="problem-detail-page-loading"> {/* Reuse ProblemDetailPage loading style */}
        <h2>Vérification des Accès...</h2>
        <p>Veuillez patienter.</p>
        <div className="loading-spinner-detail"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="product-warranty-detail-page fade-in-up">
        <div className="page-header"><h1>Erreur</h1></div>
        <div className="custom-card error-card">
          <p className="text-danger">{error}</p>
          <Link to="/customer/warranty-products" className="btn btn-secondary" style={{ marginTop: '20px' }}>
            <FiArrowLeft style={{ marginRight: '8px' }} /> Retour aux Garanties
          </Link>
        </div>
      </div>
    );
  }

  if (!productDetails) {
    return (
      <div className="product-warranty-detail-page fade-in-up">
        <div className="page-header"><h1>Détails Non Disponibles</h1></div>
        <div className="custom-card info-card">
          <p>Impossible de charger les détails pour ce produit/garantie.</p>
          <Link to="/customer/warranty-products" className="btn btn-secondary" style={{ marginTop: '20px' }}>
            <FiArrowLeft style={{ marginRight: '8px' }} /> Retour aux Garanties
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="product-warranty-detail-page fade-in-up">
      <div className="page-header">
        <h1>Détails du Produit et Garantie</h1>
        <button onClick={() => navigate(-1)} className="btn btn-secondary btn-sm btn-icon page-header-action-btn">
          <FiArrowLeft /> Retour
        </button>
      </div>

      <div className="product-warranty-detail-container">
        <div className="custom-card detail-section-card">
          <h2 className="detail-section-title"><FiInfo /> Informations sur le Produit</h2>
          <div className="detail-grid">
            <div><strong>Nom (donné par l'utilisateur) :</strong> {productDetails.userGivenName}</div>
            <div><strong>Modèle (catalogue) :</strong> {productDetails.catalogProductName}</div>
            <div><strong>Type :</strong> {productDetails.productType}</div>
            <div><strong>Numéro de Série (enregistré) :</strong> {productDetails.serialNumber}</div>
            {productDetails.catalogSeriesNumber !== 'N/A' && productDetails.catalogSeriesNumber !== productDetails.serialNumber &&
              <div><strong>Numéro de Série (catalogue) :</strong> {productDetails.catalogSeriesNumber}</div>
            }
          </div>
        </div>

        <div className="custom-card detail-section-card">
          <h2 className="detail-section-title"><FiCalendar /> Informations d'Achat et Garantie</h2>
          <div className="detail-grid">
            <div><strong>Date d'Achat :</strong> {productDetails.purchaseDate}</div>
            <div>
                <strong>Statut de Garantie (calculé) :</strong>
                <span className={`warranty-status-badge status-${productDetails.displayStatusClass}`} style={{marginLeft: '10px'}}>
                    {productDetails.displayStatusLabel}
                </span>
            </div>
            <div><strong>Fin de Garantie Standard (5 ans) :</strong> {productDetails.calculatedWarrantyEndDate}</div>
            {/* <div><strong>Statut Garantie (Base de données) :</strong> {productDetails.dbStatusWarranty || 'N/A'}</div> */}
            {/* {productDetails.dbWarrantyExpiration !== 'N/A' &&
              <div><strong>Expiration Garantie (Base de données) :</strong> {productDetails.dbWarrantyExpiration}</div>
            } */}
          </div>
          {/* Add a note if calculated status differs from DB, or if it's an extended warranty */}
          {productDetails.dbStatusWarranty?.toLowerCase() === 'extended warranty (purchased)' && (
            <p className="warranty-note text-accent">
              <FiShield /> Ce produit bénéficie d'une garantie prolongée achetée.
            </p>
          )}
           {productDetails.dynamicStatusKey !== productDetails.dbStatusWarranty?.toLowerCase() && productDetails.dbStatusWarranty && productDetails.dbStatusWarranty.toLowerCase() !== 'extended warranty (purchased)' && (
             <p className="warranty-note text-secondary">
                Note: Le statut de garantie en base de données ({productDetails.dbStatusWarranty}) peut différer du statut calculé basé sur la date d'achat.
             </p>
           )}
        </div>

        <div className="custom-card detail-section-card product-actions-detail">
            <h2 className="detail-section-title">Actions</h2>
            <Link 
                to={`/customer/my-problems?productSerial=${productDetails.serialNumber}`} 
                className="btn btn-primary btn-icon"
            >
                <FiAlertTriangle /> Voir les problèmes pour ce produit
            </Link>
            {/* Add more actions if needed, e.g., request extension, download manual */}
        </div>

        {/* You can add more sections for specifications, documents, etc. */}
      </div>
    </div>
  );
};

export default ProductWarrantyDetailPage;