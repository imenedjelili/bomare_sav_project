// src/pages/auth/SetPasswordPage.js
import React, { useState, useEffect } from 'react';
import { Link, useNavigate, useLocation, useSearchParams } from 'react-router-dom';
import { FiEye, FiEyeOff } from 'react-icons/fi';
import { FaArrowLeft } from 'react-icons/fa';
import './AuthPages.css';
import companyLogo from '../../assets/images/bomare-logo.png';
import { supabase } from '../../supabaseClient';

const RECOVERY_IN_PROGRESS_KEY = 'supabase_recovery_in_progress';
const RECOVERY_EMAIL_KEY = 'supabase_recovery_email';

const SetPasswordPage = () => {
    const navigate = useNavigate();
    const location = useLocation();
    const [searchParams] = useSearchParams(); // setSearchParams removed as navigation clears params
    const tokenFromUrl = searchParams.get('token');
    const typeFromUrl = searchParams.get('type');
    const emailFromUrl = searchParams.get('email');

    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [showConfirmPassword, setShowConfirmPassword] = useState(false);
    const [error, setError] = useState('');
    const [successMessage, setSuccessMessage] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [isLoadingVerification, setIsLoadingVerification] = useState(true);
    const [userEmailDisplay, setUserEmailDisplay] = useState(location.state?.email || localStorage.getItem(RECOVERY_EMAIL_KEY) || '');

    // Function to clean up recovery state
    const cleanupRecoveryState = () => {
        localStorage.removeItem(RECOVERY_IN_PROGRESS_KEY);
        localStorage.removeItem(RECOVERY_EMAIL_KEY);
    };

    useEffect(() => {
        let isMounted = true;

        const handleVerificationAndSessionCheck = async () => {
            setIsLoadingVerification(true);

            if (tokenFromUrl && typeFromUrl === 'recovery' && emailFromUrl) {
                console.log(`SetPasswordPage: Found recovery token for email '${emailFromUrl}'. Attempting verification.`);
                try {
                    const { data, error: verifyError } = await supabase.auth.verifyOtp({
                        email: emailFromUrl,
                        token: tokenFromUrl,
                        type: typeFromUrl, // Should be 'recovery'
                    });

                    if (!isMounted) return;

                    if (verifyError) {
                        console.error("SetPasswordPage: Supabase verifyOtp Error:", verifyError);
                        setError(`Échec de la vérification : Le lien est invalide ou a expiré.`);
                        cleanupRecoveryState();
                        // Navigate to clear URL params even on error, passing a flag
                        navigate(location.pathname, { replace: true, state: { verificationFailed: true } }); 
                    } else if (data.session) {
                        console.log("SetPasswordPage: verifyOtp successful, recovery session established for user:", data.user?.id);
                        localStorage.setItem(RECOVERY_IN_PROGRESS_KEY, 'true');
                        localStorage.setItem(RECOVERY_EMAIL_KEY, emailFromUrl);
                        setUserEmailDisplay(emailFromUrl);
                        // Clear sensitive URL parameters *immediately*
                        navigate(location.pathname, { replace: true, state: { email: emailFromUrl } });
                        // Proceed to show form
                    } else {
                        // This case (successful verifyOtp but no session for 'recovery' type) is less common but possible.
                        console.warn("SetPasswordPage: verifyOtp successful but no session. Data:", data);
                        setError(`Vérification réussie, mais impossible de finaliser la connexion. Veuillez réessayer.`);
                        cleanupRecoveryState();
                        navigate(location.pathname, { replace: true, state: { verificationFailed: true } });
                    }
                } catch (err) {
                    if (!isMounted) return;
                    console.error("SetPasswordPage: Unexpected error during verifyOtp:", err);
                    setError(`Une erreur inattendue est survenue lors de la vérification.`);
                    cleanupRecoveryState();
                    navigate(location.pathname, { replace: true, state: { verificationFailed: true } });
                }
            } else if (localStorage.getItem(RECOVERY_IN_PROGRESS_KEY) === 'true') {
                 // Recovery is in progress (token likely used, or page refreshed after token use)
                 const storedEmail = localStorage.getItem(RECOVERY_EMAIL_KEY);
                 console.log("SetPasswordPage: Recovery in progress (token used or page refreshed). Email:", storedEmail);
                 setUserEmailDisplay(storedEmail || 'votre compte');
                 // Let the form render for password input
            } else {
                // No token, no type, or not 'recovery', and no recovery flag in localStorage.
                // This means the user shouldn't be here.
                console.warn("SetPasswordPage: No token/type or not in recovery mode. Redirecting to login.");
                cleanupRecoveryState(); // Ensure flags are clear
                navigate('/login', { replace: true, state: { message: 'Processus de réinitialisation non valide. Veuillez réessayer.' } });
                return; // Stop further execution of this effect
            }

            if (isMounted) setIsLoadingVerification(false);
        };

        handleVerificationAndSessionCheck();
        return () => { isMounted = false; };
        // Rerun if token/type/email appear in URL, or if path changes (e.g., due to internal navigation)
    }, [tokenFromUrl, typeFromUrl, emailFromUrl, navigate, location.pathname]);


    const handleSetPasswordSubmit = async (e) => {
        e.preventDefault();
        setError('');
        setSuccessMessage('');

        if (password !== confirmPassword) {
            setError('Les mots de passe ne correspondent pas.');
            return;
        }
        if (password.length < 6) {
            setError('Le mot de passe doit comporter au moins 6 caractères.');
            return;
        }

        setIsSubmitting(true);
        try {
            // At this point, a recovery session should be active (from verifyOtp or Supabase auto-handling of link)
            const { data, error: updateError } = await supabase.auth.updateUser({ password: password });

            if (updateError) {
                console.error("SetPasswordPage: Supabase Update User Error:", updateError);
                let userMessage = `Erreur lors de la définition du mot de passe : ${updateError.message || 'Veuillez réessayer.'}`;
                // Check for session-related errors specifically
                if (updateError.message.includes('AuthSessionMissingError') || 
                    updateError.message.includes('Invalid Session') || 
                    updateError.message.includes('requires a valid JWT') ||
                    updateError.status === 401) { // Unauthorized often means session issue
                    userMessage = 'Votre session de réinitialisation a expiré ou est invalide. Veuillez recommencer le processus de mot de passe oublié.';
                    cleanupRecoveryState(); // Critical: clear state as recovery failed due to session issue
                     // Optionally, redirect to login after a delay or force user to click
                }
                setError(userMessage);
            } else {
                console.log("Password updated successfully for user:", data.user?.id);
                setSuccessMessage('Mot de passe défini avec succès ! Redirection vers la page de connexion...');
                
                // IMPORTANT: Sign out to terminate the recovery session.
                try {
                    await supabase.auth.signOut();
                    console.log("User signed out after password update.");
                } catch (signOutError) {
                    console.error("Error signing out after password update:", signOutError);
                    // Continue with cleanup and redirect even if sign-out fails, but log it.
                }
                cleanupRecoveryState(); // Clean up localStorage flags

                setTimeout(() => {
                    // Pass email to login page so it can be pre-filled
                    navigate('/login', { replace: true, state: { message: 'Vous pouvez maintenant vous connecter avec votre nouveau mot de passe.', email: userEmailDisplay } });
                }, 2500);
            }
        } catch (err) {
            console.error("SetPasswordPage: Unexpected Error during password update:", err);
            setError('Une erreur inattendue est survenue. Veuillez réessayer.');
            // Consider if cleanupRecoveryState() is needed here too for safety
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleBackToLogin = async () => {
        // User is abandoning the password set process.
        cleanupRecoveryState(); // Clean up any recovery flags.
        try {
            // Attempt to sign out if there's an active (recovery) session.
            const { data: { session } } = await supabase.auth.getSession();
            if (session) {
                 console.log("SetPasswordPage: Signing out user abandoning password reset.");
                 await supabase.auth.signOut();
            }
        } catch (error) {
            console.error("SetPasswordPage: Error signing out on back to login:", error);
        }
        navigate('/login'); // Navigate to login page
    };
    

    if (isLoadingVerification) {
        return (
             <div className="auth-page-container">
                  <div className="auth-card-two-panel">
                      <div className="auth-form-panel" style={{ textAlign: 'center' }}>
                          <div className="auth-logo-container">
                              <img src={companyLogo} alt="BOMARE COMPANY" className="auth-logo" />
                          </div>
                          <h1 className="auth-title">Vérification...</h1>
                           <p className="auth-subtitle">Vérification de votre lien de réinitialisation.</p>
                            <div className="loading-spinner" style={{marginTop: '20px'}}></div>
                       </div>
                       <div className="auth-image-panel">
                          {/* Ensure image path is correct if it's in public folder or imported */}
                          <img src="/assets/images/set_pass_pic.jpeg" alt="Illustration Définition Mot de Passe" className="auth-page-image" />
                       </div>
                   </div>
              </div>
        );
    }

     // If there's a general error (often from verification step) and no success message yet
     if (error && !successMessage && location.state?.verificationFailed) { 
         return (
              <div className="auth-page-container">
                   <div className="auth-card-two-panel">
                       <div className="auth-form-panel" style={{ textAlign: 'center' }}>
                           <div className="auth-logo-container">
                               <img src={companyLogo} alt="BOMARE COMPANY" className="auth-logo" />
                           </div>
                           
                            <button onClick={handleBackToLogin} className="auth-back-link" style={{ background: 'none', border: 'none', padding: '0', cursor: 'pointer', display: 'flex', alignItems: 'center', color: 'var(--text-color-secondary)', marginBottom: '15px' }}>
                                <FaArrowLeft style={{ marginRight: '8px' }} /> Retour à la connexion
                            </button>

                            <h1 className="auth-title">Échec de la Réinitialisation</h1>
                           <p className="auth-subtitle" style={{color: 'var(--status-error-text)'}}>
                                {error} {/* This error is from the verification step */}
                           </p>
                           
                            <button onClick={handleBackToLogin} className="btn btn-primary auth-submit-btn" style={{marginTop: '20px'}}>
                               Recommencer le processus
                            </button>
                        </div>
                        <div className="auth-image-panel">
                           <img src="/assets/images/set_pass_pic.jpeg" alt="Illustration Définition Mot de Passe" className="auth-page-image" />
                        </div>
                    </div>
                 </div>
         );
     }


    if (successMessage) { // Show success message screen after password successfully set
        return (
             <div className="auth-page-container">
                  <div className="auth-card-two-panel">
                      <div className="auth-form-panel" style={{ textAlign: 'center' }}>
                          <div className="auth-logo-container">
                              <img src={companyLogo} alt="BOMARE COMPANY" className="auth-logo" />
                          </div>
                           <h1 className="auth-title">Succès !</h1>
                          <p className="auth-subtitle" style={{color: 'var(--status-success-text)'}}>
                               {successMessage}
                          </p>
                          {/* Optionally, a direct link to login if automatic redirect is too slow or fails */}
                           <Link to="/login" className="btn btn-primary auth-submit-btn" style={{marginTop: '20px'}}>
                               Aller à la Connexion
                           </Link>
                       </div>
                       <div className="auth-image-panel">
                          <img src="/assets/images/set_pass_pic.jpeg" alt="Illustration Définition Mot de Passe" className="auth-page-image" />
                       </div>
                   </div>
              </div>
        );
    }

    // Main form to set password (when verification passed, no overriding error/success message from submit)
    return (
        <div className="auth-page-container">
            <div className="auth-card-two-panel">
                <div className="auth-form-panel">
                    <div className="auth-logo-container">
                        <img src={companyLogo} alt="BOMARE COMPANY" className="auth-logo" />
                    </div>
                    {/* Back to login button - uses handleBackToLogin to ensure cleanup */}
                    <button onClick={handleBackToLogin} className="auth-back-link" style={{ background: 'none', border: 'none', padding: '0', cursor: 'pointer', display: 'flex', alignItems: 'center', color: 'var(--text-color-secondary)', marginBottom: '15px' }}>
                        <FaArrowLeft style={{ marginRight: '8px' }} /> Retour à la connexion
                    </button>

                    <h1 className="auth-title">Définir un Nouveau Mot de Passe</h1>
                    <p className="auth-subtitle">
                        {userEmailDisplay ?
                            `Créez un nouveau mot de passe sécurisé pour ${userEmailDisplay}.` :
                            "Veuillez créer un nouveau mot de passe sécurisé."
                        }
                    </p>

                    {/* This error is for form validation (e.g., passwords don't match) or password update failure */}
                    {error && <div className="auth-message error">{error}</div>} 
                    
                    <form onSubmit={handleSetPasswordSubmit} className="auth-form">
                        <div className="auth-form-group">
                            <label className="auth-label" htmlFor="new-password">Nouveau mot de passe</label>
                            <div className="auth-input-wrapper">
                                <input
                                    type={showPassword ? "text" : "password"}
                                    id="new-password"
                                    className="auth-input-field"
                                    placeholder="Créer un mot de passe (min. 6 caractères)"
                                    value={password}
                                    onChange={(e) => setPassword(e.target.value)}
                                    required
                                    disabled={isSubmitting}
                                />
                                <button
                                    type="button"
                                    className="auth-password-toggle"
                                    onClick={() => setShowPassword(!showPassword)}
                                    aria-label="Afficher/Cacher mot de passe"
                                    disabled={isSubmitting}
                                >
                                    {showPassword ? <FiEyeOff /> : <FiEye />}
                                </button>
                            </div>
                        </div>

                        <div className="auth-form-group">
                            <label className="auth-label" htmlFor="confirm-new-password">Confirmer le mot de passe</label>
                            <div className="auth-input-wrapper">
                                <input
                                    type={showConfirmPassword ? "text" : "password"}
                                    id="confirm-new-password"
                                    className="auth-input-field"
                                    placeholder="Retapez le nouveau mot de passe"
                                    value={confirmPassword}
                                    onChange={(e) => setConfirmPassword(e.target.value)}
                                    required
                                    disabled={isSubmitting}
                                />
                                <button
                                    type="button"
                                    className="auth-password-toggle"
                                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                                    aria-label="Afficher/Cacher mot de passe"
                                    disabled={isSubmitting}
                                >
                                    {showConfirmPassword ? <FiEyeOff /> : <FiEye />}
                                </button>
                            </div>
                        </div>

                        <button type="submit" className="btn btn-primary auth-submit-btn" disabled={isSubmitting || !password || password !== confirmPassword || password.length < 6 }>
                            {isSubmitting ? "Enregistrement..." : "Définir le Nouveau Mot de Passe"}
                        </button>
                    </form>
                </div>
                <div className="auth-image-panel">
                     <img src="/assets/images/set_pass_pic.jpeg" alt="Illustration Définition Mot de Passe" className="auth-page-image" />
                </div>
            </div>
        </div>
    );
};

export default SetPasswordPage;