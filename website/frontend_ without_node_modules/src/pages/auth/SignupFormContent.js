// src/pages/auth/SignupFormContent.js
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { FiEye, FiEyeOff } from 'react-icons/fi';
// Import social icons if you use them in the signup form too
// import { FaFacebookF, FaGoogle, FaApple } from 'react-icons/fa';
import { supabase } from '../../supabaseClient';
import './AuthPages.css';

const SignupFormContent = ({ onToggleView }) => {
    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');
    const [email, setEmail] = useState('');
    const [phone, setPhone] = useState('');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [selectedRole, setSelectedRole] = useState("customer");
    const [agreeTerms, setAgreeTerms] = useState(false);
    const [showPassword, setShowPassword] = useState(false);
    const [showConfirmPassword, setShowConfirmPassword] = useState(false);
    const [error, setError] = useState('');
    const [success, setSuccess] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');
        setSuccess('');

        if (password !== confirmPassword) {
            setError("Les mots de passe ne correspondent pas.");
            return;
        }
        if (password.length < 6) { // Basic client-side check
            setError("Le mot de passe doit comporter au moins 6 caractères.");
            return;
        }
        if (!agreeTerms) {
            setError("Vous devez accepter les termes et la politique de confidentialité.");
            return;
        }

        setIsSubmitting(true);
        console.log('Signup attempt for email:', email, 'Role:', selectedRole);

        try {
            // --- ONLY call signUp ---
            const { data, error: signUpError } = await supabase.auth.signUp({
                email: email,
                password: password,
                // Do NOT pass profile data here unless configured in Supabase Auth
                // Instead, rely on a database trigger or client-side logic AFTER email confirmation
                 options: {
                     // If you need name/role available immediately AFTER signup (even before email confirm)
                     // AND have a trigger using new.raw_user_meta_data:
                     // data: { first_name: firstName, last_name: lastName, role: selectedRole }
                     // But using a trigger on auth.users AFTER INSERT that reads from public.Users (created after confirm) is more standard.
                     // Let's assume the trigger reads from public.Users after confirmation or you handle it post-confirmation.
                 }
            });

            if (signUpError) {
                console.error("Supabase Sign Up Error:", signUpError);
                if (signUpError.message.includes('already registered')) {
                    // Specific message for existing users
                    setError('Cet e-mail est déjà associé à un compte. Veuillez vous connecter.');
                } else {
                     // Generic error for other signup failures
                    setError(`Erreur lors de la création du compte: ${signUpError.message}`);
                    // Consider a more user-friendly message for production
                    // setError('Erreur lors de la création du compte. Veuillez réessayer.');
                }

            } else if (data.user || data.session === null) {
                 // Sign up was successful.
                 // Case 1: Email confirmation is ON (`data.session` is null, `data.user` might be null or partial)
                 // User needs to verify email. The trigger (if used correctly) runs AFTER verification.
                 // Case 2: Email confirmation is OFF (`data.session` exists, `data.user` exists)
                 // User is signed in immediately. The trigger (if used) runs immediately.

                 // In BOTH cases, the client-side profile creation is now handled by the backend trigger
                 // (or should be handled by separate post-confirmation logic).

                console.log("Supabase Auth Sign Up successful or verification pending.");

                if (data.session === null) {
                    // Email confirmation is on
                    setSuccess('Inscription réussie ! Un lien de vérification a été envoyé à votre adresse e-mail. Veuillez vérifier votre boîte de réception.');
                    // Clear form and stay on this page to show success message
                     setEmail('');
                     setPassword('');
                     setConfirmPassword('');
                     setFirstName('');
                     setLastName('');
                     setPhone('');
                     setSelectedRole('customer');
                     setAgreeTerms(false);

                } else {
                    // Email confirmation is off (or user already verified via link)
                    // User is now signed in. Rely on trigger for profile.
                    setSuccess('Inscription réussie ! Vous êtes maintenant connecté.');

                    // Determine redirect path based on the role selected in the form (since user is already signed in)
                    // Note: In a production app, you might fetch the *actual* role from the DB here
                    // to be certain, especially if the trigger might modify the initial role based on other factors.
                    let redirectPath = '/';
                    if (selectedRole === 'customer') redirectPath = '/customer/dashboard';
                    else if (selectedRole === 'technician') redirectPath = '/technician/dashboard';
                    else if (selectedRole === 'admin') redirectPath = '/admin/dashboard';
                     else {
                         console.warn("Signup successful but selected role is unknown, redirecting to login:", selectedRole);
                         redirectPath = '/login'; // Fallback if selected role is unexpected
                     }


                    // Redirect after a short delay to show the success message
                    setTimeout(() => {
                         navigate(redirectPath, { replace: true });
                    }, 1500); // Redirect after 1.5 seconds

                }

            } else {
                 // Unexpected state from Supabase Auth - no error, no user/session?
                 // Should not happen with standard signup, but good fallback.
                 console.warn("Supabase Sign Up returned unexpected data:", data);
                 setError('Erreur inconnue lors de la création du compte.');
             }

        } catch (err) { // Catch any unexpected JS/Network errors
            console.error("Unexpected Sign Up Error:", err);
            setError('Une erreur inattendue s\'est produite. Veuillez réessayer.');
        } finally {
            setIsSubmitting(false); // Always reset submitting state
        }
    };

    // Optional: Handler for social login buttons if they are also on signup form
    // const handleSocialLogin = async (provider) => { ... (same as in LoginFormContent) ... };


    return (
        <>
            {/* ... rest of your JSX (logo, title, subtitle) ... */}

            <h1 className="auth-title">Créer un Compte</h1>
            <p className="auth-subtitle">Rejoignez le portail SAV BOMARE.</p>

            {/* Display Messages */}
            {error && <div className="auth-message error">{error}</div>}
            {success && <div className="auth-message success">{success}</div>}


            {/* Conditionally hide the form if a successful message is displayed */}
            {/* This allows the user to see the "email sent" or "signed in" message */}
            {!success && (
                 <form onSubmit={handleSubmit} className="auth-form">
                    {/* First and Last Name Row */}
                    <div className="auth-form-row">
                        <div className="auth-form-group">
                            <label htmlFor="firstName" className="auth-label">Prénom</label>
                            <input type="text" id="firstName" className="auth-input-field" placeholder="Ex: Mohammed" value={firstName} onChange={e => setFirstName(e.target.value)} required disabled={isSubmitting} />
                        </div>
                        <div className="auth-form-group">
                            <label htmlFor="lastName" className="auth-label">Nom</label>
                            <input type="text" id="lastName" className="auth-input-field" placeholder="Ex: Amine" value={lastName} onChange={e => setLastName(e.target.value)} required disabled={isSubmitting} />
                        </div>
                    </div>

                    {/* Email Input */}
                    <div className="auth-form-group">
                        <label htmlFor="signup-email" className="auth-label">Adresse E-mail</label>
                        <input type="email" id="signup-email" className="auth-input-field" placeholder="nom@example.com" value={email} onChange={e => setEmail(e.target.value)} required disabled={isSubmitting} />
                    </div>

                    {/* Phone Input */}
                    <div className="auth-form-group">
                        <label htmlFor="phone" className="auth-label">Numéro de Téléphone (Optionnel)</label>
                        <input type="tel" id="phone" className="auth-input-field" placeholder="+213 XX XXX XX XX" value={phone} onChange={e => setPhone(e.target.value)} disabled={isSubmitting} />
                    </div>

                    {/* Role Selection */}
                    <div className="auth-form-group">
                        <label htmlFor="role-select-signup" className="auth-label">Je suis un</label>
                        <select
                            id="role-select-signup"
                            className="auth-select-field"
                            value={selectedRole}
                            onChange={(e) => setSelectedRole(e.target.value)}
                            disabled={isSubmitting}
                        >
                            <option value="customer">Client</option>
                            <option value="technician">Technicien</option>
                            {/* Add other public signup roles here */}
                        </select>
                    </div>

                    {/* Password Row */}
                    <div className="auth-form-row">
                        {/* Password Input */}
                        <div className="auth-form-group">
                            <label htmlFor="signup-password" className="auth-label">Mot de passe</label>
                            <div className="auth-input-wrapper">
                                <input type={showPassword ? "text" : "password"} id="signup-password" className="auth-input-field" placeholder="Min. 6 caractères" value={password} onChange={e => setPassword(e.target.value)} required disabled={isSubmitting} />
                                <button type="button" className="auth-password-toggle" onClick={() => setShowPassword(!showPassword)} aria-label="Afficher/Cacher mot de passe" disabled={isSubmitting}>
                                    {showPassword ? <FiEyeOff /> : <FiEye />}
                                </button>
                            </div>
                        </div>
                        {/* Confirm Password Input */}
                        <div className="auth-form-group">
                            <label htmlFor="signup-confirmPassword" className="auth-label">Confirmer Mot de passe</label>
                            <div className="auth-input-wrapper">
                                <input type={showConfirmPassword ? "text" : "password"} id="signup-confirmPassword" className="auth-input-field" placeholder="Retapez le mot de passe" value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)} required disabled={isSubmitting} />
                                <button type="button" className="auth-password-toggle" onClick={() => setShowConfirmPassword(!showConfirmPassword)} aria-label="Afficher/Cacher mot de passe" disabled={isSubmitting}>
                                    {showConfirmPassword ? <FiEyeOff /> : <FiEye />}
                                </button>
                            </div>
                        </div>
                    </div>

                    {/* Terms Checkbox */}
                    <div className="auth-checkbox-container" style={{ justifyContent: 'flex-start' }}>
                        <label htmlFor="agreeTerms" className="auth-checkbox-label">
                            <input
                                type="checkbox"
                                id="agreeTerms"
                                checked={agreeTerms}
                                onChange={(e) => setAgreeTerms(e.target.checked)}
                                disabled={isSubmitting}
                            />
                            <span>J'accepte les <Link to="/terms" target="_blank" className='auth-link'>Termes</Link> et la <Link to="/privacy" target="_blank" className='auth-link'>Politique de Confidentialité</Link>.</span>
                        </label>
                    </div>

                    {/* Submit Button */}
                    <button type="submit" className="btn btn-primary auth-submit-btn" disabled={isSubmitting || !password || password !== confirmPassword || !agreeTerms}>
                        {isSubmitting ? "Création en cours..." : "Créer un compte"}
                    </button>
                </form>
            )}


            {/* Login Link - Triggers view toggle */}
            <div className="auth-secondary-link-text">
                Déjà un compte ?{' '}
                {/* Disable button if submitting the form */}
                <button type="button" className="auth-link as-button" onClick={onToggleView} disabled={isSubmitting}>
                    Se connecter
                </button>
            </div>

            {/* Optional Social Login Buttons - Uncomment if needed */}
            {/* <div className="auth-divider"><span>Ou s'inscrire avec</span></div>
            <div className="auth-social-login-group">
                 <button type="button" className="auth-social-btn" aria-label="Signup with Google" onClick={() => handleSocialLogin('google')} disabled={isSubmitting}><FaGoogle /></button>
                 <button type="button" className="auth-social-btn" aria-label="Signup with Facebook" onClick={() => handleSocialLogin('facebook')} disabled={isSubmitting}><FaFacebookF /></button>
                 <button type="button" className="auth-social-btn" aria-label="Signup with Apple" onClick={() => handleSocialLogin('apple')} disabled={isSubmitting}><FaApple /></button>
            </div> */}
        </>
    );
};

export default SignupFormContent;