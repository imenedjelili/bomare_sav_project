// src/pages/auth/AuthSwitcherPage.js
import React, { useState, useEffect, useRef } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import LoginFormContent from './LoginFormContent';
import SignupFormContent from './SignupFormContent';
import './AuthSwitcherPage.css';
import './AuthPages.css';
import companyLogo from '../../assets/images/bomare-logo.png';

// Reusable Logo Component - Add animation state class
const LogoDisplay = ({ isActive, position, animationState }) => (
    // Apply 'waking' class based on parent state
    <div className={`logo-container ${position} ${isActive ? 'active' : ''} ${animationState === 'waking' ? 'waking' : ''}`}>
        <img
            src={companyLogo}
            alt="BOMARE COMPANY Logo"
            className="auth-page-image bomare-logo-display"
        />
    </div>
);

const AuthSwitcherPage = () => {
    const location = useLocation();
    const navigate = useNavigate();
    const [isLoginView, setIsLoginView] = useState(location.pathname.includes('/login'));
    // More detailed animation states
    const [animationState, setAnimationState] = useState('idle'); // idle, waking, detaching, flowing, landing, reforming
    const [animationDirection, setAnimationDirection] = useState(''); // 'to-signup' or 'to-login'
    const timeoutRefs = useRef([]); // Store multiple timeout IDs

    // Helper to clear all timeouts
    const clearAllTimeouts = () => {
        timeoutRefs.current.forEach(clearTimeout);
        timeoutRefs.current = [];
    };

    // Sync view state with URL path changes
    useEffect(() => {
        const shouldBeLogin = location.pathname.includes('/login');
        if (shouldBeLogin !== isLoginView && animationState === 'idle') {
            setIsLoginView(shouldBeLogin);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [location.pathname]);

    // Cleanup timeouts on unmount
    useEffect(() => {
        return () => {
            clearAllTimeouts(); // Clear all timeouts when component unmounts
        };
    }, []);

    const handleToggleView = () => {
        if (animationState !== 'idle') return; // Prevent overlapping animations

        const targetIsLogin = !isLoginView;
        const direction = targetIsLogin ? 'to-login' : 'to-signup';
        setAnimationDirection(direction);
        clearAllTimeouts(); // Clear any lingering timeouts

        // --- Animation Sequence Timings (Adjust these to match CSS) ---
        const wakeDuration = 400;       // Duration of logo "wake" animation
        const detachDuration = 300;     // Time for logo fade out / droplet scale in
        const flowDuration = 700;       // Time for droplet to travel
        const landDuration = 300;       // Duration of "splash" animation
        const reformDuration = 300;     // Time for droplet fade out / logo scale in
        const formFadeInDelay = flowDuration + landDuration - 100; // Start form fade slightly before reform finishes
        const formFadeDuration = 400;

        // --- Animation Steps ---
        // 1. Wake Up
        setAnimationState('waking');
        timeoutRefs.current.push(setTimeout(() => {

            // 2. Detach (Logo fades out, Droplet appears & grows)
            setAnimationState('detaching');
            timeoutRefs.current.push(setTimeout(() => {

                // 3. Flowing (Droplet moves, Original Form starts fading *out*)
                setAnimationState('flowing');
                 // Optional: Fade out current form during flow
                // This requires adding fade-out class logic to form wrappers too

                timeoutRefs.current.push(setTimeout(() => {

                    // 4. Landing (Droplet reaches destination, plays splash animation)
                    //    Swap the underlying view state *now*
                    setIsLoginView(targetIsLogin);
                    const newPath = targetIsLogin ? '/login' : '/signup';
                    navigate(newPath, { replace: true });
                    setAnimationState('landing');

                    // 5. Reforming (Droplet fades out, New Logo appears, New Form starts fading *in*)
                    timeoutRefs.current.push(setTimeout(() => {
                        setAnimationState('reforming');

                        // 6. Idle (Reset after all animations complete)
                        timeoutRefs.current.push(setTimeout(() => {
                            setAnimationState('idle');
                            setAnimationDirection('');
                        }, reformDuration + 50)); // Wait for reform + buffer

                    }, landDuration)); // Wait for splash

                }, flowDuration)); // Wait for flow

            }, detachDuration)); // Wait for detach

        }, wakeDuration)); // Wait for wake up
    };

    const bomareColor = '#3090C7';

    // Determine active state for logos/forms based on view AND animation phase
    const showLoginLogo = isLoginView && !['detaching', 'flowing', 'landing', 'reforming'].includes(animationState);
    const showSignupLogo = !isLoginView && !['detaching', 'flowing', 'landing', 'reforming'].includes(animationState);

    const showLoginForm = isLoginView && !['flowing', 'landing'].includes(animationState);
    const showSignupForm = !isLoginView && !['flowing', 'landing'].includes(animationState);

    return (
        <div className="auth-page-container">
            <div className={`auth-switcher-card morph-layout ${animationState !== 'idle' ? 'is-animating' : ''}`}>

                {/* Panels act as layout containers */}
                <div className="panel-container left-panel">
                    {/* Signup View: Logo is here */}
                    <LogoDisplay
                        isActive={showSignupLogo}
                        position="left"
                        animationState={animationState === 'waking' && animationDirection === 'to-login' ? 'waking' : ''}
                    />
                     {/* Login View: Form is here */}
                     <div className={`form-content-wrapper ${showLoginForm ? 'active' : ''}`}>
                        {isLoginView && <LoginFormContent onToggleView={handleToggleView} key="login-form" />}
                     </div>
                </div>

                <div className="panel-container right-panel">
                     {/* Login View: Logo is here */}
                    <LogoDisplay
                        isActive={showLoginLogo}
                        position="right"
                        animationState={animationState === 'waking' && animationDirection === 'to-signup' ? 'waking' : ''}
                     />
                     {/* Signup View: Form is here */}
                     <div className={`form-content-wrapper ${showSignupForm ? 'active' : ''}`}>
                         {!isLoginView && <SignupFormContent onToggleView={handleToggleView} key="signup-form" />}
                     </div>
                </div>

                {/* --- Animated Droplet --- */}
                <div
                    className={`animated-droplet ${animationState} ${animationDirection}`}
                    style={{ backgroundColor: bomareColor }}
                >
                    {/* Optional inner element for more complex effects */}
                    {/* <div className="droplet-highlight"></div> */}
                </div>
            </div>
        </div>
    );
};

export default AuthSwitcherPage;