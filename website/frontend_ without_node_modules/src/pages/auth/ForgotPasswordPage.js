// src/pages/auth/ForgotPasswordPage.js
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { FaArrowLeft } from 'react-icons/fa';
import './AuthPages.css'; // Assuming styles are here
import companyLogo from '../../assets/images/bomare-logo.png'; // Assuming logo is here
import { supabase } from '../../supabaseClient';
import password_pic from '../../assets/images/pswd_pic.jpeg'; 

const ForgotPasswordPage = () => {
    const [email, setEmail] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [message, setMessage] = useState('');
    const [isSuccess, setIsSuccess] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);
        setMessage(''); // Clear previous messages
        setIsSuccess(false); // Reset success state

        if (!email.trim()) {
            setMessage('Veuillez entrer votre adresse e-mail.');
            setIsSubmitting(false);
            return;
        }

        try {
            // Define the URL where Supabase should redirect the user *after* they click the link in the email.
            // This must be a page in your app that can handle setting a new password.
            // Ensure 'YOUR_APP_BASE_URL' is configured in Supabase Auth settings -> URL Configuration -> Site URL or Additional Redirect URLs.
            // window.location.origin gets your app's base URL (e.g., http://localhost:3000, https://your-app.com)
            const redirectUrl = `${window.location.origin}/set-password`;
             console.log("Sending password reset email, redirecting to:", redirectUrl);


            const { error } = await supabase.auth.resetPasswordForEmail(email, {
                 redirectTo: redirectUrl
            });

            if (error) {
                console.error("Supabase Forgot Password Error:", error);
                 // Supabase intentionally doesn't reveal if the email exists for security reasons.
                 // Provide a generic message that applies to both cases (email exists/doesn't exist).
                 // For debugging, you might log the error message in development, but not in production.
                 if (error.message.includes('rate limit exceeded')) {
                      setMessage('Trop de tentatives. Veuillez réessayer plus tard.');
                      setIsSuccess(false); // Indicate error
                 } else {
                      // For other errors like invalid email format *before* sending
                      setMessage(`Une erreur est survenue : ${error.message}`); // Show more detail for dev
                      // For production: setMessage('Erreur lors de l\'envoi des instructions. Veuillez vérifier l\'adresse e-mail.');
                      setIsSuccess(false); // Indicate error
                 }

            } else {
                // If error is null, the request was accepted by Supabase (either email sent or email not found).
                // We show the same success message for security.
                 setMessage(`Si un compte existe pour ${email}, des instructions ont été envoyées à cette adresse.`);
                 setIsSuccess(true); // Indicate success for the user message
                 setEmail(''); // Clear the input field on (apparent) success
            }

        } catch (error) {
            // Catch any unexpected JavaScript/Network errors
            console.error("Forgot Password Unexpected Error:", error);
            setMessage('Une erreur inattendue s\'est produite. Veuillez réessayer.');
            setIsSuccess(false); // Ensure isSuccess is false for actual unexpected errors
        } finally {
            setIsSubmitting(false); // Always reset submitting state
        }
    };

    return (
        <div className="auth-page-container">
            <div className="auth-card-two-panel">
                 {/* Form Panel */}
                <div className="auth-form-panel">
                    <div className="auth-logo-container">
                        <img src={companyLogo} alt="BOMARE COMPANY" className="auth-logo" />
                    </div>
                    {/* Back Link */}
                    {/* Show back link unless we're showing the final success message */}
                    {!isSuccess && (
                         <Link to="/login" className="auth-back-link">
                             <FaArrowLeft /> Retour à la connexion
                         </Link>
                    )}


                    <h1 className="auth-title">Mot de Passe Oublié?</h1>
                    <p className="auth-subtitle">Entrez votre adresse e-mail ci-dessous pour recevoir les instructions de réinitialisation.</p>

                    {/* Message Area */}
                    {message && (
                        // Conditionally apply success or error class
                        <div className={`auth-message ${isSuccess ? 'success' : 'error'}`}>
                            {message}
                        </div>
                    )}

                    {/* Form - Hide form after showing the success message that implies email sent */}
                    { !isSuccess && (
                         <form onSubmit={handleSubmit} className="auth-form">
                            <div className="auth-form-group">
                                <label htmlFor="recover-email" className="auth-label">Adresse E-mail</label>
                                <input
                                    type="email"
                                    id="recover-email"
                                    className="auth-input-field"
                                    placeholder="nom@example.com"
                                    value={email}
                                    onChange={(e) => setEmail(e.target.value)}
                                    required
                                    disabled={isSubmitting} // Disable while submitting
                                />
                            </div>

                            <button
                                type="submit"
                                className="btn btn-primary auth-submit-btn"
                                disabled={isSubmitting} // Disable while submitting
                            >
                                {isSubmitting ? 'Envoi en cours...' : 'Envoyer les Instructions'}
                            </button>
                        </form>
                    )}

                    {/* After showing the success message, you might just show the back-to-login link (already present) */}
                    {/* Or add a specific link if needed, but the back link suffices for navigation. */}

                </div>

                 {/* Image Panel */}
                 <div className="auth-image-panel">
                    <img
                        src={ password_pic }
                        alt="Illustration Réinitialisation Mot de Passe"
                        className="auth-page-image"
                    />
                </div>
            </div>
        </div>
    );
};

export default ForgotPasswordPage;