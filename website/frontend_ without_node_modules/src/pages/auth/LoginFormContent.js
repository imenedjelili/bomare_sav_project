// src/pages/auth/LoginFormContent.js
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { FiEye, FiEyeOff } from 'react-icons/fi';
import { FaFacebookF, FaGoogle, FaApple } from 'react-icons/fa';
import { supabase } from '../../supabaseClient'; // Import supabase client
import './AuthPages.css'; // Assuming styles are here

// Note: Renamed prop 'onSwitchToLogin' to 'onToggleView'
const LoginFormContent = ({ onToggleView }) => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [rememberMe, setRememberMe] = useState(false);
    const [showPassword, setShowPassword] = useState(false);
    const [error, setError] = useState('');
    // Removed success state from here, as signup handles its own success message.
    // Login usually redirects immediately on success, not displaying a success message on the login page.
    const [isSubmitting, setIsSubmitting] = useState(false);
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');
        setIsSubmitting(true);
        console.log('Login attempt for:', email);

        try {
            const { data, error: signInError } = await supabase.auth.signInWithPassword({
                email: email,
                password: password,
            });

            if (signInError) {
                console.error("Supabase Login Error:", signInError);
                if (signInError.message.includes('Invalid login credentials')) {
                    setError('E-mail ou mot de passe invalide.');
                } else {
                    setError(`Échec de la connexion: ${signInError.message}`);
                }
                // Do not set isSubmitting(false) here yet, handle it in finally
            } else if (data.user) {
                console.log("Supabase Auth Login successful for user ID:", data.user.id);

                // Fetch the user's role from the public 'Users' table
                // This assumes you have a public 'Users' table linked to auth.users via 'id'
                const { data: userData, error: userError } = await supabase
                    .from('Users')
                    .select('role')
                    .eq('id', data.user.id)
                    .single();

                if (userError) {
                    console.error("Error fetching user role:", userError);
                    setError('Impossible de récupérer les informations de profil. Veuillez contacter l\'assistance.');
                    // Log out user if profile data is crucial and couldn't be fetched
                    await supabase.auth.signOut();
                } else {
                    const userRole = userData?.role;
                    console.log("Logged in user role:", userRole);

                    // Navigate based on the fetched role
                    let redirectPath = '/'; // Default path if role unknown/not mapped
                    if (userRole === 'customer') navigate('/customer/dashboard', { replace: true });
                    else if (userRole === 'technician') navigate('/technician/dashboard', { replace: true });
                    else if (userRole === 'admin') navigate('/admin/dashboard', { replace: true }); // Assuming admin role exists
                    else {
                        // Handle unknown role - maybe redirect to a 'setup profile' page or logout
                        setError('Rôle utilisateur inconnu. Veuillez contacter l\'assistance.');
                         await supabase.auth.signOut(); // Log out unknown roles
                    }
                    // No need for timeout here, navigation is immediate
                }

            } else {
                // Should not happen in a typical email/password flow if no error occurred,
                // unless there's an unexpected state from Supabase Auth.
                 setError('Connexion échouée. Veuillez vérifier vos identifiants ou confirmer votre e-mail.');
            }

        } catch (err) {
            console.error("Unexpected Login Error:", err);
            setError('Une erreur inattendue s\'est produite. Veuillez réessayer.');
        } finally {
            setIsSubmitting(false); // Always reset submitting state after the attempt
        }
    };

     // --- New function for social login ---
     const handleSocialLogin = async (provider) => {
        setError(''); // Clear any previous errors
        setIsSubmitting(true); // Indicate submission (optional, as redirect is fast)

        try {
            // Initiate the OAuth flow with the specified provider
            // The redirectTo URL is where the social provider redirects the user after authentication.
            // This URL MUST be configured in your Supabase dashboard under
            // "Authentication" -> "URL Configuration" -> "Site URL" and/or "Additional Redirect URLs".
            // A common practice is to redirect back to your app's base URL or a specific callback route.
            const { error } = await supabase.auth.signInWithOAuth({
                provider: provider,
                 options: {
                     redirectTo: window.location.origin // Or your specific callback URL like 'YOUR_APP_BASE_URL/auth/callback'
                 }
            });

            if (error) {
                console.error(`Supabase OAuth Error for ${provider}:`, error);
                setError(`Échec de la connexion avec ${provider}.`);
                setIsSubmitting(false); // Re-enable button if the error happens before redirect
            }
             // Note: If successful, Supabase will redirect the browser, so no more code runs here.
             // The redirect page (e.g., your app's base URL) will need to listen for auth state changes.

        } catch (err) {
            console.error(`Unexpected OAuth Error for ${provider}:`, err);
             setError('Une erreur inattendue est survenue lors de la connexion sociale.');
            setIsSubmitting(false); // Re-enable button on unexpected errors
        }
     };
    // --- End of new function ---


    return (
        <>
            {/* ... rest of your JSX (logo, title, subtitle) ... */}
            <h1 className="auth-title">Connexion</h1>
            <p className="auth-subtitle">Accédez à votre compte SAV BOMARE.</p>

            {error && <div className="auth-message error">{error}</div>}

            <form onSubmit={handleSubmit} className="auth-form">
                {/* ... Email and Password Inputs ... */}
                <div className="auth-form-group">
                    <label className="auth-label" htmlFor="login-email">Adresse E-mail</label>
                    <input
                        type="email"
                        id="login-email"
                        className="auth-input-field"
                        placeholder="nom@example.com"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        required
                        disabled={isSubmitting}
                    />
                </div>

                <div className="auth-form-group">
                    <label className="auth-label" htmlFor="login-password">Mot de passe</label>
                    <div className="auth-input-wrapper">
                        <input
                            type={showPassword ? "text" : "password"}
                            id="login-password"
                            className="auth-input-field"
                            placeholder="Entrez votre mot de passe"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            required
                            disabled={isSubmitting}
                        />
                        <button
                            type="button"
                            className="auth-password-toggle"
                            onClick={() => setShowPassword(!showPassword)}
                            aria-label="Afficher/Cacher mot de passe"
                            disabled={isSubmitting}
                        >
                            {showPassword ? <FiEyeOff /> : <FiEye />}
                        </button>
                    </div>
                </div>

                <div className="auth-checkbox-container">
                    <label htmlFor="rememberLogin" className="auth-checkbox-label">
                        <input
                            type="checkbox"
                            id="rememberLogin"
                            checked={rememberMe}
                            onChange={(e) => setRememberMe(e.target.checked)}
                            disabled={isSubmitting}
                        />
                        Se souvenir de moi
                    </label>
                    <Link to="/forgot-password" className="auth-link">Mot de passe oublié?</Link>
                </div>

                <button type="submit" className="btn btn-primary auth-submit-btn" disabled={isSubmitting}>
                    {isSubmitting ? 'Connexion...' : 'Se Connecter'}
                </button>
            </form>

            <div className="auth-secondary-link-text">
                Pas encore de compte ?{' '}
                <button type="button" className="auth-link as-button" onClick={onToggleView} disabled={isSubmitting}>
                    S'inscrire ici
                </button>
            </div>

            <div className="auth-divider"><span>Ou se connecter avec</span></div>

             {/* Social Login Buttons */}
            <div className="auth-social-login-group">
                 {/* Google Login Button */}
                <button
                    type="button"
                    className="auth-social-btn"
                    aria-label="Login with Google"
                    onClick={() => handleSocialLogin('google')} // <-- Call the new handler
                    disabled={isSubmitting} // Disable while any login flow is active
                >
                    <FaGoogle />
                </button>
                 {/* Facebook Login Button */}
                <button
                    type="button"
                    className="auth-social-btn"
                    aria-label="Login with Facebook"
                    onClick={() => handleSocialLogin('facebook')} // <-- Call the new handler
                    disabled={isSubmitting} // Disable while any login flow is active
                >
                    <FaFacebookF />
                </button>
                 {/* Apple Login Button */}
                <button
                    type="button"
                    className="auth-social-btn"
                    aria-label="Login with Apple"
                    onClick={() => handleSocialLogin('apple')} // <-- Call the new handler
                    disabled={isSubmitting} // Disable while any login flow is active
                >
                    <FaApple />
                </button>
            </div>
            {/* End of Social Login Buttons */}

        </>
    );
};

export default LoginFormContent;