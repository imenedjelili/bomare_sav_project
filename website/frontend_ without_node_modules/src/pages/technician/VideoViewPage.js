// src/pages/technician/VideoViewPage.js
import React, { useEffect, useState, useMemo } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import {
    FiThumbsUp, FiThumbsDown, FiBookmark, FiFlag, FiCheckCircle,
    FiShare2, FiMessageSquare, FiUser, FiExternalLink
} from 'react-icons/fi';
import './VideoViewPage.css';
import { BeatLoader } from 'react-spinners'; // For loading indicator

const DEFAULT_PLACEHOLDER_IMAGE = '/assets/images/profile-placeholder.png';

const SuggestedVideoCard = ({ video }) => (
    <Link to={`/technician/videos/${video.id}`} className="suggested-video-item">
        <img
            src={video.thumbnail || video.url || DEFAULT_PLACEHOLDER_IMAGE}
            alt={video.title || 'Video thumbnail'}
            onError={(e) => { e.target.onerror = null; e.target.src = DEFAULT_PLACEHOLDER_IMAGE; }}
        />
        <div className="suggested-video-title">{video.title}</div>
    </Link>
);

const placeholderTechnician = { name: "Expert BOMARE", avatarUrl: DEFAULT_PLACEHOLDER_IMAGE };
const initialComments = [
    { id: 'c1', user: { name: 'Sophie M.', avatarUrl: DEFAULT_PLACEHOLDER_IMAGE }, date: 'Il y a 2 heures', text: 'Très utile, merci pour ce guide !' },
    { id: 'c2', user: { name: 'Ahmed B.', avatarUrl: DEFAULT_PLACEHOLDER_IMAGE }, date: 'Il y a 5 heures', text: 'J\'ai eu un problème similaire, cette vidéo m\'a aidé à le résoudre.' },
];

const formatDuration = (seconds) => {
  if (typeof seconds !== 'number' || isNaN(seconds) || seconds < 0) return 'N/A';
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = Math.floor(seconds % 60);
  const paddedSeconds = remainingSeconds < 10 ? `0${remainingSeconds}` : remainingSeconds;
  return `${minutes}:${paddedSeconds}`;
};


function VideoViewPage() {
    const { videoId } = useParams();
    const navigate = useNavigate();

    console.log('VideoViewPage rendered. videoId from params:', videoId); // Log 1

    const [video, setVideo] = useState(null);
    const [allVideos, setAllVideos] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    const [comments, setComments] = useState(initialComments);
    const [newComment, setNewComment] = useState("");
    const [isBookmarked, setIsBookmarked] = useState(false);
    const [likeState, setLikeState] = useState(null);
    const [isCompleted, setIsCompleted] = useState(false);
    const [showReportModal, setShowReportModal] = useState(false);
    const [reportText, setReportText] = useState("");
    const [reportSent, setReportSent] = useState(false);


    const unwantedTagsForDisplay = ["HOW TO VIDEO", "CYCLING", "TV TECH", "BOOTCAMP", "BOMARE"];

    const videoDetails = useMemo(() => video, [video]);
    const allVideosList = useMemo(() => allVideos, [allVideos]);

    useEffect(() => {
        let isMounted = true;
        console.log('useEffect triggered for videoId:', videoId); // Log 2

        async function fetchData() {
            if (!isMounted) return;
            setIsLoading(true);
            setError(null);
            setVideo(null);
            setAllVideos([]);

            const numericVideoId = parseInt(videoId, 10);
            console.log('numericVideoId:', numericVideoId); // Log 3

            if (isNaN(numericVideoId)) {
                console.error("Invalid video ID from URL:", videoId);
                if (isMounted) {
                    setError("ID vidéo invalide.");
                    navigate('/technician/videos', { replace: true, state: { message: "ID vidéo invalide." } });
                    setIsLoading(false);
                }
                return;
            }

            try {
                const { data: videoData, error: videoError } = await supabase
                    .from('videos')
                    .select('*, videos_video_tags(tag_id(name))')
                    .eq('id', numericVideoId)
                    .single();

                console.log('Fetched videoData:', videoData, 'videoError:', videoError); // Log 4

                const { data: allVideosData, error: allVideosError } = await supabase
                    .from('videos')
                    .select('id, title, url, thumbnail, duration_seconds, level, type')
                    .neq('id', numericVideoId);

                if (!isMounted) return;

                if (videoError) {
                    console.error("Error fetching specific video:", videoError);
                    if (videoError.code === 'PGRST116') {
                        setError(`Vidéo avec ID ${numericVideoId} introuvable.`);
                        navigate('/technician/videos', { replace: true, state: { message: `La vidéo demandée (ID: ${numericVideoId}) n'a pas été trouvée.` } });
                    } else {
                        setError("Erreur lors du chargement de la vidéo : " + videoError.message);
                    }
                } else if (!videoData) {
                    setError(`Aucune donnée trouvée pour la vidéo ID ${numericVideoId}.`);
                    navigate('/technician/videos', { replace: true, state: { message: `La vidéo demandée (ID: ${numericVideoId}) n'existe pas.` } });
                } else {
                    setVideo(videoData);
                    setIsBookmarked(false);
                    setLikeState(null);
                    setIsCompleted(false);
                }

                if (allVideosError) {
                    console.error("Error fetching all videos for suggestions:", allVideosError);
                } else {
                    setAllVideos(allVideosData ? allVideosData.filter(v => v.url) : []);
                }

            } catch (err) {
                if (!isMounted) return;
                console.error("Unexpected error fetching video data:", err); // Log 5
                setError("Une erreur inattendue est survenue : " + (err.message || err));
            } finally {
                if (isMounted) {
                    setIsLoading(false);
                    console.log('fetchData finally block. isLoading set to false.'); // Log 6
                }
            }
        }

        fetchData();

        return () => {
            isMounted = false;
        };
    }, [videoId, navigate]);

    const suggestedVideosList = useMemo(() => {
        return allVideosList.filter(sugg => String(sugg.id) !== String(videoId) && sugg.url).slice(0, 5);
    }, [allVideosList, videoId]);

    const handleBookmark = () => setIsBookmarked(!isBookmarked);
    const handleLike = () => setLikeState(prev => (prev === 'liked' ? null : 'liked'));
    const handleDislike = () => setLikeState(prev => (prev === 'disliked' ? null : 'disliked'));
    const handleMarkComplete = () => setIsCompleted(!isCompleted);

    const handleReportSubmit = (e) => {
        e.preventDefault();
        if (!reportText.trim()) {
            alert("Veuillez décrire le problème.");
            return;
        }
        console.log("Signalement soumis:", { videoId: videoDetails?.id, report: reportText });
        setReportSent(true);
        setTimeout(() => {
            setShowReportModal(false);
            setReportSent(false);
            setReportText("");
        }, 2500);
    };

    const handleCommentSubmit = (e) => {
        e.preventDefault();
        if (!newComment.trim()) return;
        const commentToAdd = {
            id: `c${Date.now()}`,
            user: { name: "Moi (Technicien)", avatarUrl: placeholderTechnician.avatarUrl },
            date: "À l'instant",
            text: newComment,
        };
        setComments(prevComments => [commentToAdd, ...prevComments]);
        setNewComment("");
        console.log("Comment added:", commentToAdd);
    };

    console.log('--- Before return ---'); // Log 7
    console.log('isLoading:', isLoading);
    console.log('error:', error);
    console.log('videoDetails:', videoDetails);
    console.log('videoDetails?.type:', videoDetails?.type);
    console.log('videoDetails?.url:', videoDetails?.url);
    console.log('--------------------');

    if (isLoading) {
        return (
             <div className="loading-container fade-in-up" style={{textAlign: 'center', paddingTop: '100px', color: 'var(--text-color)'}}>
                <div className="page-header" style={{marginBottom: '20px'}}><h1>Chargement de la vidéo...</h1></div>
                <BeatLoader color="var(--accent-color)" loading={isLoading} size={15} />
                <p className="text-secondary" style={{marginTop: '15px'}}>Veuillez patienter.</p>
            </div>
        );
    }

     if (error && !videoDetails) {
        return (
            <div className="technician-video-view-page error-state" style={{textAlign: 'center', paddingTop: '100px'}}>
                <div className="page-header" style={{marginBottom: '20px'}}>
                    <h1>Erreur de Chargement</h1>
                    <p className="text-secondary">Impossible d'afficher la vidéo demandée.</p>
                </div>
                 <div className="custom-card auth-message error" style={{ maxWidth: '600px', margin: '20px auto', padding: '20px' }}>
                   <p>{error}</p>
                   <button onClick={() => navigate(0)} className="btn btn-secondary" style={{marginTop: '15px', marginRight: '10px'}}>
                        Réessayer
                   </button>
                     <Link to="/technician/videos" className="btn btn-primary" style={{marginTop: '15px'}}>Retour à la Vidéothèque</Link>
               </div>
            </div>
        );
     }

    if (!videoDetails) {
         return (
             <div className="technician-video-view-page error-state" style={{textAlign: 'center', paddingTop: '100px'}}>
                 <div className="page-header" style={{marginBottom: '20px'}}><h1>Vidéo non disponible</h1></div>
                 <p className="text-secondary">Les détails de cette vidéo n'ont pu être chargés. Elle n'existe peut-être plus.</p>
                 <Link to="/technician/videos" className="btn btn-primary" style={{marginTop: '15px'}}>Retour à la Vidéothèque</Link>
             </div>
         );
    }

    const displayTags = videoDetails?.videos_video_tags
    ?.map(link => link.tag_id?.name)
    .filter(name => name && !unwantedTagsForDisplay.includes(name.toUpperCase())) || [];


    return (
        <div className="technician-video-view-page fade-in">
            {showReportModal && (
                <div className="report-overlay-video">
                    <div className="report-modal-video">
                        {reportSent ? (
                            <div className="report-success-video">Merci ! Votre signalement a été envoyé. Nous allons l'examiner.</div>
                        ) : (
                            <form onSubmit={handleReportSubmit}>
                                <h3>Signaler un problème avec cette vidéo</h3>
                                <textarea
                                    value={reportText}
                                    onChange={e => setReportText(e.target.value)}
                                    placeholder="Décrivez le problème (ex: informations incorrectes, mauvaise qualité audio/vidéo, contenu inapproprié, etc.)"
                                    required
                                    rows={5}
                                    className="textarea-field"
                                />
                                <div className="modal-actions">
                                    <button type="button" onClick={() => setShowReportModal(false)} className="btn btn-secondary btn-sm">Annuler</button>
                                    <button type="submit" className="btn btn-primary btn-sm">Envoyer le Signalement</button>
                                </div>
                            </form>
                        )}
                    </div>
                </div>
            )}

            <div className="video-view-main-content">
                {error && videoDetails && (
                    <div className="auth-message error" style={{marginBottom: '20px', textAlign: 'center'}}>{error}</div>
                )}

                {videoDetails.type === 'article' && videoDetails.url ? (
                    <div className="custom-card article-content" style={{maxWidth: '800px', margin: '20px auto', padding: '20px', background: 'var(--card-bg)'}}>
                         <h3>{videoDetails.title}</h3>
                         <p>{videoDetails.description || "Aucune description détaillée n'est disponible."}</p>
                         {videoDetails.creator && <p><strong>Source :</strong> {videoDetails.creator}</p>}
                         {videoDetails.published_at && <p><strong>Publié le :</strong> {new Date(videoDetails.published_at).toLocaleDateString('fr-FR', { year: 'numeric', month: 'long', day: 'numeric' })}</p>}
                         <a href={videoDetails.url} target="_blank" rel="noopener noreferrer" className="btn btn-primary btn-icon" style={{marginTop: '15px'}}>
                             <FiExternalLink style={{marginRight: '6px'}} /> Lire l'article complet
                         </a>
                         <Link to="/technician/videos" className="btn btn-secondary" style={{marginTop: '15px', marginLeft: '10px'}}>Retour à la Vidéothèque</Link>
                    </div>
                ) : videoDetails.url ? (
                    <div className="video-player-wrapper">
                         <video
                             controls
                             autoPlay={false}
                             playsInline
                             poster={videoDetails.thumbnail || DEFAULT_PLACEHOLDER_IMAGE}
                             className="main-video-player"
                             key={videoDetails.id}
                             onError={(e) => { console.error("Video load error:", e); e.target.poster = DEFAULT_PLACEHOLDER_IMAGE; }}
                         >
                            <source src={videoDetails.url} type="video/mp4" />
                            Votre navigateur ne supporte pas la balise vidéo.
                         </video>
                     </div>
                 ) : (
                     <div className="custom-card" style={{maxWidth: '800px', margin: '20px auto', padding: '20px', background: 'var(--card-bg)', textAlign: 'center'}}>
                         <h3>Contenu non disponible</h3>
                          <p className="text-secondary">L'URL de la vidéo ou de l'article est manquante.</p>
                          {videoDetails.title && <p>Titre: {videoDetails.title}</p>}
                          <Link to="/technician/videos" className="btn btn-primary" style={{marginTop: '15px'}}>Retour à la Vidéothèque</Link>
                      </div>
                 )}

                {videoDetails.type !== 'article' && videoDetails.url && (
                     <div className="video-info-banner">
                        <div className="video-info-main">
                             <img
                                 src={videoDetails.technicianAvatar || placeholderTechnician.avatarUrl}
                                 alt={videoDetails.creator || placeholderTechnician.name}
                                 className="technician-avatar-banner"
                                 onError={(e) => { e.target.onerror = null; e.target.src = DEFAULT_PLACEHOLDER_IMAGE; }}
                             />
                             <div className="video-title-and-meta">
                                 <h1 className="video-view-title-banner">{videoDetails.title}</h1>
                                 <div className="video-banner-meta">
                                     <span><FiUser size={14}/> {videoDetails.creator || placeholderTechnician.name}</span>
                                     <span>•</span>
                                     <span>{videoDetails.views ? `${videoDetails.views.toLocaleString('fr-FR')} vues` : '0 vues'}</span>
                                     <span>•</span>
                                     <span>Publié {videoDetails.published_at ? new Date(videoDetails.published_at).toLocaleDateString('fr-FR') : 'Récemment'}</span>
                                     {videoDetails.level && <><span>•</span><span>Niveau: {videoDetails.level}</span></>}
                                 </div>
                             </div>
                         </div>
                         <div className="video-banner-actions">
                             <button className={`action-btn-banner ${likeState === 'liked' ? 'active' : ''}`} onClick={handleLike} title="J'aime">
                                 <FiThumbsUp size={18}/> {videoDetails.likes || 0}
                             </button>
                             <button className={`action-btn-banner ${likeState === 'disliked' ? 'active' : ''}`} onClick={handleDislike} title="Je n'aime pas">
                                 <FiThumbsDown size={18}/> {videoDetails.dislikes || 0}
                             </button>
                             <button className="action-btn-banner" onClick={() => navigator.clipboard.writeText(window.location.href).then(() => alert('Lien copié!')).catch(err => console.error('Copy failed:', err))} title="Partager">
                                 <FiShare2 size={18}/> Partager
                             </button>
                             <button className="action-btn-banner" onClick={handleBookmark} title={isBookmarked ? 'Retirer des favoris' : 'Ajouter aux favoris'}>
                                 <FiBookmark size={18} style={{ fill: isBookmarked ? 'var(--accent-color)' : 'none', stroke: isBookmarked ? 'var(--accent-color)' : 'currentColor' }}/>
                                 {isBookmarked ? 'Enregistré' : 'Enregistrer'}
                             </button>
                              <button className="action-btn-banner report" onClick={() => setShowReportModal(true)} title="Signaler un problème">
                                 <FiFlag size={18}/> Signaler
                             </button>
                         </div>
                     </div>
                 )}

                {videoDetails.type !== 'article' && videoDetails.url && (
                    <div className="video-details-and-suggestions-layout">
                         <div className="video-main-column-details">
                             <div className="video-description-card">
                                 <h3>Description</h3>
                                 <p>{videoDetails.description || "Aucune description détaillée n'est disponible pour cette vidéo."}</p>
                                 {displayTags.length > 0 && (
                                     <div className="video-display-tags">
                                         <strong>Tags Vidéo:</strong>
                                         {displayTags.map(tag => <span key={tag} className="tag-item-display">{tag}</span>)}
                                     </div>
                                 )}
                                 <div className="mark-complete-action">
                                     <button
                                         className={`btn ${isCompleted ? 'btn-secondary' : 'btn-primary'} btn-icon`}
                                         onClick={handleMarkComplete}
                                     >
                                         <FiCheckCircle size={16} style={{marginRight: '6px'}}/>
                                         {isCompleted ? 'Vidéo Terminée' : 'Marquer comme Terminée'}
                                     </button>
                                 </div>
                             </div>

                             <div className="comments-section-video">
                                 <h3><FiMessageSquare size={18} style={{marginRight: '6px'}} /> Commentaires ({comments.length})</h3>
                                 <form onSubmit={handleCommentSubmit} className="comment-form-video">
                                     <textarea
                                         className="textarea-field"
                                         rows="3"
                                         placeholder="Ajouter un commentaire public..."
                                         value={newComment}
                                         onChange={(e) => setNewComment(e.target.value)}
                                         required
                                     />
                                     <div className="comment-form-actions" style={{textAlign: 'right', marginTop: '10px'}}>
                                         <button type="submit" className="btn btn-primary btn-sm" disabled={!newComment.trim()}>Commenter</button>
                                     </div>
                                 </form>
                                 <div className="comment-list-video">
                                     {comments.length > 0 ? comments.map(comment => (
                                         <div key={comment.id} className="comment-item-video">
                                             <img src={comment.user.avatarUrl || DEFAULT_PLACEHOLDER_IMAGE} alt={comment.user.name} className="comment-avatar-video" onError={(e) => { e.target.onerror = null; e.target.src = DEFAULT_PLACEHOLDER_IMAGE; }}/>
                                             <div className="comment-content-video">
                                                 <div>
                                                     <span className="comment-author-video">{comment.user.name}</span>
                                                     <span className="comment-date-video">{comment.date}</span>
                                                 </div>
                                                 <p className="comment-text-video">{comment.text}</p>
                                             </div>
                                         </div>
                                     )) : <p className="text-secondary" style={{padding: '10px 0'}}>Aucun commentaire pour le moment.</p>}
                                 </div>
                             </div>
                         </div>

                         <aside className="video-sidebar-suggestions">
                             <h3>Vidéos suggérées</h3>
                             <div className="suggested-videos-list">
                                 {suggestedVideosList.length > 0 ?
                                     suggestedVideosList.map(suggVideo => (
                                         <SuggestedVideoCard video={suggVideo} key={suggVideo.id} />
                                     )) :
                                     <p className="text-secondary" style={{fontSize: '0.85rem'}}>Aucune autre suggestion.</p>
                                 }
                             </div>
                         </aside>
                     </div>
                 )}
            </div>
        </div>
    );
}

export default VideoViewPage;