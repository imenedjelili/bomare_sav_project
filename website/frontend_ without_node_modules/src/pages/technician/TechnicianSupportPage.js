// src/pages/technician/TechnicianSupportPage.js
import React, { useState, useEffect, useMemo } from 'react'; // Import useEffect, useMemo
import { supabase } from '../../supabaseClient'; // Import supabase client
// Import necessary icons, including FiCheckCircle
import { FiCheckCircle, FiUser, FiMessageSquare, FiExternalLink } from 'react-icons/fi';

import './TechnicianFAQPage.css'; // Reusing FAQ page layout structure for simplicity
// Create TechnicianSupportPage.css if dedicated styling is needed

// Remove Example Data (these were removed in the previous step, keeping this comment for clarity)
// const supportCategories = [ ... ];
// const supportQuickLinks = [ ... ];

export default function TechnicianSupportPage() {
    const [supportResources, setSupportResources] = useState([]); // State for all fetched resources
    const [categories, setCategories] = useState([]); // State for unique categories
    const [selectedCategory, setSelectedCategory] = useState(null); // State for selected category content
    const [form, setForm] = useState({ name: '', email: '', subject: '', message: '' });
    const [isSent, setIsSent] = useState(false);
    const [showSuccessModal, setShowSuccessModal] = useState(false);

    const [isLoading, setIsLoading] = useState(true); // Loading state
    const [error, setError] = useState(null); // Error state


    // Fetch resources and categories on mount
    useEffect(() => {
        let isMounted = true;

        async function fetchSupportData() {
            if (!isMounted) return; // Check if component is still mounted
            setIsLoading(true);
            setError(null);
            setSupportResources([]); // Clear previous data
            setCategories([]); // Clear previous categories
            setSelectedCategory(null); // Reset selected category

            try {
                // Fetch all resources from the 'support_resources' table
                // Order by category, then by the 'order' column for consistent sorting
                const { data, error } = await supabase
                    .from('support_resources') // <-- Use your table name 'support_resources'
                    .select('*')
                    .order('category', { ascending: true })
                    .order('order', { ascending: true }); // Order by the 'order' column

                if (!isMounted) return;

                if (error) {
                    console.error("Error fetching support resources:", error);
                    setError("Erreur lors du chargement des ressources de support : " + error.message);
                } else {
                    console.log("Fetched support resources:", data);
                    setSupportResources(data || []); // Set fetched data

                    // Extract unique categories and set the state
                    const uniqueCategories = [...new Set((data || []).map(resource => resource.category))];
                    setCategories(uniqueCategories);

                    // Automatically select the first category if data exists
                    if (uniqueCategories.length > 0) {
                        setSelectedCategory(uniqueCategories[0]);
                    }
                }

            } catch (err) {
                if (!isMounted) return;
                console.error("Unexpected error fetching support data:", err);
                setError("Une erreur inattendue est survenue lors du chargement des données de support : " + (err.message || err));
            } finally {
                if (isMounted) { // Ensure loading state is turned off
                    setIsLoading(false);
                }
            }
        }

        fetchSupportData();

        return () => {
            isMounted = false;
        };
    }, []); // Effect runs only once on mount


    // Filter resources based on the selected category and group them by type if needed
    // For this page's structure, we just need the list of items for the selected category
    const resourcesForSelectedCategory = useMemo(() => {
        if (!selectedCategory) return [];
        return supportResources.filter(resource => resource.category === selectedCategory);
    }, [supportResources, selectedCategory]);

     // Determine the type of the selected category's primary resource (e.g., 'form' or 'link')
     // This assumes each category primarily represents one type of interaction (form OR list of links)
     const selectedCategoryType = useMemo(() => {
         // Find the first resource item for the selected category to determine its type
         const firstResource = resourcesForSelectedCategory.find(() => true); // Simple way to get the first item if exists
         return firstResource ? firstResource.type : null;
     }, [resourcesForSelectedCategory]);


    // --- RESTORED: handleCategorySelect function ---
    const handleCategorySelect = (category) => {
        setSelectedCategory(category);
        // No openIndex state used in Support page currently, but keeping pattern
        // setOpenIndex(null); 
    };
    // --- END RESTORED ---


    const handleChange = e => {
        setForm({ ...form, [e.target.name]: e.target.value });
    };

    const handleSubmit = async e => {
        e.preventDefault();
        // Basic validation
        if (!form.name || !form.email || !form.subject || !form.message) {
            alert("Veuillez remplir tous les champs.");
            return;
        }

        setIsSent(true); // Indicate sending is in progress

        try {
             // Get the current authenticated user's ID
             const { data: { user }, error: userError } = await supabase.auth.getUser();

             if (userError) {
                 console.error("Error getting user for support request:", userError);
                 // Handle case where user cannot be identified (shouldn't happen in protected route, but good to be safe)
                 setError("Impossible d'identifier l'utilisateur pour la demande.");
                 setIsSent(false); // Reset send state
                 return;
             }

            // Prepare data for insertion
            const requestData = {
                user_id: user ? user.id : null, // Link user ID if available, can be null if anonymous (based on RLS)
                requestor_name: form.name,
                requestor_email: form.email,
                subject: form.subject,
                message: form.message,
                category: selectedCategory, // Store the category the request came from
                // status will default to 'New' per table definition
            };

            // Insert into the support_requests table
            const { data, error } = await supabase
                .from('support_requests') // <-- Use your table name 'support_requests'
                .insert([requestData]);

            if (error) {
                console.error("Error submitting support request:", error);
                setError("Erreur lors de l'envoi de la demande : " + error.message);
                 setIsSent(false); // Reset send state
            } else {
                console.log("Support request submitted successfully:", data);
                // Show success modal
                setShowSuccessModal(true);
                // Clear form after successful submission
                setForm({ name: '', email: '', subject: '', message: '' });
                // Note: isSent will be true until modal closes, handled below
            }

        } catch (err) {
             console.error("Unexpected error during support request submission:", err);
             setError("Une erreur inattendue est survenue lors de l'envoi de la demande : " + (err.message || err));
              setIsSent(false); // Reset send state
        }
    };

    // Handle modal close and reset isSent state
    const handleCloseSuccessModal = () => {
        setShowSuccessModal(false);
        setIsSent(false); // Reset isSent here
    };


    // --- Loading State ---
    if (isLoading) {
        return (
             <div className="technician-support-page loading-state" style={{textAlign: 'center', paddingTop: '100px'}}>
               <div className="page-header" style={{marginBottom: '20px'}}>
                   <h1>Chargement du Support...</h1>
                   <p className="text-secondary">Récupération des options d'assistance.</p>
               </div>
               {error && !supportResources.length && ( // Show initial errors if no data loaded
                   <div className="auth-message error" style={{margin: '20px auto', maxWidth: '600px'}}>{error}</div>
               )}
               {/* Add a spinner graphic here */}
            </div>
        );
    }

    // --- Error State after loading finishes with no data ---
    if (error && !supportResources.length) {
       return (
           <div className="technician-support-page error-state" style={{textAlign: 'center', paddingTop: '100px'}}>
               <div className="page-header" style={{marginBottom: '20px'}}>
                   <h1>Erreur de Chargement</h1>
                   <p className="text-secondary">Impossible d'afficher les options de support.</p>
               </div>
               <div className="custom-card auth-message error" style={{ maxWidth: '600px', margin: '20px auto' }}>
                 <p>{error}</p>
                  <button onClick={() => window.location.reload()} className="btn btn-secondary" style={{marginTop: '15px'}}>
                       Réessayer
                  </button>
              </div>
           </div>
       );
    }


    return (
        <div className="technician-support-page fade-in-up"> {/* Main page wrapper */}
            <div className="page-header">
                <h1>Support Technicien</h1>
                <p className="text-secondary">Ressources et assistance pour l'équipe technique BOMARE.</p>
                 {/* Show runtime errors if some data loaded but there were issues */}
                 {error && supportResources.length > 0 && (
                      <div className="auth-message error" style={{margin: '20px auto', maxWidth: '600px'}}><p>{error}</p></div>
                  )}
            </div>

            {/* Reusing FAQ layout structure: .technician-faq-root, .technician-faq-container etc. */}
            <div className="technician-faq-root">
                <div className="technician-faq-container">
                    {/* Render sidebar only if categories are available */}
                    {categories.length > 0 && (
                        <aside className="technician-faq-sidebar">
                            {categories.map(cat => (
                                <div
                                    key={cat}
                                    className={`technician-faq-sidebar-link ${cat === selectedCategory ? ' active' : ''}`}
                                    onClick={() => handleCategorySelect(cat)}
                                >
                                    {cat}
                                </div>
                            ))}
                        </aside>
                    )}

                    <main className="technician-faq-main">
                        {/* Display content based on the determined type of the selected category */}
                        {selectedCategoryType === 'form' && (
                             <section style={{ width: '100%' }} className="technician-support-form-section">
                                 {/* Use the title from the resource for the form header if needed */}
                                 {/* You could map `resourcesForSelectedCategory` to find the 'form' type resource title */}
                                 <h3>{resourcesForSelectedCategory.find(r => r.type === 'form')?.title || selectedCategory}</h3> {/* Use resource title if available, fallback to category name */}
                                 <form className="technician-styled-form" onSubmit={handleSubmit}>
                                     <div className="form-group">
                                         <label htmlFor="techName" className="label">Votre Nom (Technicien)</label>
                                         <input className="input-field" type="text" id="techName" name="name" value={form.name} onChange={handleChange} required />
                                     </div>
                                     <div className="form-group">
                                         <label htmlFor="techEmail" className="label">Votre E-mail Professionnel</label>
                                         <input className="input-field" type="email" id="techEmail" name="email" value={form.email} onChange={handleChange} required />
                                     </div>
                                     <div className="form-group">
                                         <label htmlFor="techSubject" className="label">Sujet de la demande</label>
                                         <input className="input-field" type="text" id="techSubject" name="subject" value={form.subject} onChange={handleChange} required />
                                     </div>
                                     <div className="form-group">
                                         <label htmlFor="techMessage" className="label">Description détaillée</label>
                                         <textarea className="textarea-field" id="techMessage" name="message" value={form.message} onChange={handleChange} rows={5} required />
                                     </div>
                                     <button type="submit" className="btn btn-primary" style={{ marginTop: '10px' }} disabled={isSent}>
                                         {isSent ? 'Envoi en cours...' : 'Envoyer la Demande'} {/* Indicate sending */}
                                     </button>
                                 </form>
                             </section>
                        )}

                        {selectedCategoryType === 'link' && (
                             <section style={{ width: '100%' }} className="technician-support-links-section">
                                  {/* Use the title from the resource list header if needed */}
                                  {/* You could map `resourcesForSelectedCategory` to find a specific resource title */}
                                 <h3>{resourcesForSelectedCategory.find(r => r.type === 'link')?.category || selectedCategory}</h3> {/* Fallback to category name */}
                                 <ul className="technician-resource-links">
                                     {/* Map resources for the selected category that are of type 'link' */}
                                     {resourcesForSelectedCategory.filter(r => r.type === 'link').map(link => (
                                         <li key={link.id}> {/* Use link.id as key */}
                                             <a href={link.href} target="_blank" rel="noopener noreferrer">
                                                 {link.title}
                                             </a>
                                             {link.description && <p className="link-description">{link.description}</p>} {/* Optional description */}
                                          </li>
                                      ))}
                                     {/* Message if the category has no links */}
                                      {resourcesForSelectedCategory.filter(r => r.type === 'link').length === 0 && (
                                          <p className="text-secondary" style={{textAlign: 'center', marginTop: '20px'}}>Aucun lien de ressource disponible pour cette catégorie.</p>
                                      )}
                                 </ul>
                             </section>
                        )}

                        {/* Message if no categories or no content type determined */}
                        {categories.length === 0 && !isLoading && !error && (
                            <p className="text-secondary" style={{textAlign: 'center', marginTop: '20px'}}>Aucune option de support n'est configurée pour le moment.</p>
                        )}
                         {/* Message if a category is selected but has no resources */}
                        {categories.length > 0 && selectedCategory !== null && resourcesForSelectedCategory.length === 0 && (
                              <p className="text-secondary" style={{textAlign: 'center', marginTop: '20px'}}>Aucun contenu disponible pour cette catégorie.</p>
                        )}

                    </main>
                </div>
            </div>

            {/* Success Modal */}
            {showSuccessModal && (
                <div className="report-overlay">
                    <div className="report-modal">
                         <div className="report-success" style={{color: 'var(--active-status-generic-bg)'}}>
                            <FiCheckCircle size={24} style={{marginBottom: '10px'}} />
                            Merci ! Votre demande a été envoyée.
                         </div>
                        <button className="btn btn-primary" style={{marginTop: 18}} onClick={handleCloseSuccessModal}>Fermer</button>
                    </div>
                </div>
            )}
        </div>
    );
}