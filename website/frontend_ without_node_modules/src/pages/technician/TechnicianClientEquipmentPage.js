// src/pages/technician/TechnicianClientEquipmentPage.js
import React, { useState, useMemo } from 'react';
import { Link } from 'react-router-dom';
// CORRECTED IMPORT: Added FiTool
import { FiSearch, FiFilter, FiInfo, FiHardDrive, FiEye, FiSettings, FiTool } from 'react-icons/fi';
import './TechnicianClientEquipmentPage.css';
// Assuming TechnicianWorkOrdersPage.css contains shared styles like .controls-container, .table-container-tech etc.
// If not, you might need to duplicate or create a shared CSS file.
import './TechnicianWorkOrdersPage.css'; // For reusing control and table styles


const initialClientEquipment = [
    { id: 'EQ001', client: 'Ali B.', type: 'Téléviseur', brand: 'Bomare', model: 'Z45', serial: 'BOM-Z-00123', status: 'En Réparation', lastService: '20/05/2025', workOrderId: '4587', warrantyInfo: 'Expirée le 15/01/2025' },
    { id: 'EQ002', client: 'Samira A.', type: 'Audio', brand: 'Bomare', model: 'S20', serial: 'BOM-S-7890', status: 'Réparé', lastService: '19/05/2025', workOrderId: '4565', warrantyInfo: 'Active jusqu\'au 10/12/2025' },
    { id: 'EQ003', client: 'Amine D.', type: 'Smartphone', brand: 'Bomare', model: 'X10', serial: 'BOM-X-4521', status: 'En attente de pièces', lastService: '18/05/2025', workOrderId: '4590', warrantyInfo: 'Active jusqu\'au 01/03/2026' },
    { id: 'EQ004', client: 'Karim S.', type: 'Réfrigérateur', brand: 'Autre Marque', model: 'AlphaCool 5000', serial: 'AC-RF-9876', status: 'Diagnostic en cours', lastService: '21/05/2025', workOrderId: '4592', warrantyInfo: 'Inconnue' },
    { id: 'EQ005', client: 'Leila T.', type: 'Climatiseur', brand: 'Bomare', model: 'ClimMax 3', serial: 'BOM-C-1122', status: 'Maintenance Préventive', lastService: '15/04/2025', workOrderId: null, warrantyInfo: 'Active jusqu\'au 30/06/2027' },
];

const getEquipmentStatusClass = (status) => {
    const s = status.toLowerCase();
    if (s.includes('réparation') || s.includes('diagnostic') || s.includes('en attente')) {
        return 'status-in-progress'; 
    }
    if (s.includes('réparé') || s.includes('maintenance préventive')) { // Maintenance is considered completed for now
        return 'status-completed';
    }
    return 'status-unknown';
};

const getWarrantyStatusClass = (warrantyInfo) => {
    const w = warrantyInfo.toLowerCase();
    if (w.includes('active') || w.includes('sous garantie')) return 'warranty-active';
    if (w.includes('expirée') || w.includes('hors garantie')) return 'warranty-expired';
    if (w.includes('inconnue') || w.includes('n/a')) return 'warranty-unknown';
    return '';
};


function TechnicianClientEquipmentPage() {
    const [clientEquipment, setClientEquipment] = useState(initialClientEquipment);
    const [searchTerm, setSearchTerm] = useState('');
    const [filters, setFilters] = useState({
        status: '',
        brand: '',
    });

    const handleViewDetails = (equipmentId) => {
        console.log(`View details for equipment: ${equipmentId}`);
        // Placeholder: In a real app, navigate to equipment detail page or show modal
        // navigate(`/technician/equipment/${equipmentId}`);
    };

    const filteredEquipment = useMemo(() => {
        return clientEquipment.filter(eq => {
            const searchMatch = searchTerm === '' ||
                eq.client.toLowerCase().includes(searchTerm.toLowerCase()) ||
                eq.type.toLowerCase().includes(searchTerm.toLowerCase()) ||
                eq.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||
                eq.model.toLowerCase().includes(searchTerm.toLowerCase()) ||
                eq.serial.toLowerCase().includes(searchTerm.toLowerCase());

            const statusMatch = filters.status === '' || eq.status === filters.status;
            const brandMatch = filters.brand === '' || eq.brand === filters.brand;
            
            return searchMatch && statusMatch && brandMatch;
        });
    }, [clientEquipment, searchTerm, filters]);

    const uniqueBrands = useMemo(() => {
        const brands = new Set(initialClientEquipment.map(eq => eq.brand));
        return Array.from(brands);
    }, []); // Removed initialClientEquipment from dependency to avoid re-calc on data change, only on mount

    const uniqueStatuses = useMemo(() => Array.from(new Set(initialClientEquipment.map(eq => eq.status))), []); // Same here

    return (
        <div className="technician-client-equipment-page fade-in-up">
            <div className="page-header">
                <h1>Équipement Client</h1>
                <p className="text-secondary">Inventaire et historique des appareils gérés.</p>
            </div>

            <div className="controls-container technician-controls-container">
                <div className="search-box technician-search-box">
                    <FiSearch className="search-icon" />
                    <input
                        type="text"
                        placeholder="Rechercher par client, type, série..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                    />
                </div>
                <div className="filters-box technician-filters-box">
                    <FiFilter className="filter-icon-main" />
                    <span>Filtres :</span>
                    <select value={filters.status} onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}>
                        <option value="">Statut (Tous)</option>
                        {uniqueStatuses.map(status => <option key={status} value={status}>{status}</option>)}
                    </select>
                    <select value={filters.brand} onChange={(e) => setFilters(prev => ({ ...prev, brand: e.target.value }))}>
                        <option value="">Marque (Toutes)</option>
                        {uniqueBrands.map(brand => (
                            <option key={brand} value={brand}>{brand}</option>
                        ))}
                    </select>
                </div>
            </div>

            <div className="table-container-tech">
                <table className="responsive-table-tech client-equipment-table">
                    <thead>
                        <tr>
                            <th>Client</th>
                            <th>Type</th>
                            <th>Marque</th>
                            <th>Modèle</th>
                            <th>N° Série</th>
                            <th>Statut Équip.</th>
                            <th>Dernier Service</th>
                            <th>Infos Garantie</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {filteredEquipment.length > 0 ? (
                            filteredEquipment.map(eq => (
                                <tr key={eq.id}>
                                    <td data-label="Client">{eq.client}</td>
                                    <td data-label="Type"><FiHardDrive className="inline-icon" /> {eq.type}</td>
                                    <td data-label="Marque">{eq.brand}</td>
                                    <td data-label="Modèle">{eq.model}</td>
                                    <td data-label="N° Série">{eq.serial}</td>
                                    <td data-label="Statut Équip.">
                                        <span className={`status-badge ${getEquipmentStatusClass(eq.status)}`}>
                                            <FiSettings size={14} /> {eq.status}
                                        </span>
                                    </td>
                                    <td data-label="Dernier Service">{eq.lastService}</td>
                                    <td data-label="Infos Garantie">
                                        <span className={`warranty-status-badge ${getWarrantyStatusClass(eq.warrantyInfo)}`}>
                                            {eq.warrantyInfo}
                                        </span>
                                    </td>
                                    <td data-label="Actions" className="actions-cell-tech">
                                        {eq.workOrderId && 
                                            <Link to={`/technician/work-orders/${eq.workOrderId}`} className="btn btn-sm btn-outline" title="Voir l'ordre de travail lié">
                                                <FiTool size={14} /> Ordre {/* FiTool was missing */}
                                            </Link>
                                        }
                                        <button onClick={() => handleViewDetails(eq.id)} className="btn btn-sm btn-secondary" title="Détails de l'équipement" style={{marginLeft: eq.workOrderId ? '5px' : '0'}}>
                                            <FiInfo size={14} /> Détails
                                        </button>
                                    </td>
                                </tr>
                            ))
                        ) : (
                            <tr>
                                <td colSpan="9" className="no-data-tech">Aucun équipement ne correspond à vos critères.</td>
                            </tr>
                        )}
                    </tbody>
                </table>
            </div>
        </div>
    );
}

export default TechnicianClientEquipmentPage;