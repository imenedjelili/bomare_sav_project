// src/pages/technician/TechnicianDashboardPage.js
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import './TechnicianDashboardPage.css';

function TechnicianDashboardPage() {
    const [technicianInfo, setTechnicianInfo] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    // Placeholder for stats/data that would need specific queries
    const [workOrderStats, setWorkOrderStats] = useState({
        completedToday: 0,
        pending: 0,
        overdue: 0,
        newToday: 0,
        highPriority: 0,
        averageResolutionTime: 'N/A',
    });

    const [equipmentTypesData, setEquipmentTypesData] = useState([
        { type: 'Téléviseurs', count: 0, color: 'var(--accent-color)' },
        { type: 'Smartphones', count: 0, color: 'var(--secondary-accent-color)' },
        { type: 'Audio', count: 0, color: 'var(--pending-status-generic-bg)' },
        { type: 'Autres', count: 0, color: 'var(--card-bg-lighter)' },
    ]);
    // Ensure totalEquipment is calculated based on the state
    const totalEquipment = equipmentTypesData.reduce((sum, item) => sum + item.count, 0);


    const [nextWorkOrder, setNextWorkOrder] = useState(null);
    const [partsStatus, setPartsStatus] = useState(null);


    const navigate = useNavigate();

    useEffect(() => {
        let isMounted = true; // Cleanup flag

        async function fetchTechnicianData() {
            if (!isMounted) return;
            setIsLoading(true);
            setError(null); // Clear previous errors

            const { data: { user }, error: userError } = await supabase.auth.getUser();

            if (userError || !user) {
                if(isMounted) {
                   console.error("No authenticated user found for dashboard, redirecting to login:", userError);
                   navigate('/login', { replace: true, state: { message: 'Veuillez vous connecter pour accéder au tableau de bord.' } });
                }
                setIsLoading(false); // Ensure loading is false before exiting
                return; // Stop execution if no user or component unmounted
            }

            console.log("Fetching data for user ID:", user.id);

            // --- Fetch Basic User Data from 'Users' table ---
            // This should be reliable if the user is authenticated via auth.users
            let userData = null;
            try {
                 const { data, error: userFetchError } = await supabase
                    .from('Users') // Assuming public.Users table
                    .select('first_name, last_name, email, role')
                    .eq('id', user.id) // User ID matches the 'id' column in Users table
                    .single();

                if (userFetchError) {
                    console.error("Error fetching user basic data:", userFetchError);
                     // Set a basic error message if user data couldn't be fetched
                     setError('Erreur lors du chargement de vos informations de base.');
                } else {
                    userData = data;
                }
            } catch (err) {
                 console.error("Unexpected error fetching user basic data:", err);
                 setError('Une erreur inattendue est survenue lors du chargement de vos informations de base.');
            }


            // --- Fetch Technician Profile Data from 'technician_profile' table ---
            let technicianProfileData = null;
            let techProfileError = null; // Declare variable for tech profile error

            try {
                 const { data, error: techErr } = await supabase
                    .from('technician_profile')
                    .select('*')
                    // CORRECTED LINE: Use the correct column name (technician_id) which is UUID
                    .eq('technician_id', user.id) // <-- Use 'technician_id' here
                    .single(); // Expecting only one result

                 if (techErr) {
                    // Check specifically for the "no rows found" error code
                    if (techErr.code === 'PGRST116') {
                         console.warn("No technician profile found for user ID:", user.id);
                         // Profile not found is not a critical error preventing page load,
                         // we'll use default/empty values for profile-specific fields.
                         techProfileError = { message: "Votre profil technicien n'a pas été trouvé." }; // Set a specific user-friendly message
                    } else {
                         console.error("Error fetching technician profile data:", techErr);
                         techProfileError = techErr; // Store other types of errors
                         // Combine the error with any previous error message
                         setError(prevErr => prevErr ? prevErr + " Erreur profil: " + techErr.message : "Erreur lors du chargement de votre profil technicien: " + techErr.message);
                    }
                 } else {
                     technicianProfileData = data; // Profile found, set the data
                 }

            } catch (err) {
                 console.error("Unexpected error fetching technician profile:", err);
                 techProfileError = err;
                 setError(prevErr => prevErr ? prevErr + " Erreur profil inattendue: " + (err.message || err) : "Erreur inattendue lors du chargement du profil technicien: " + (err.message || err));
            }


            // --- Consolidate Fetched Data and Set State ---
            // Always create a technicianInfo object, even if some fetches failed,
            // so the component can render with partial/default data.
            const currentTechnicianInfo = {
                id: user.id,
                email: user.email,
                // Use data from 'Users' if available, fallback to auth user email
                name: `${userData?.first_name || ''} ${userData?.last_name || ''}`.trim() || user.email,
                role: userData?.role || 'Technicien', // Use role from 'Users' if available
                created_at: user.created_at, // From auth.users metadata

                // Use data from 'technician_profile' if available, fallback to empty/defaults
                // We check if technicianProfileData is not null (meaning the fetch was successful and a row was found)
                technician_id: technicianProfileData?.technician_id || null, // Should match user.id if found
                tagline: technicianProfileData?.tagline || '',
                bio: technicianProfileData?.bio || '',
                location: technicianProfileData?.location || '',
                // Ensure skills is a string, handle potential null/non-string from DB
                skills: typeof technicianProfileData?.skills === 'string' ? technicianProfileData.skills : '',
                avatarUrl: technicianProfileData?.avatarUrl || null,
                isOnline: technicianProfileData?.isOnline || false,
                performanceSummary: technicianProfileData?.performanceSummary || {}, // Ensure it's an object
                connections: [], // This array is not populated from here for colleague listing
            };

            setTechnicianInfo(currentTechnicianInfo);


            // --- Placeholder: Fetch actual work order and equipment data ---
            // These still use placeholder data but would eventually use Supabase queries
            // that might rely on user.id or safeTechnicianData.technician_id if the profile existed.
            // ... keep your placeholder updates ...
            if (isMounted) { // Update state only if mounted
               setWorkOrderStats({
                   completedToday: 5, // Replace with fetched/calculated data
                   pending: 12,      // Replace
                   overdue: 2,       // Replace
                   newToday: 3,      // Replace
                   highPriority: 4,  // Replace
                   averageResolutionTime: '4.5h', // Replace
               });

               setEquipmentTypesData([ // Replace with fetched/aggregated data
                   { type: 'Téléviseurs', count: 45, color: 'var(--accent-color)' },
                   { type: 'Smartphones', count: 30, color: 'var(--secondary-accent-color)' },
                   { type: 'Audio', count: 15, color: 'var(--pending-status-generic-bg)' },
                   { type: 'Autres', count: 10, color: 'var(--card-bg-lighter)' },
               ]);

               setNextWorkOrder({ // Replace with fetched data for next task
                  title: 'TV Modèle Z - Pas de Son',
                  client: 'Ali B.',
                  time: '10:00 - Aujourd\'hui',
                  link: '/technician/work-orders/next' // Example link
               });

              setPartsStatus({ // Replace with fetched data for parts status
                  count: 2,
                  link: '/technician/parts-status' // Example link
              });
            }
            // ... end placeholder updates ...


            setIsLoading(false); // Mark main profile loading complete

        }

        fetchTechnicianData();

        // Cleanup function
        return () => {
            isMounted = false;
        };

    }, [navigate]); // Depend on navigate hook as recommended

    // Show loading state while data is being fetched
    if (isLoading) {
        return (
            <div className="technician-dashboard-page loading-state">
                <div className="page-header">
                    <h1>Chargement du Tableau de Bord...</h1>
                    <p className="text-secondary">Récupération de vos informations...</p>
                     {/* Show error if fetch failed but component is still in loading/initial render state */}
                    {error && !technicianInfo && <div className="auth-message error" style={{margin: '20px auto', maxWidth: '600px'}}>{error}</div>}
                </div>
            </div>
        );
    }

    // Handle case where technicianInfo couldn't be loaded after isLoading is false AND there was a critical error
    // This specific block is for the final error state where minimal/no user info was retrieved.
    // Note: The previous loading block will show the error message *while* loading if it fails.
    // This final block handles the case where loading *finished* with an error and *no* user/tech info was usable.
     if (!technicianInfo && error) {
         return (
            <div className="technician-dashboard-page error-state">
                 <div className="page-header">
                     <h1>Erreur de Chargement</h1>
                     <p className="text-secondary">Impossible d'afficher le tableau de bord.</p>
                 </div>
                 <div className="custom-card auth-message error" style={{ maxWidth: '600px', margin: '20px auto' }}>
                   <p>{error}</p>
                   {/* Offer a retry button or link back to login */}
                    <button onClick={() => window.location.reload()} className="btn btn-secondary" style={{marginTop: '15px', marginRight: '10px'}}>
                        Réessayer
                    </button>
                     <Link to="/login" className="btn btn-primary" style={{marginTop: '15px'}}>Retour à la connexion</Link>
                </div>
            </div>
         );
     }


     // Safely access properties after data is loaded and technicianInfo is guaranteed to be not null here
     const displayTechName = technicianInfo.name || technicianInfo.email || 'Technicien';
     const displayTechRole = technicianInfo.role || 'Rôle Inconnu';


    return (
        <div className="technician-dashboard-page fade-in-up">
            <div className="page-header">
                <h1>Tableau de Bord Technicien</h1>
                <p className="text-secondary">
                    Bienvenue <span style={{color: 'var(--accent-color)'}}>{displayTechName}</span>!
                    Consultez vos indicateurs clés et tâches.
                </p>
                 {/* Display fetch errors here if data partially loaded (e.g., user name but not tech profile) */}
                 {/* Show error only if it exists AND isLoading is false AND technicianInfo IS available (even partially) */}
                 {error && !isLoading && technicianInfo && (
                     <div className="auth-message error" style={{margin: '20px auto', maxWidth: '600px'}}><p>{error}</p></div>
                 )}
            </div>

            <div className="technician-dashboard-container">
                {/* --- Left In-Page Sidebar for Quick Stats/Nav --- */}
                <aside className="technician-dashboard-sidebar">
                    <div className="profile-section">
                        <div className="profile-icon">
                             <span>{displayTechName ? displayTechName.substring(0, 1).toUpperCase() : 'T'}</span>
                        </div>
                        <div className="profile-info">
                             <h3>{displayTechName}</h3>
                             <p>{displayTechRole}</p>
                        </div>
                    </div>
                    <nav className="sidebar-nav">
                        {/* Ensure correct links if needed */}
                        <Link to="/technician/work-orders" className="nav-btn">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M14.7 6.3a1 1 0 000 1.4l1.6 1.6a1 1 0 001.4 0l3.77-3.77a6 6 0 00-7.94 7.94l-6.91 6.91a2.12 2.12 0 01-3-3l6.91-6.91a6 6 0 007.94-7.94l-3.76 3.76z"/></svg>
                            Mes Ordres de Travail
                        </Link>
                         <Link to="/technician/equipment" className="nav-btn">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/></svg>
                            Équipement Client
                        </Link>
                        <Link to="/technician/alerts" className="nav-btn">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M10.29 3.86L1.82 18a2 2 0 001.71 3h16.94a2 2 0 001.71-3L13.71 3.86a2 2 0 00-3.42 0z"/><line x1="12" y1="9" x2="12" y2="13"/><line x1="12" y1="17" x2="12.01" y2="17"/></svg>
                            Alertes Ouvertes
                        </Link>
                         <Link to="/technician/profile" className="nav-btn">
                             <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>
                             Mon Profil
                         </Link>
                    </nav>
                </aside>

                {/* --- Main Content Area of Technician Dashboard --- */}
                <main className="technician-dashboard-main">
                    <div className="info-cards-grid">
                        <div className="info-card-tech">
                            <h3>Nouvelles Tâches Aujourd'hui</h3>
                            <p className="info-value-tech">{workOrderStats.newToday}</p>
                        </div>
                         <div className="info-card-tech">
                            <h3>Haute Priorité</h3>
                            <p className="info-value-tech">{workOrderStats.highPriority}</p>
                        </div>
                         <div className="info-card-tech">
                            <h3>Tâches en Retard</h3>
                            <p className="info-value-tech" style={{color: 'var(--expired-status-color)'}}>{workOrderStats.overdue}</p>
                        </div>
                        <div className="info-card-tech">
                            <h3>Résolution Moy.</h3>
                            <p className="info-value-tech">{workOrderStats.averageResolutionTime}</p>
                        </div>
                    </div>

                    <div className="charts-row">
                        <div className="chart-container-tech">
                            <div className="chart-card-tech">
                                <h3>Activité des Ordres de Travail (7 derniers jours)</h3>
                                <div className="chart-placeholder-tech">
                                     {/* Placeholder for chart - using dummy data structure */}
                                    <div className="chart-bars-tech">
                                        {/* Create some dummy bars based on placeholder stats for visual */}
                                        {Object.values(workOrderStats).slice(0,6).map((value, index) => (
                                            <div
                                                key={index} // Use index for key if data is not unique/stable
                                                className="chart-bar-tech"
                                                style={{ height: `${Math.min((typeof value === 'number' ? value : 0) * 8, 100)}%` }} // Example scaling numbers, ensure value is number
                                                title={`Jour ${index + 1}: ${value} tâches`} // Simpler title for dummy bars
                                            ></div>
                                        ))}
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div className="pie-chart-container-tech">
                            <div className="pie-chart-card-tech">
                                <h3>Répartition par Type d'Équipement</h3>
                                <div className="pie-chart-tech" style={{
                                    background: `conic-gradient(
                                        ${equipmentTypesData.map(item =>
                                            `${item.color} 0 ${(item.count / (totalEquipment || 1)) * 100}%` // Avoid division by zero
                                        ).join(', ')}
                                    )`
                                }}>
                                </div>
                                <div className="pie-legend-tech">
                                    {equipmentTypesData.map(item => (
                                    <div className="legend-item-tech" key={item.type}>
                                        <span className="legend-color-tech" style={{ backgroundColor: item.color }}></span>
                                        <span>{item.type} ({item.count})</span>
                                    </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                    </div>
                </main>

                {/* Right Panel for additional quick info or upcoming tasks */}
                <aside className="technician-dashboard-right-panel">
                     {/* Display next task if available */}
                     {nextWorkOrder && (
                         <div className="info-box-tech">
                             <h3>Prochain Ordre de Travail</h3>
                             <p className="info-value-tech" style={{fontSize: '1.1rem', color: 'var(--text-color)'}}>{nextWorkOrder.title}</p>
                             <p className="text-secondary" style={{fontSize: '0.85rem'}}>Client: {nextWorkOrder.client}</p>
                             <p className="text-secondary" style={{fontSize: '0.85rem'}}>{nextWorkOrder.time}</p>
                             {nextWorkOrder.link && <Link to={nextWorkOrder.link} className="link-details">Voir détails</Link>}
                         </div>
                     )}

                     {/* Display parts status if available */}
                    {partsStatus && (
                         <div className="info-box-tech">
                             <h3>Pièces en Attente</h3>
                            <p className="info-value-tech" style={{fontSize: '1.5rem'}}>{partsStatus.count} Commandes</p>
                             {partsStatus.link && <Link to={partsStatus.link} className="link-details">Suivre les Commandes</Link>}
                         </div>
                    )}
                </aside>
            </div>
        </div>
    );
}

export default TechnicianDashboardPage;