// src/pages/technician/TechnicianAlertsPage.js
import React, { useState, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { FiSearch, FiFilter, FiAlertTriangle, FiEye, FiCheckSquare, FiInfo } from 'react-icons/fi';
import './TechnicianAlertsPage.css'; // To be created
// Assuming TechnicianWorkOrdersPage.css contains shared styles
import './TechnicianWorkOrdersPage.css'; 


const initialAlerts = [
    { id: 'A-302', description: 'Pièce manquante critique pour TV Z', severity: 'Élevé', workOrderId: '4587', date: '20/05/2025', status: 'Ouverte' },
    { id: 'A-298', description: 'Client insatisfait - intervention répétée', severity: 'Moyen', workOrderId: '4552', date: '19/05/2025', status: 'Ouverte' },
    { id: 'A-301', description: 'Équipement hors garantie - intervention à valider', severity: 'Faible', workOrderId: '4561', date: '19/05/2025', status: 'Reconnue' },
    { id: 'A-305', description: 'Délai de réparation potentiellement dépassé pour Smartphone X', severity: 'Moyen', workOrderId: '4590', date: '21/05/2025', status: 'Ouverte' },
    { id: 'A-306', description: 'Stock de pièces de rechange bas pour modèle Y', severity: 'Faible', workOrderId: null, date: '22/05/2025', status: 'Résolue' },
];

const getSeverityClass = (severity) => {
    switch (severity.toLowerCase()) {
        case 'élevé': return 'severity-high';
        case 'moyen': return 'severity-medium';
        case 'faible': return 'severity-low';
        default: return 'severity-unknown';
    }
};

const getAlertStatusClass = (status) => {
    switch (status.toLowerCase()) {
        case 'ouverte': return 'status-alert-open'; /* Custom name */
        case 'reconnue': return 'status-alert-acknowledged'; /* Custom name */
        case 'résolue': return 'status-alert-resolved'; /* Custom name */
        default: return 'status-unknown';
    }
};


function TechnicianAlertsPage() {
    const [alerts, setAlerts] = useState(initialAlerts);
    const [searchTerm, setSearchTerm] = useState('');
    const [filters, setFilters] = useState({
        severity: '',
        status: '',
    });

    const handleAcknowledge = (alertId) => {
        console.log(`Acknowledge alert: ${alertId}`);
        setAlerts(prevAlerts => 
            prevAlerts.map(alert => 
                alert.id === alertId && alert.status === 'Ouverte' ? { ...alert, status: 'Reconnue' } : alert
            )
        );
    };

    const handleResolve = (alertId) => {
        console.log(`Resolve alert: ${alertId}`);
         setAlerts(prevAlerts => 
            prevAlerts.map(alert => 
                alert.id === alertId && (alert.status === 'Ouverte' || alert.status === 'Reconnue') 
                ? { ...alert, status: 'Résolue' } 
                : alert
            )
        );
    };

    const filteredAlerts = useMemo(() => {
        return alerts.filter(alert => {
            const searchMatch = searchTerm === '' ||
                alert.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
                alert.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                (alert.workOrderId && alert.workOrderId.toLowerCase().includes(searchTerm.toLowerCase()));
            
            const severityMatch = filters.severity === '' || alert.severity === filters.severity;
            const statusMatch = filters.status === '' || alert.status === filters.status;

            return searchMatch && severityMatch && statusMatch;
        });
    }, [alerts, searchTerm, filters]);

    const uniqueSeverities = useMemo(() => Array.from(new Set(initialAlerts.map(a => a.severity))), [initialAlerts]);
    const uniqueStatuses = useMemo(() => Array.from(new Set(initialAlerts.map(a => a.status))), [initialAlerts]);

    return (
        <div className="technician-alerts-page fade-in-up">
            <div className="page-header">
                <h1>Alertes Ouvertes et Actives</h1>
                <p className="text-secondary">Suivi des cas prioritaires et notifications importantes.</p>
            </div>

            <div className="controls-container technician-controls-container">
                <div className="search-box technician-search-box">
                    <FiSearch className="search-icon" />
                    <input
                        type="text"
                        placeholder="Rechercher par ID, description, N° d'ordre..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                    />
                </div>
                <div className="filters-box technician-filters-box">
                    <FiFilter className="filter-icon-main" />
                    <span>Filtres :</span>
                    <select value={filters.severity} onChange={(e) => setFilters(prev => ({ ...prev, severity: e.target.value }))}>
                        <option value="">Sévérité (Toutes)</option>
                        {uniqueSeverities.map(sev => <option key={sev} value={sev}>{sev}</option>)}
                    </select>
                    <select value={filters.status} onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}>
                        <option value="">Statut (Tous)</option>
                         {uniqueStatuses.map(stat => <option key={stat} value={stat}>{stat}</option>)}
                    </select>
                </div>
            </div>

            <div className="table-container-tech">
                <table className="responsive-table-tech alerts-table-tech">
                    <thead>
                        <tr>
                            <th>ID Alerte</th>
                            <th>Description</th>
                            <th>Niveau</th>
                            <th>Lien Ordre</th>
                            <th>Date</th>
                            <th>Statut</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {filteredAlerts.length > 0 ? (
                            filteredAlerts.map(alert => (
                                <tr key={alert.id} className={`severity-row-${alert.severity.toLowerCase()}`}>
                                    <td data-label="ID Alerte">{alert.id}</td>
                                    <td data-label="Description">{alert.description}</td>
                                    <td data-label="Niveau">
                                        <span className={`severity-indicator-badge ${getSeverityClass(alert.severity)}`}>
                                            <FiAlertTriangle size={14} /> {alert.severity}
                                        </span>
                                    </td>
                                    <td data-label="Lien Ordre">
                                        {alert.workOrderId ? (
                                            <Link to={`/technician/work-orders/${alert.workOrderId}`} className="table-link-tech">
                                                {alert.workOrderId}
                                            </Link>
                                        ) : (
                                            'N/A'
                                        )}
                                    </td>
                                    <td data-label="Date">{alert.date}</td>
                                    <td data-label="Statut">
                                         <span className={`status-badge ${getAlertStatusClass(alert.status)}`}>
                                            {alert.status}
                                        </span>
                                    </td>
                                    <td data-label="Actions" className="actions-cell-tech">
                                        {alert.status === 'Ouverte' && (
                                            <button onClick={() => handleAcknowledge(alert.id)} className="btn btn-sm btn-secondary">
                                                <FiEye size={14}/> Reconnaître
                                            </button>
                                        )}
                                        {(alert.status === 'Ouverte' || alert.status === 'Reconnue') && (
                                            <button onClick={() => handleResolve(alert.id)} className="btn btn-sm btn-primary" style={{marginLeft: alert.status === 'Ouverte' ? '5px' : '0'}}>
                                               <FiCheckSquare size={14}/> Résoudre
                                            </button>
                                        )}
                                         {alert.status === 'Résolue' && (
                                            <span className="status-text-resolved"><FiCheckSquare size={14}/> Résolue</span>
                                        )}
                                    </td>
                                </tr>
                            ))
                        ) : (
                             <tr>
                                <td colSpan="7" className="no-data-tech">Aucune alerte ne correspond à vos critères.</td>
                            </tr>
                        )}
                    </tbody>
                </table>
            </div>
        </div>
    );
}

export default TechnicianAlertsPage;