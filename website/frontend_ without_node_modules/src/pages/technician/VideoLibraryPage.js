// src/pages/technician/VideoLibraryPage.js
import React, { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import './VideoLibraryPage.css';
import { BeatLoader } from 'react-spinners'; // Assuming you have react-spinners installed


const DEFAULT_PLACEHOLDER_IMAGE = '/assets/images/profile-placeholder.png';

const VideoCard = ({ video }) => {
  const [isBookmarked, setIsBookmarked] = useState(false);

  const handleBookmarkClick = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsBookmarked(!isBookmarked);
    console.log(`Bookmark toggled for video ${video.id}: ${!isBookmarked}`);
  };

  const displayTags = useMemo(() => {
      return video.videos_video_tags
          ?.map(link => link.tag_id?.name)
          .filter(name => name && !["HOW TO VIDEO", "CYCLING", "TV TECH", "BOOTCAMP", "BOMARE"].includes(name.toUpperCase()))
          || [];
  }, [video.videos_video_tags]);


  return (
    <Link to={`/technician/videos/${video.id}`} className="video-card-link">
      <div className="technician-video-card">
        <div className="technician-video-thumbnail-container">
          <img
            src={video.thumbnail || DEFAULT_PLACEHOLDER_IMAGE}
            alt={video.title || 'Video thumbnail'}
            className="technician-video-thumbnail"
            onError={(e) => { e.target.onerror = null; e.target.src = DEFAULT_PLACEHOLDER_IMAGE; }}
          />
          <div className="technician-thumbnail-overlay">
            {video.url && video.duration_seconds !== null && video.duration_seconds !== undefined && (
               <div className="technician-overlay-duration">{formatDuration(video.duration_seconds)}</div>
            )}
            <div className="technician-overlay-details">
              <div className="technician-overlay-title">{video.title}</div>
              {video.level && <div className="technician-overlay-level">{video.level}</div>}
            </div>
            <button
                className={`technician-bookmark-icon ${isBookmarked ? 'bookmarked' : ''}`}
                onClick={handleBookmarkClick}
                title={isBookmarked ? 'Retirer des favoris' : 'Ajouter aux favoris'}
                aria-label={isBookmarked ? 'Retirer des favoris' : 'Ajouter aux favoris'}
            >
                {isBookmarked ? '★' : '☆'}
            </button>
          </div>
        </div>
        {displayTags.length > 0 && (
             <div className="technician-video-tags-bar">
                 {displayTags.slice(0, 2).map(tag => <span key={tag} className="technician-tag-item">{tag}</span>)}
                 {displayTags.length > 2 && <span className="technician-tag-item">...</span>}
             </div>
         )}
      </div>
    </Link>
  );
};

const formatDuration = (seconds) => {
  if (typeof seconds !== 'number' || isNaN(seconds) || seconds < 0) return 'N/A';
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = Math.floor(seconds % 60);
  const paddedSeconds = remainingSeconds < 10 ? `0${remainingSeconds}` : remainingSeconds;
  return `${minutes}:${paddedSeconds}`;
};


function VideoLibraryPage() {
    const [videos, setVideos] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    const videosToDisplay = useMemo(() => videos || [], [videos]);

    useEffect(() => {
        let isMounted = true;

        async function fetchVideos() {
            if (!isMounted) return;
            setIsLoading(true);
            setError(null);

            try {
                const { data, error: fetchError } = await supabase // Renamed 'error' to 'fetchError'
                    .from('videos')
                    .select('*, videos_video_tags(tag_id(name))');

                if (!isMounted) return;

                if (fetchError) {
                    console.error("Error fetching videos:", fetchError);
                    setError("Erreur lors du chargement des vidéos : " + fetchError.message);
                } else {
                    console.log("Fetched videos:", data);
                    setVideos(data || []);
                }

            } catch (err) {
                 if (!isMounted) return;
                 console.error("Unexpected error fetching videos:", err);
                 setError("Une erreur inattendue est survenue : " + (err.message || err));
            } finally {
                if (isMounted) {
                    setIsLoading(false);
                }
            }
        }

        fetchVideos();

        return () => {
            isMounted = false;
        };

    }, []);


    if (isLoading) {
        return (
            <div className="technician-video-library-page loading-state" style={{textAlign: 'center', paddingTop: '100px', color: 'var(--text-color)'}}>
                 <div className="page-header" style={{marginBottom: '20px'}}>
                     <h1>Chargement de la Vidéothèque...</h1>
                 </div>
                 <BeatLoader color="var(--accent-color)" loading={isLoading} size={15} />
                 <p className="text-secondary" style={{marginTop: '15px'}}>Récupération des vidéos disponibles.</p>
                 {error && !videosToDisplay.length && (
                     <div className="auth-message error" style={{margin: '20px auto', maxWidth: '600px'}}>{error}</div>
                 )}
            </div>
        );
    }

     if (error && !videosToDisplay.length) {
         return (
            <div className="technician-video-library-page error-state" style={{textAlign: 'center', paddingTop: '100px'}}>
                <div className="page-header" style={{marginBottom: '20px'}}>
                    <h1>Erreur de Chargement</h1>
                    <p className="text-secondary">Impossible d'afficher la vidéothèque.</p>
                </div>
                 <div className="custom-card auth-message error" style={{ maxWidth: '600px', margin: '20px auto', padding: '20px' }}>
                   <p>{error}</p>
                   <button onClick={() => window.location.reload()} className="btn btn-secondary" style={{marginTop: '15px', marginRight: '10px'}}>
                        Réessayer
                   </button>
                     <Link to="/technician/videos" className="btn btn-primary" style={{marginTop: '15px'}}>Retour à la Vidéothèque</Link>
               </div>
            </div>
         );
     }


    return (
        <div className="technician-video-library-page fade-in-up">
            <div className="page-header">
                <h1>Vidéothèque Technique</h1>
                <p className="text-secondary">Tutoriels, guides de réparation et formations pour techniciens BOMARE.</p>
                {error && videosToDisplay.length > 0 && ( // Show error if some videos loaded but there was still an error
                     <div className="auth-message error" style={{margin: '20px auto', maxWidth: '600px'}}><p>{error}</p></div>
                 )}
            </div>

            {videosToDisplay.length > 0 ? (
                <div className="technician-video-grid">
                    {videosToDisplay.map((videoEntry) => (
                        <VideoCard key={videoEntry.id} video={videoEntry} />
                    ))}
                </div>
            ) : !isLoading && !error ? ( // Only show if not loading and no error, but no videos
                <div className="custom-card no-videos-message" style={{maxWidth: '600px', margin: '40px auto', padding: '30px', textAlign: 'center'}}>
                    <p className="text-secondary">Aucune vidéo ou ressource disponible pour le moment dans la vidéothèque.</p>
                </div>
            ) : null }
        </div>
    );
}

export default VideoLibraryPage;