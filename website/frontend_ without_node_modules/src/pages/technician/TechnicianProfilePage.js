// src/pages/technician/TechnicianProfilePage.js
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import {
    FiUser,
    FiMapPin,
    FiCalendar,
    FiTool,
    FiUsers,
    FiSettings
} from 'react-icons/fi';
import { supabase } from '../../supabaseClient';
import './TechnicianProfilePage.css';
import { BeatLoader } from 'react-spinners'; // Assuming you have react-spinners installed for loading

function TechnicianProfilePage() {
    // *** START: React Hooks MUST be declared unconditionally at the top level ***
    const [technicianData, setTechnicianData] = useState(null); // Current user's profile data
    const [allTechnicians, setAllTechnicians] = useState([]); // State for the list of all technicians
    const [isLoading, setIsLoading] = useState(true); // Overall loading state for the main profile
    const [isLoadingAllTechnicians, setIsLoadingAllTechnicians] = useState(true); // Loading state for the colleagues list
    const [error, setError] = useState(null); // Overall error state for the main profile
    const [allTechniciansError, setAllTechniciansError] = useState(null); // Error state for the colleagues list
    const [activeTab, setActiveTab] = useState('overview');

    // States for Editable Profile Fields (Initial values set from technicianData on fetch)
    const [editingLocation, setEditingLocation] = useState('');
    const [editingBio, setEditingBio] = useState('');
    const [editingTagline, setEditingTagline] = useState('');
    const [skillTextInput, setSkillTextInput] = useState(''); // State for the textarea value for skills

    // States for Saving Profile
    const [isSavingProfile, setIsSavingProfile] = useState(false); // Combined save state
    const [profileSaveError, setProfileSaveError] = useState(null); // Combined save error


    const navigate = useNavigate();
    // *** END: React Hooks MUST be declared unconditionally at the top level ***


    // Fetch data on component mount
    useEffect(() => {
        async function fetchUserProfile() {
            setIsLoading(true);
            setError(null); // Clear previous errors

            const { data: { user }, error: userError } = await supabase.auth.getUser();

            if (userError || !user) {
                console.error("No authenticated user found for profile, redirecting to login:", userError);
                 // Delay navigation slightly to allow state update if necessary, though auth redirect should handle it
                 setTimeout(() => {
                    navigate('/login', { replace: true, state: { message: 'Veuillez vous connecter pour voir votre profil.' } });
                 }, 50);
                setIsLoading(false); // Ensure loading is false before exiting
                return; // Stop execution if no user
            }

            console.log("Fetching profile for user ID:", user.id);

            // --- Fetch Current User's Data from 'Users' table ---
            // This should always work if the user is authenticated via auth.users
            let userData = null;
            try {
                 const { data, error: userFetchError } = await supabase
                    .from('Users') // Assuming public.Users table
                    .select('first_name, last_name, email, role')
                    .eq('id', user.id) // User ID matches the 'id' column in Users table
                    .single();

                if (userFetchError) {
                    console.error("Error fetching user basic data:", userFetchError);
                    // Log but proceed to try and fetch profile data, might still get partial info
                     setError('Erreur lors du chargement de vos informations de base.');
                } else {
                    userData = data;
                }
            } catch (err) {
                 console.error("Unexpected error fetching user basic data:", err);
                 setError('Une erreur inattendue est survenue lors du chargement de vos informations de base.');
            }


            // --- Fetch Current User's Data from 'technician_profile' table ---
            let technicianProfileData = null;
            let techProfileError = null; // Declare variable for tech profile error

            try {
                 const { data, error: techErr } = await supabase
                    .from('technician_profile')
                    .select('technician_id, tagline, bio, location, skills, avatarUrl, isOnline, performanceSummary')
                    .eq('technician_id', user.id) // Use 'technician_id' column which should be UUID
                    .single();

                 if (techErr) {
                    // Check specifically for the "no rows found" error code
                    if (techErr.code === 'PGRST116') {
                         console.warn("No technician profile found for user ID:", user.id);
                         // Profile not found is not a critical error preventing page load,
                         // we'll use default/empty values for profile-specific fields.
                         techProfileError = { message: "Profil technicien non trouvé. Veuillez compléter vos informations." }; // Set a specific message for the user
                    } else {
                         console.error("Error fetching technician profile data:", techErr);
                         techProfileError = techErr; // Store other types of errors
                         setError(prevErr => prevErr ? prevErr + " Erreur profil: " + techErr.message : "Erreur lors du chargement de votre profil technicien: " + techErr.message); // Combine errors if needed
                    }
                 } else {
                     technicianProfileData = data; // Profile found, set the data
                 }

            } catch (err) {
                 console.error("Unexpected error fetching technician profile:", err);
                 techProfileError = err;
                  setError(prevErr => prevErr ? prevErr + " Erreur profil inattendue: " + (err.message || err) : "Erreur inattendue lors du chargement du profil technicien: " + (err.message || err));
            }


            // --- Consolidate Fetched Data and Set State ---
            // Always create a technicianData object, even if some fetches failed,
            // so the component can render with partial/default data.
            const currentTechnicianData = {
                id: user.id,
                email: user.email,
                // Use data from 'Users' if available, fallback to auth user email
                name: `${userData?.first_name || ''} ${userData?.last_name || ''}`.trim() || user.email,
                role: userData?.role || 'Technicien', // Use role from 'Users' if available
                created_at: user.created_at, // From auth.users metadata

                // Use data from 'technician_profile' if available, fallback to empty/defaults
                // We check if technicianProfileData is not null (meaning the fetch was successful)
                technician_id: technicianProfileData?.technician_id || null, // Should match user.id if found
                tagline: technicianProfileData?.tagline || '',
                bio: technicianProfileData?.bio || '',
                location: technicianProfileData?.location || '',
                // Ensure skills is a string, handle potential null/non-string from DB
                skills: typeof technicianProfileData?.skills === 'string' ? technicianProfileData.skills : '',
                avatarUrl: technicianProfileData?.avatarUrl || null,
                isOnline: technicianProfileData?.isOnline || false,
                performanceSummary: technicianProfileData?.performanceSummary || {}, // Ensure it's an object
                connections: [], // This array is not populated from here for colleague listing
            };

            setTechnicianData(currentTechnicianData);

            // Initialize editing states *after* setting technicianData
            setEditingLocation(currentTechnicianData.location);
            setEditingBio(currentTechnicianData.bio);
            setEditingTagline(currentTechnicianData.tagline);
            setSkillTextInput(currentTechnicianData.skills); // Use the processed string value


            // If there was a *specific* tech profile error (like not found), display a message
             if (techProfileError && techProfileError.code === 'PGRST116') {
                 setError(techProfileError.message); // Display the "profile not found" message
             } else if (techProfileError) {
                  // For other tech profile errors, the general error state is already set above
             }


            setIsLoading(false); // Mark main profile loading complete

        }


         // --- Fetch All Technicians Data ---
        async function fetchAllTechnicians() {
             setIsLoadingAllTechnicians(true);
             setAllTechniciansError(null);

             try {
                 // Fetch all users with role 'Technicien' and join their profile data
                 const { data: allTechs, error: fetchError } = await supabase
                     .from('Users')
                     // Select Users fields and nested technician_profile fields via the foreign key relation
                     .select('id, first_name, last_name, email, role, technician_profile(technician_id, tagline, avatarUrl, isOnline, location)')
                     .eq('role', 'Technicien'); // Filter by role

                 if (fetchError) {
                     console.error("Error fetching all technicians:", fetchError);
                     setAllTechniciansError('Erreur lors du chargement de la liste des collègues.');
                     setAllTechnicians([]); // Default to empty array on error
                 } else {
                     console.log("Fetched all technicians:", allTechs);
                     // Map the results to the desired structure, handling potential missing nested profile data
                     const formattedTechnicians = allTechs
                         .map(techUser => {
                             // technician_profile might be null or an empty array if no profile exists for this user
                             const profile = techUser.technician_profile && Array.isArray(techUser.technician_profile) && techUser.technician_profile.length > 0 ? techUser.technician_profile[0] : null;

                             return {
                                 id: techUser.id,
                                 name: `${techUser.first_name || ''} ${techUser.last_name || ''}`.trim() || techUser.email,
                                 role: techUser.role, // Should be 'Technicien' due to filter
                                 avatarUrl: profile ? profile.avatarUrl : null,
                                 isOnline: profile ? profile.isOnline : false,
                                 location: profile ? profile.location : 'Non spécifié',
                                 tagline: profile ? profile.tagline : 'Aucune description de poste',
                             };
                         });
                     setAllTechnicians(formattedTechnicians);
                 }
             } catch (err) {
                 console.error("Unexpected error fetching all technicians:", err);
                 setAllTechniciansError('Une erreur inattendue est survenue lors du chargement des collègues.');
                 setAllTechnicians([]);
             } finally {
                 setIsLoadingAllTechnicians(false);
             }
        }


        // Call both fetch functions
        fetchUserProfile();
        fetchAllTechnicians(); // This fetches all technicians for the Colleagues tab

    }, [supabase, navigate]); // Added supabase and navigate to deps


    // Function to handle saving ALL editable profile fields
    const handleSaveProfile = async () => {
        // Ensure we have the user's ID from the initial fetch
        if (!technicianData?.id) {
            setProfileSaveError("Impossible de sauvegarder : ID utilisateur manquant.");
            return;
        }

        setIsSavingProfile(true);
        setProfileSaveError(null); // Clear previous errors

        try {
             // The 'technician_id' column is the foreign key linking to auth.users.id
             // When updating, we need to find the row based on this 'technician_id'.
             // If a technician_profile row didn't exist initially (PGRST116 error),
             // the first save should INSERT a new row instead of UPDATE.
             // We can check if technicianData already has a technician_id from the DB
             // or if we inferred it from auth.uid when no profile was found.
             // A more robust approach might check if the profile exists before attempting UPDATE.

             // Let's refine this: Attempt UPDATE first. If it fails with PGRST116, then INSERT.

             const updates = {
                 location: editingLocation,
                 bio: editingBio,
                 tagline: editingTagline,
                 skills: skillTextInput,
                 // avatarUrl, isOnline, performanceSummary would likely be updated by other processes or manually by admin
             };

            // Attempt to update the existing row
            const { data: updateData, error: updateError } = await supabase
                .from('technician_profile')
                .update(updates)
                .eq('technician_id', technicianData.id) // Filter by the user's UUID
                .single(); // Use single to get the updated row or error if not found/updated

            if (updateError) {
                 // If the error is 'No rows found' (PGRST116), it means the profile didn't exist.
                 if (updateError.code === 'PGRST116') {
                     console.log("No existing technician profile found for update, attempting insert.");
                     // Add the technician_id to the insert data
                     const newInsertData = { ...updates, technician_id: technicianData.id };
                      // Attempt to insert a new row
                     const { data: insertData, error: insertError } = await supabase
                         .from('technician_profile')
                         .insert([newInsertData])
                         .single(); // Use single to get the inserted row

                     if (insertError) {
                         console.error("Error inserting new technician profile:", insertError);
                         setProfileSaveError('Échec de la création du profil technicien : ' + insertError.message);
                     } else {
                         console.log("New technician profile inserted successfully!", insertData);
                         // Update local state with the newly inserted data
                         setTechnicianData(prevData => ({
                             ...prevData,
                             ...insertData, // Spread the newly inserted fields
                             // The new insert should now include the technician_id
                         }));
                          // Optionally show success message
                         // alert('Profil sauvegardé avec succès !');
                     }
                 } else {
                     // Handle other types of update errors
                     console.error("Error updating technician profile:", updateError);
                     setProfileSaveError('Échec de la sauvegarde du profil : ' + updateError.message);
                 }
            } else {
                console.log("Technician profile updated successfully!", updateData);
                // Update local state with the updated data received from .update().single()
                 setTechnicianData(prevData => ({
                     ...prevData,
                     ...updateData, // Spread the updated fields from the response
                 }));
                 // Optionally show success message
                // alert('Profil sauvegardé avec succès !');
            }

        } catch (err) {
            console.error("Unexpected error during profile save:", err);
            setProfileSaveError('Une erreur inattendue est survenue lors de la sauvegarde.');
        } finally {
            setIsSavingProfile(false);
        }
    };


    // Helper function to render avatar - remains the same
    const renderAvatar = (avatarUrl, name, containerClassName = "default-avatar-container", iconSize = 24) => {
         if (avatarUrl) {
              return <img
                         src={avatarUrl}
                         alt={`${name}`}
                         className="profile-img-tag"
                         onError={(e) => {
                             e.target.onerror = null;
                             e.target.style.display='none';
                             const parent = e.target.parentNode;
                             if(parent) {
                                 const iconPlaceholder = document.createElement('div');
                                 iconPlaceholder.style.cssText = `width: ${iconSize}px; height: ${iconSize}px; display: flex; justify-content: center; align-items: center;`; // Basic styling
                                 iconPlaceholder.className = 'technician-avatar-icon-placeholder fallback-icon'; // Add class for styling
                                 iconPlaceholder.innerHTML = `<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="${iconSize}" width="${iconSize}" xmlns="http://www.w3.org/2000/svg"><path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"></path></svg>`;
                                 parent.appendChild(iconPlaceholder);
                             }
                         }}
                     />;
         }
         return (
             <div className={`${containerClassName} technician-avatar-icon-placeholder`}>
                 <FiUser size={iconSize} />
             </div>
         );
    };

    // Render initial full page loading state (covers fetching user & their profile)
    if (isLoading) {
        return (
             <div className="auth-page-container"> {/* Using a general auth page container for consistency */}
                  <div className="auth-card-two-panel"> {/* Assuming this structure */}
                      <div className="auth-form-panel" style={{ textAlign: 'center' }}>
                          <h1 className="auth-title">Chargement du Profil...</h1>
                           <p className="auth-subtitle">Récupération de vos informations.</p>
                           <div style={{ marginTop: '20px' }}>
                                <BeatLoader color="#007bff" loading={isLoading} size={15} />
                           </div>
                            {/* Display the main error during initial load */}
                           {error && <div className="auth-message error" style={{marginTop: '15px'}}>{error}</div>}
                       </div>
                       <div className="auth-image-panel">
                           <img src="/assets/images/set_pass_pic.jpeg" alt="Illustration Chargement Profil" className="auth-page-image" />
                       </div>
                   </div>
              </div>
        );
    }

    // Handle case where initial user fetch failed and no fallback info is set (shouldn't happen with redirect, but for robustness)
     if (!isLoading && !technicianData) {
         return (
             <div className="technician-profile-page error-state">
                  <div className="page-header">
                      <h1>Erreur de Chargement</h1>
                      <p className="text-secondary">Impossible d'afficher votre profil. Veuillez réessayer ou contacter l'assistance.</p>
                     <button onClick={() => navigate('/login', { replace: true })} className="btn btn-primary" style={{marginTop: '20px'}}>Retour à la connexion</button>
                  </div>
             </div>
         );
     }


     // Define tabs here, *after* conditional returns for loading/error
     const tabs = [
         { id: 'overview', label: 'Aperçu' },
         { id: 'skills', label: 'Compétences' },
         { id: 'colleagues', label: 'Collègues' },
         { id: 'preferences', label: 'Préférences' },
     ];

    // Use a default object structure if some top-level keys might be missing, for safer access
    // This ensures properties accessed in the render function always exist, even if null/undefined
     const safeTechnicianData = technicianData || {
         id: null, // ID could be null if initial fetch failed badly
         name: 'Technicien',
         role: 'Inconnu',
         email: '',
         tagline: '',
         bio: '',
         location: '',
         join_date: null, // If you were storing a separate join_date
         created_at: null, // Use created_at from auth.users
         skills: '',
         avatarUrl: null,
         isOnline: false,
         performanceSummary: {}, // Ensure it's an object
         connections: [], // This array is not populated from the DB fetch anymore for colleague listing
     };


    return (
        <div className="technician-profile-page fade-in-up">
             <div className="page-header">
                <h1>Mon Profil Technicien</h1>
                {/* Display the main error banner if it occurred during initial fetch */}
                {error && <div className="auth-message error">{error}</div>}
            </div>

            <div className="technician-profile-container">
                <div className="technician-profile-header">
                    <div className="technician-profile-avatar">
                        {renderAvatar(safeTechnicianData.avatarUrl, safeTechnicianData.name, 'technician-profile-avatar-placeholder', 50)}
                        {safeTechnicianData.isOnline && <div className="technician-status-indicator online"></div>}
                    </div>
                    <div className="technician-profile-info-main">
                         <h1>{safeTechnicianData.name || safeTechnicianData.email}</h1>
                         <p className="technician-tagline">{editingTagline || safeTechnicianData.tagline || 'Aucune description de poste'}</p> {/* Show editing tagline here */}
                    </div>
                </div>

                <div className="technician-profile-tabs">
                    {tabs.map(tab => (
                        <button
                            key={tab.id}
                            className={`technician-tab-btn ${activeTab === tab.id ? 'active' : ''}`}
                            onClick={() => setActiveTab(tab.id)}
                            aria-pressed={activeTab === tab.id}
                        >
                            {tab.label}
                        </button>
                    ))}
                </div>

                <div className="technician-tab-content">
                    {activeTab === 'overview' && (
                        <div className="technician-overview-section">
                            {/* Editable Tagline */}
                            <div className="technician-info-card">
                                <h3>Votre Description de Poste</h3>
                                <input
                                    type="text"
                                    className="form-input" // Reuse your CSS class for input
                                    value={editingTagline}
                                    onChange={(e) => setEditingTagline(e.target.value)}
                                    placeholder="e.g., Spécialiste Réseaux, Support Technique Niveau 2"
                                    disabled={isSavingProfile}
                                />
                            </div>

                            {/* Editable Bio */}
                            <div className="technician-info-card">
                                <h3>À Propos de Moi (Bio)</h3>
                                <textarea
                                    className="form-textarea" // Reuse your CSS class for textarea
                                    value={editingBio}
                                    onChange={(e) => setEditingBio(e.target.value)}
                                    placeholder="Décrivez-vous brièvement..."
                                    rows="4"
                                     disabled={isSavingProfile}
                                />
                            </div>

                             {/* Editable Location */}
                             <div className="technician-info-card">
                                 <h3>Localisation</h3>
                                 <div className="technician-info-item">
                                     <FiMapPin style={{ marginRight: '8px' }}/>
                                     <input
                                         type="text"
                                         className="form-input" // Reuse your CSS class
                                         value={editingLocation}
                                         onChange={(e) => setEditingLocation(e.target.value)}
                                         placeholder="Ville, Région"
                                         disabled={isSavingProfile}
                                     />
                                 </div>
                                  {/* Keep the join date here as it's user-related, not profile-specific editable data */}
                                 <div className="technician-info-item">
                                     <FiCalendar style={{ marginRight: '8px' }}/>
                                     <span>Membre BOMARE depuis : {safeTechnicianData.created_at ? new Date(safeTechnicianData.created_at).toLocaleDateString() : 'Date inconnue'}</span>
                                 </div>
                             </div>

                            {/* Performance remains static - Use safe access */}
                            <div className="technician-info-card">
                                <h3>Performance (Mois en cours)</h3>
                                <div className="technician-info-item"><strong>Tickets Clôturés :</strong><span>{safeTechnicianData.performanceSummary?.ticketsClosedMonth || 'N/A'}</span></div>
                                <div className="technician-info-item"><strong>Satisfaction Client :</strong><span>{safeTechnicianData.performanceSummary?.customerSatisfaction || 'N/A'}</span></div>
                                <div className="technician-info-item"><strong>Temps Moyen Résolution :</strong><span>{safeTechnicianData.performanceSummary?.averageResolutionTime || 'N/A'}</span></div>
                            </div>

                             {/* Save Button */}
                             <div className="technician-info-card">
                                  <button
                                     onClick={handleSaveProfile}
                                     disabled={isSavingProfile}
                                     className="btn btn-primary technician-save-profile-btn" // Add a specific class
                                     style={{ width: '100%' }} // Make it wider
                                 >
                                     {isSavingProfile ? <BeatLoader size={8} color="#fff" /> : 'Sauvegarder les Modifications'}
                                 </button>
                                 {profileSaveError && <div className="auth-message error" style={{ marginTop: '10px' }}>{profileSaveError}</div>}
                             </div>
                        </div>
                    )}

                    {activeTab === 'skills' && (
                        <div className="technician-skills-section">
                             <h3><FiTool style={{marginRight: '8px'}}/>Mes Compétences (Texte Libre)</h3>

                            <div className="skill-text-edit-container">
                                <textarea
                                    placeholder="Décrivez vos compétences et expertises ici..."
                                    value={skillTextInput}
                                    onChange={(e) => setSkillTextInput(e.target.value)}
                                    disabled={isSavingProfile} // Disable textarea while saving overall profile
                                    className="form-textarea technician-skills-textarea"
                                    rows="6"
                                />
                                {/* Removed the separate save button for skills */}
                            </div>
                             {/* Removed skill-specific error message state and display */}
                        </div>
                    )}

                    {activeTab === 'colleagues' && (
                         <div className="technician-connections-section">
                            <h3><FiUsers style={{marginRight: '8px'}}/>Collègues BOMARE</h3>
                             {/* Display Colleagues Loading or Error state */}
                             {isLoadingAllTechnicians && (
                                 <div style={{ textAlign: 'center', marginTop: '20px' }}>
                                     <BeatLoader color="#007bff" loading={isLoadingAllTechnicians} size={15} />
                                     <p className="text-secondary">Chargement des collègues...</p>
                                 </div>
                             )}
                             {allTechniciansError && (
                                 <div className="auth-message error" style={{ marginTop: '10px' }}>
                                     {allTechniciansError}
                                 </div>
                             )}

                             {/* Render Colleagues List (excluding current user) if data is loaded and no error occurred */}
                             {!isLoadingAllTechnicians && !allTechniciansError ? (
                                <div className="technician-connections-grid">
                                     {/* Filter out the current user */}
                                     {allTechnicians
                                         .filter(tech => tech.id !== safeTechnicianData.id)
                                         .map(tech => (
                                             <div key={tech.id} className="technician-connection-card">
                                                 {/* Pass individual technician's data to renderAvatar */}
                                                 {renderAvatar(tech.avatarUrl, tech.name, 'technician-connection-avatar-placeholder', 30)}
                                                 {tech.isOnline && <div className="technician-status-indicator online technician-connection-status"></div>}
                                                 <h4>{tech.name || tech.email}</h4>
                                                 {/* Using 'Technicien' as the role is filtered by */}
                                                 <p className="text-secondary">{tech.role || 'Technicien'}</p>
                                                 {/* You can add more info like location or a "Contact" button here */}
                                                 <p className="text-secondary text-sm">{tech.location || 'Lieu non spécifié'}</p>
                                                 <button className="btn btn-secondary btn-sm technician-message-btn">
                                                     Contacter
                                                 </button>
                                             </div>
                                        ))}
                                     {/* Handle the specific case where the list is loaded successfully but is empty after filtering */}
                                     {allTechnicians.length > 0 && allTechnicians.filter(tech => tech.id !== safeTechnicianData.id).length === 0 && (
                                          <p className="text-secondary" style={{gridColumn: '1 / -1', textAlign: 'center'}}>Aucun autre technicien trouvé.</p>
                                     )}
                                      {/* Handle the specific case where the initial fetch resulted in an empty list */}
                                      {allTechnicians.length === 0 && (
                                          <p className="text-secondary" style={{gridColumn: '1 / -1', textAlign: 'center'}}>Aucun technicien trouvé dans la base de données.</p>
                                      )}
                                </div>
                             ) : null /* Render nothing if loading or error */ }
                         </div>
                    )}

                    {activeTab === 'preferences' && (
                        <div className="technician-settings-section">
                             <h3><FiSettings style={{marginRight: '8px'}}/>Préférences d'Interface</h3>
                            <div className="technician-settings-card">
                                <div className="technician-setting-item">
                                    <span>Notifications par E-mail pour nouvelles tâches</span>
                                    <label className="technician-switch">
                                        {/* Use safeTechnicianData for defaultChecked, provide fallback */}
                                        <input type="checkbox" defaultChecked={safeTechnicianData.emailNotifications ?? true} disabled />
                                        <span className="technician-slider"></span>
                                    </label>
                                </div>
                                <div className="technician-setting-item">
                                    <span>Activer le Mode Sombre (Thème de l'interface)</span>
                                    <label className="technician-switch">
                                         {/* Use safeTechnicianData for defaultChecked, provide fallback */}
                                        <input type="checkbox" defaultChecked={safeTechnicianData.darkMode ?? false} disabled />
                                        <span className="technician-slider"></span>
                                    </label>
                                </div>
                            </div>
                             {/* Save Button also here, saves all fields */}
                             <div className="technician-info-card" style={{ marginTop: '20px' }}>
                                 <button
                                     onClick={handleSaveProfile}
                                     disabled={isSavingProfile}
                                     className="btn btn-primary technician-save-profile-btn"
                                     style={{ width: '100%' }}
                                 >
                                     {isSavingProfile ? <BeatLoader size={8} color="#fff" /> : 'Sauvegarder les Modifications'}
                                 </button>
                                  {/* Display combined save error */}
                                 {profileSaveError && <div className="auth-message error" style={{ marginTop: '10px' }}>{profileSaveError}</div>}
                             </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}

export default TechnicianProfilePage;