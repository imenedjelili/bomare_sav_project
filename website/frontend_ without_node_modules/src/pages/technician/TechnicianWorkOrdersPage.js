// src/pages/technician/TechnicianWorkOrdersPage.js
import React, { useState, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { FiSearch, FiFilter, FiCalendar, FiAlertCircle, FiCheckCircle, FiTool, FiPlay, FiEdit3, FiEye } from 'react-icons/fi';
import './TechnicianWorkOrdersPage.css'; 

const initialWorkOrders = [
    { id: '4587', equipmentType: 'Téléviseur Z', problem: 'Pas de son', client: 'Ali B.', dateTime: '20/05/2025 - 10:00', status: 'En attente', priority: 'Haute' },
    { id: '4590', equipmentType: 'Smartphone X', problem: 'Écran cassé', client: 'Amine D.', dateTime: '20/05/2025 - 14:00', status: 'En cours', priority: 'Moyenne' },
    { id: '4565', equipmentType: 'Audio S20', problem: 'Grésillement', client: 'Samira A.', dateTime: '19/05/2025 - 13:00', status: 'Terminé', priority: 'Faible' },
    { id: '4591', equipmentType: 'Lave-linge Y', problem: 'Ne démarre pas', client: 'Fatima K.', dateTime: '21/05/2025 - 09:00', status: 'En attente', priority: 'Haute' },
    { id: '4592', equipmentType: 'Réfrigérateur Alpha', problem: 'Fuit de l\'eau', client: 'Karim S.', dateTime: '21/05/2025 - 11:00', status: 'En attente', priority: 'Moyenne' },
    { id: '4593', equipmentType: 'Tablette Android', problem: 'Batterie ne charge pas', client: 'Youssef M.', dateTime: '22/05/2025 - 10:30', status: 'En attente', priority: 'Moyenne' },
    { id: '4594', equipmentType: 'Ordinateur Portable Pro', problem: 'Clavier défectueux', client: 'Nadia L.', dateTime: '22/05/2025 - 15:00', status: 'Annulé', priority: 'Faible' },
];

const getStatusClass = (status) => {
    switch (status.toLowerCase()) {
        case 'en attente': return 'status-pending';
        case 'en cours': return 'status-in-progress';
        case 'terminé': return 'status-completed';
        case 'annulé': return 'status-cancelled';
        default: return 'status-unknown';
    }
};

const getPriorityClass = (priority) => {
    switch (priority.toLowerCase()) {
        case 'haute': return 'priority-high';
        case 'moyenne': return 'priority-medium';
        case 'faible': return 'priority-low';
        default: return 'priority-unknown';
    }
}

function TechnicianWorkOrdersPage() {
    const [workOrders, setWorkOrders] = useState(initialWorkOrders);
    const [searchTerm, setSearchTerm] = useState('');
    const [filters, setFilters] = useState({
        status: '',
        priority: '',
        date: '', // Placeholder for future date filtering
    });

    const handleAction = (orderId, action) => {
        console.log(`Action: ${action} for order: ${orderId}`);
        if (action === 'Démarrer') {
            setWorkOrders(prevOrders =>
                prevOrders.map(order =>
                    order.id === orderId ? { ...order, status: 'En cours' } : order
                )
            );
        } else if (action === 'Terminer') {
             setWorkOrders(prevOrders =>
                prevOrders.map(order =>
                    order.id === orderId ? { ...order, status: 'Terminé' } : order
                )
            );
        }
        // Add other action logic (e.g., navigation, API calls) here
    };

    const filteredWorkOrders = useMemo(() => {
        return workOrders.filter(order => {
            const searchMatch = searchTerm === '' ||
                order.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
                order.client.toLowerCase().includes(searchTerm.toLowerCase()) ||
                order.equipmentType.toLowerCase().includes(searchTerm.toLowerCase()) ||
                order.problem.toLowerCase().includes(searchTerm.toLowerCase());

            const statusMatch = filters.status === '' || order.status === filters.status;
            const priorityMatch = filters.priority === '' || order.priority === filters.priority;
            // const dateMatch = filters.date === '' || (order.dateTime && order.dateTime.split(' - ')[0] === filters.date);


            return searchMatch && statusMatch && priorityMatch;
        });
    }, [workOrders, searchTerm, filters]);
    
    // Placeholder for future dynamic options
    const uniqueStatuses = useMemo(() => Array.from(new Set(initialWorkOrders.map(wo => wo.status))), [initialWorkOrders]);
    const uniquePriorities = useMemo(() => Array.from(new Set(initialWorkOrders.map(wo => wo.priority))), [initialWorkOrders]);


    return (
        <div className="technician-work-orders-page fade-in-up">
            <div className="page-header">
                <h1>Mes Ordres de Travail</h1>
                <p className="text-secondary">Consultez et gérez vos tâches assignées.</p>
            </div>

            <div className="controls-container technician-controls-container">
                <div className="search-box technician-search-box">
                    <FiSearch className="search-icon" />
                    <input
                        type="text"
                        placeholder="Rechercher par N°, client, équipement..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                    />
                </div>
                <div className="filters-box technician-filters-box">
                    <FiFilter className="filter-icon-main" />
                    <span>Filtres :</span>
                    <select value={filters.status} onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}>
                        <option value="">Statut (Tous)</option>
                        {uniqueStatuses.map(status => <option key={status} value={status}>{status}</option>)}
                    </select>
                    <select value={filters.priority} onChange={(e) => setFilters(prev => ({ ...prev, priority: e.target.value }))}>
                        <option value="">Priorité (Toutes)</option>
                         {uniquePriorities.map(prio => <option key={prio} value={prio}>{prio}</option>)}
                    </select>
                    {/* 
                    <input 
                        type="date" 
                        value={filters.date} 
                        onChange={(e) => setFilters(prev => ({...prev, date: e.target.value}))} 
                        title="Filtrer par date de l'intervention"
                    /> 
                    */}
                </div>
            </div>

            <div className="table-container-tech">
                <table className="responsive-table-tech">
                    <thead>
                        <tr>
                            <th>Ordre N°</th>
                            <th>Type d'Équipement</th>
                            <th>Problème</th>
                            <th>Client</th>
                            <th>Date/Heure</th>
                            <th>Priorité</th>
                            <th>Statut</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        {filteredWorkOrders.length > 0 ? (
                            filteredWorkOrders.map(order => (
                                <tr key={order.id}>
                                    <td data-label="Ordre N°">{order.id}</td>
                                    <td data-label="Type d'Équipement"><FiTool className="inline-icon"/> {order.equipmentType}</td>
                                    <td data-label="Problème">{order.problem}</td>
                                    <td data-label="Client">{order.client}</td>
                                    <td data-label="Date/Heure"><FiCalendar className="inline-icon"/> {order.dateTime}</td>
                                    <td data-label="Priorité">
                                        <span className={`priority-indicator ${getPriorityClass(order.priority)}`}>
                                            {/* <FiAlertCircle size={14}/> */} {order.priority}
                                        </span>
                                    </td>
                                    <td data-label="Statut">
                                        <span className={`status-badge ${getStatusClass(order.status)}`}>
                                            {order.status === 'Terminé' ? <FiCheckCircle size={14}/> : order.status === 'En attente' ? <FiAlertCircle size={14}/> : <FiTool size={14}/>}
                                            {order.status}
                                        </span>
                                    </td>
                                    <td data-label="Action" className="actions-cell-tech">
                                        {order.status === 'En attente' && (
                                            <button onClick={() => handleAction(order.id, 'Démarrer')} className="btn btn-sm btn-primary">
                                                <FiPlay size={14}/> Démarrer
                                            </button>
                                        )}
                                        {order.status === 'En cours' && (
                                            <button onClick={() => handleAction(order.id, 'Terminer')} className="btn btn-sm btn-success"> {/* Changed to success for clearer state change */}
                                                <FiCheckCircle size={14}/> Terminer
                                            </button>
                                        )}
                                        {order.status === 'Terminé' && (
                                            <Link to={`/technician/work-orders/report/${order.id}`} className="btn btn-sm btn-outline" title="Consulter le rapport">
                                                <FiEye size={14}/> Consulter
                                            </Link>
                                        )}
                                        {order.status === 'Annulé' && (
                                            <span className="text-secondary" style={{fontSize: '0.85rem'}}>Annulé</span>
                                        )}
                                    </td>
                                </tr>
                            ))
                        ) : (
                            <tr>
                                <td colSpan="8" className="no-data-tech">Aucun ordre de travail ne correspond à vos critères.</td>
                            </tr>
                        )}
                    </tbody>
                </table>
            </div>
        </div>
    );
}

export default TechnicianWorkOrdersPage;