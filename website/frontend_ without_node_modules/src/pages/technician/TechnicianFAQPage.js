// src/pages/technician/TechnicianFAQPage.js
import React, { useState, useEffect, useMemo } from 'react'; // Import useState, useEffect, useMemo
import { supabase } from '../../supabaseClient'; // Import supabase client
import './TechnicianFAQPage.css'; 

// Remove hardcoded data
// const techCategories = [ 'Installation', 'Troubleshooting', 'Maintenance', 'Parts', 'Software Updates'];
// const techFaqs = [ ... ];


export default function TechnicianFAQPage() {
  const [faqs, setFaqs] = useState([]); // State to hold all fetched FAQs
  const [categories, setCategories] = useState([]); // State to hold unique categories
  const [selectedCategory, setSelectedCategory] = useState(null); // State for selected category
  const [openIndex, setOpenIndex] = useState(null); // State for open question index

  const [isLoading, setIsLoading] = useState(true); // Loading state
  const [error, setError] = useState(null); // Error state


  useEffect(() => {
    let isMounted = true; // Cleanup flag

    async function fetchFaqs() {
        if (!isMounted) return; // Check if component is still mounted
        setIsLoading(true);
        setError(null);
        setFaqs([]); // Clear previous data
        setCategories([]); // Clear previous categories
        setSelectedCategory(null); // Reset selected category

        try {
            // Fetch all FAQs from the 'faqs' table
            const { data, error } = await supabase
                .from('faqs') // <-- Use your table name 'faqs'
                .select('*'); // Select all columns

            if (!isMounted) return; // Check again before setting state

            if (error) {
                console.error("Error fetching FAQs:", error);
                setError("Erreur lors du chargement des FAQs : " + error.message);
            } else {
                console.log("Fetched FAQs:", data);
                setFaqs(data || []); // Set the fetched data, default to empty array if null

                // Extract unique categories from the fetched data
                const uniqueCategories = [...new Set((data || []).map(faq => faq.category))];
                setCategories(uniqueCategories);

                // Set the initial selected category to the first one found (if any)
                if (uniqueCategories.length > 0) {
                    setSelectedCategory(uniqueCategories[0]);
                }
            }

        } catch (err) { // Catch unexpected errors
             if (!isMounted) return;
             console.error("Unexpected error fetching FAQs:", err);
             setError("Une erreur inattendue est survenue : " + (err.message || err));
        } finally {
            if (isMounted) { // Ensure loading state is turned off
                setIsLoading(false);
            }
        }
    }

    fetchFaqs();

    // Cleanup function
    return () => {
        isMounted = false;
    };

  }, []); // Empty dependency array means this effect runs only once on mount


  // Use useMemo to filter FAQs based on the selected category
  // This prevents re-filtering unless 'faqs' or 'selectedCategory' change
  const filteredFaqs = useMemo(() => {
    if (!selectedCategory) return [];
    return faqs.filter(faq => faq.category === selectedCategory);
  }, [faqs, selectedCategory]);


  // Handle category selection - Reset openIndex when category changes
  const handleCategorySelect = (category) => {
    setSelectedCategory(category);
    setOpenIndex(null); // Close any open question when category changes
  };

  // Handle question click - Toggle open state
  const handleQuestionClick = (index) => {
    setOpenIndex(openIndex === index ? null : index);
  };


  // --- Loading State ---
  if (isLoading) {
      return (
           <div className="technician-faq-page loading-state" style={{textAlign: 'center', paddingTop: '100px'}}>
               <div className="page-header" style={{marginBottom: '20px'}}>
                   <h1>Chargement de la FAQ...</h1>
                   <p className="text-secondary">Récupération des questions et réponses fréquentes.</p>
                </div>
               {error && !faqs.length && ( // Show initial errors if no data loaded
                   <div className="auth-message error" style={{margin: '20px auto', maxWidth: '600px'}}>{error}</div>
               )}
               {/* Add a spinner graphic here */}
           </div>
      );
  }

  // --- Error State after loading finishes with no data ---
   if (error && !faqs.length) {
      return (
          <div className="technician-faq-page error-state" style={{textAlign: 'center', paddingTop: '100px'}}>
               <div className="page-header" style={{marginBottom: '20px'}}>
                   <h1>Erreur de Chargement</h1>
                   <p className="text-secondary">Impossible d'afficher la FAQ.</p>
               </div>
               <div className="custom-card auth-message error" style={{ maxWidth: '600px', margin: '20px auto' }}>
                 <p>{error}</p>
                  <button onClick={() => window.location.reload()} className="btn btn-secondary" style={{marginTop: '15px'}}>
                       Réessayer
                  </button>
              </div>
           </div>
      );
   }


  return (
    <div className="technician-faq-page fade-in-up">
      <div className="page-header">
        <h1>FAQ Technicien</h1>
        <p className="text-secondary">Réponses aux questions techniques courantes.</p>
        {/* Show runtime errors if some data loaded but there were issues */}
        {error && faqs.length > 0 && (
             <div className="auth-message error" style={{margin: '20px auto', maxWidth: '600px'}}><p>{error}</p></div>
         )}
      </div>
      <div className="technician-faq-root">
        <div className="technician-faq-container">
          {/* Render sidebar only if categories are available */}
          {categories.length > 0 && (
             <aside className="technician-faq-sidebar">
               {categories.map(cat => (
                 <div
                   key={cat}
                   className={`technician-faq-sidebar-link ${cat === selectedCategory ? 'active' : ''}`}
                   onClick={() => handleCategorySelect(cat)}
                 >
                   {cat}
                 </div>
               ))}
             </aside>
          )}

          <main className="technician-faq-main">
             {/* Render main content if categories are available and a category is selected */}
             {categories.length > 0 && selectedCategory !== null ? (
                <section className="technician-faq-group">
                   {/* Use the selected category as the group title */}
                  <div className="technician-faq-group-title">
                       {selectedCategory} {/* Use the selected category name */}
                   </div>
                   <div className="technician-faq-questions">
                       {/* Iterate over filteredFaqs */}
                     {filteredFaqs.length > 0 ? filteredFaqs.map((item, idx) => (
                       <div key={item.id || idx} className="technician-faq-question-block"> {/* Use item.id as key if available and stable, fallback to index */}
                         <div
                           className={`technician-faq-question-row ${openIndex === idx ? 'open' : ''}`}
                           onClick={() => handleQuestionClick(idx)} // Pass the index within filteredFaqs
                           role="button"
                           aria-expanded={openIndex === idx}
                           tabIndex={0}
                           onKeyPress={(e) => (e.key === 'Enter' || e.key === ' ') && handleQuestionClick(idx)} // Pass the index
                         >
                           <span className="technician-faq-question-q">{item.question}</span> {/* Use item.question */}
                           <span className="technician-faq-toggle-btn">
                             <span className="technician-faq-toggle-icon">{openIndex === idx ? '−' : '+'}</span>
                           </span>
                         </div>
                          {/* Only show answer if this item's index is the openIndex */}
                         {openIndex === idx && item.answer && ( // Use item.answer
                           <div className="technician-faq-answer"><p>{item.answer}</p></div>
                         )}
                       </div>
                     )) : (
                         // Message if the selected category has no FAQs
                         <p className="text-secondary" style={{textAlign: 'center', marginTop: '20px'}}>Aucune FAQ trouvée pour cette catégorie.</p>
                     )}
                   </div>
                 </section>
             ) : categories.length > 0 && selectedCategory === null ? (
                 // Message if categories loaded but none are selected (shouldn't happen if we auto-select the first)
                 <p className="text-secondary" style={{textAlign: 'center', marginTop: '20px'}}>Sélectionnez une catégorie dans la barre latérale.</p>
             ) : (
                 // Message if no categories were loaded at all after fetch
                 <p className="text-secondary" style={{textAlign: 'center', marginTop: '20px'}}>Aucune catégorie FAQ disponible pour le moment.</p>
             )}
          </main>
        </div>
      </div>
    </div>
  );
}