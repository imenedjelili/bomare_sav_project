
// frontend/src/pages/chatbot_tech/components/ChatArea.js
import React, { useEffect, useRef, useState } from 'react';
import './ChatArea.css'; 

const ChatArea = ({ messages, isLoading }) => {
  const chatEndRef = useRef(null);
  const [showImageModal, setShowImageModal] = useState(false);
  const [modalImageUrl, setModalImageUrl] = useState('');
  const [modalImageAlt, setModalImageAlt] = useState('');

  const scrollToBottom = () => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(scrollToBottom, [messages, isLoading]);

  const openImageModal = (url, alt) => {
    setModalImageUrl(url);
    setModalImageAlt(alt || 'Enlarged image');
    setShowImageModal(true);
  };

  const closeImageModal = (e) => {
    if (e) e.stopPropagation(); 
    setShowImageModal(false);
    setModalImageUrl('');
    setModalImageAlt('');
  };

  return (
    <>
      <div className="chat-area">
        {messages.map((msg, index) => {
          // Do not render the 'support_form' trigger message itself as a visual chat bubble
          // The ChatInterface component will render the actual form.
          // The text intro to the form, if any, would be a separate 'text' message.
          if (msg.type === 'support_form' && msg.sender === 'bot') {
            return null; 
          }

          return (
            <div key={msg.timestamp + '-' + msg.sender + '-' + index + '-' + (msg.type || 'text')} className={`message-wrapper ${msg.sender}`}>
              <div className={`message ${msg.sender} message-type-${msg.type || 'text'}`}>
                
                {(msg.type === 'text' || msg.type === 'system') && (
                  <p>{msg.text}</p>
                )}

                {msg.type === 'image_gallery' && msg.text && (
                  <p className="gallery-title">{msg.text}</p>
                )}

                {msg.type === 'file' && msg.sender === 'user' && msg.text && (
                  <p>File: {typeof msg.text === 'object' ? msg.text.name : msg.text}</p>
                )}
                
                {msg.type === 'image' && msg.sender === 'bot' && msg.url && (
                  <div className="image-message-content">
                    {msg.text && !String(msg.text).toLowerCase().includes("image not found") && (
                      <p className="image-caption-single">{msg.text}</p>
                    )}
                    <img
                      src={msg.url}
                      alt={msg.alt || msg.name || 'Chat image'}
                      className="chat-image-thumbnail"
                      onClick={() => openImageModal(msg.url, msg.alt || msg.name)}
                      onError={(e) => { 
                        e.target.style.display = 'none'; 
                        const errorSpan = e.target.parentElement.querySelector('.image-load-error-text');
                        if (errorSpan) errorSpan.style.display = 'inline';
                        const captionEl = e.target.parentElement.querySelector('.image-caption-single');
                        if (captionEl) captionEl.style.display = 'block'; 
                      }}
                    />
                    <span className="image-load-error-text" style={{display: 'none', fontSize: '0.8em', color: 'var(--text-dark)'}}>Image not found</span>
                  </div>
                )}

                {msg.type === 'image_gallery' && msg.sender === 'bot' && msg.items && msg.items.length > 0 && (
                  <div className="image-gallery-grid">
                    {msg.items.map((item, itemIndex) => (
                      <div key={item.url + '-' + itemIndex} className="image-gallery-item">
                        <img
                          src={item.url}
                          alt={item.alt || item.name || 'Gallery image'}
                          className="chat-image-thumbnail"
                          onClick={() => openImageModal(item.url, item.alt || item.name)}
                          onError={(e) => {
                              e.target.style.display = 'none'; 
                              const errorSpan = e.target.closest('.image-gallery-item').querySelector('.image-load-error-text');
                              if (errorSpan) errorSpan.style.display = 'inline';
                              const fallbackNameSpan = e.target.closest('.image-gallery-item').querySelector('.image-gallery-item-fallback-name');
                              if(fallbackNameSpan) fallbackNameSpan.style.display = 'block';
                          }}
                        />
                        <span className="image-load-error-text" style={{display: 'none', fontSize: '0.8em', color: 'var(--text-dark)'}}>Not found</span>
                        <span className="image-gallery-item-fallback-name" style={{display: 'none', fontSize: '0.8em', color: 'var(--text-dark)', marginTop: '4px'}}>{item.name || item.alt}</span>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          );
        })}
        {isLoading && (
          <div className="loading-indicator">
            <div className="loading-indicator-dots">
              <span></span><span></span><span></span>
            </div>
          </div>
        )}
        <div ref={chatEndRef} />
      </div>

      {showImageModal && (
        <div className="image-modal-overlay" onClick={closeImageModal}>
          <div className="image-modal-content" onClick={(e) => e.stopPropagation()}>
            <img src={modalImageUrl} alt={modalImageAlt} className="image-modal-large" />
            <button onClick={closeImageModal} className="image-modal-close-button" aria-label="Close image view">Ã—</button>
          </div>
        </div>
      )}
    </>
  );
};

export default ChatArea;
