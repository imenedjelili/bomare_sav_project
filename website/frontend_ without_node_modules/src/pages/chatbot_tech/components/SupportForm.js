
// frontend/src/pages/chatbot_tech/components/SupportForm.js
import React, { useState, useEffect } from 'react';
import './SupportForm.css'; 
import { FiSend, FiAlertTriangle, FiLoader } from 'react-icons/fi'; // Added FiLoader here

// Simple translations for the form itself, can be expanded
const formTranslations = {
  en: {
    title: "Request Support",
    name: "Your Name",
    namePlaceholder: "e.g., John Doe",
    email: "Your Email",
    emailPlaceholder: "e.g., john.doe@example.com",
    tvModel: "TV Model (if known)",
    problemSummary: "Problem Summary",
    problemDetails: "Detailed Description of Issue",
    problemDetailsPlaceholder: "Please describe the issue in detail, including any steps you've already tried...",
    submit: "Submit Request",
    requiredField: "This field is required.",
    invalidEmail: "Please enter a valid email address.",
  },
  fr: {
    title: "Demande d'assistance",
    name: "Votre nom",
    namePlaceholder: "ex: Jean Dupont",
    email: "Votre e-mail",
    emailPlaceholder: "ex: jean.dupont@example.com",
    tvModel: "Modèle de téléviseur (si connu)",
    problemSummary: "Résumé du problème",
    problemDetails: "Description détaillée du problème",
    problemDetailsPlaceholder: "Veuillez décrire le problème en détail, y compris les étapes que vous avez déjà essayées...",
    submit: "Envoyer la demande",
    requiredField: "Ce champ est requis.",
    invalidEmail: "Veuillez saisir une adresse e-mail valide.",
  },
  ar: {
    title: "طلب دعم فني",
    name: "الاسم الكامل",
    namePlaceholder: "مثال: جون دو",
    email: "البريد الإلكتروني",
    emailPlaceholder: "مثال: john.doe@example.com",
    tvModel: "طراز التلفزيون (إن وجد)",
    problemSummary: "ملخص المشكلة",
    problemDetails: "وصف تفصيلي للمشكلة",
    problemDetailsPlaceholder: "يرجى وصف المشكلة بالتفصيل، بما في ذلك أي خطوات حاولت القيام بها بالفعل...",
    submit: "إرسال الطلب",
    requiredField: "هذا الحقل مطلوب.",
    invalidEmail: "يرجى إدخال عنوان بريد إلكتروني صالح.",
  }
};


const SupportForm = ({ onSubmit, prefillData = {}, currentLanguage = 'en' }) => {
  const t = formTranslations[currentLanguage] || formTranslations.en;

  const [formData, setFormData] = useState({
    name: '',
    email: '',
    tvModel: prefillData.model || '',
    problemSummary: prefillData.problem_summary || '',
    problemDetails: '',
  });
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    setFormData(prev => ({
      ...prev,
      tvModel: prefillData.model || '',
      problemSummary: prefillData.problem_summary || '',
    }));
  }, [prefillData]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: null }));
    }
  };

  const validateEmail = (email) => {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  };

  const validateForm = () => {
    const newErrors = {};
    if (!formData.name.trim()) newErrors.name = t.requiredField;
    if (!formData.email.trim()) newErrors.email = t.requiredField;
    else if (!validateEmail(formData.email)) newErrors.email = t.invalidEmail;
    if (!formData.problemSummary.trim()) newErrors.problemSummary = t.requiredField;
    if (!formData.problemDetails.trim()) newErrors.problemDetails = t.requiredField;
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    setIsSubmitting(true);
    // Simulate API call delay for UX
    await new Promise(resolve => setTimeout(resolve, 1000)); 
    onSubmit(formData); // Calls the handler in ChatInterface.js
    setIsSubmitting(false);
    // Optionally reset form fields here if needed, though component might unmount
  };

  return (
    <div className="support-form-container" dir={currentLanguage === 'ar' ? 'rtl' : 'ltr'}>
      <form onSubmit={handleSubmit} className="support-form" noValidate>
        <h3 className="support-form-title">{t.title}</h3>
        
        <div className="form-group">
          <label htmlFor="support-name">{t.name}</label>
          <input
            type="text"
            id="support-name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            placeholder={t.namePlaceholder}
            className={errors.name ? 'input-error' : ''}
            aria-required="true"
            aria-invalid={!!errors.name}
            disabled={isSubmitting}
          />
          {errors.name && <span className="error-message"><FiAlertTriangle/> {errors.name}</span>}
        </div>

        <div className="form-group">
          <label htmlFor="support-email">{t.email}</label>
          <input
            type="email"
            id="support-email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            placeholder={t.emailPlaceholder}
            className={errors.email ? 'input-error' : ''}
            aria-required="true"
            aria-invalid={!!errors.email}
            disabled={isSubmitting}
          />
          {errors.email && <span className="error-message"><FiAlertTriangle/> {errors.email}</span>}
        </div>

        <div className="form-group">
          <label htmlFor="support-tvModel">{t.tvModel}</label>
          <input
            type="text"
            id="support-tvModel"
            name="tvModel"
            value={formData.tvModel}
            onChange={handleChange}
            disabled={isSubmitting}
            // placeholder="e.g., P75-2841AV9.7" (using value directly)
          />
        </div>

        <div className="form-group">
          <label htmlFor="support-problemSummary">{t.problemSummary}</label>
          <input
            type="text"
            id="support-problemSummary"
            name="problemSummary"
            value={formData.problemSummary}
            onChange={handleChange}
            className={errors.problemSummary ? 'input-error' : ''}
            aria-required="true"
            aria-invalid={!!errors.problemSummary}
            disabled={isSubmitting}
          />
          {errors.problemSummary && <span className="error-message"><FiAlertTriangle/> {errors.problemSummary}</span>}
        </div>

        <div className="form-group">
          <label htmlFor="support-problemDetails">{t.problemDetails}</label>
          <textarea
            id="support-problemDetails"
            name="problemDetails"
            value={formData.problemDetails}
            onChange={handleChange}
            placeholder={t.problemDetailsPlaceholder}
            rows="4"
            className={errors.problemDetails ? 'input-error' : ''}
            aria-required="true"
            aria-invalid={!!errors.problemDetails}
            disabled={isSubmitting}
          />
          {errors.problemDetails && <span className="error-message"><FiAlertTriangle/> {errors.problemDetails}</span>}
        </div>

        <button type="submit" className="submit-support-button" disabled={isSubmitting}>
          {isSubmitting ? (
            <FiLoader className="spin-btn" /> /* Corrected: spin-btn for specific styling if needed */
          ) : (
            <>
              <FiSend style={{ marginRight: '8px' }} /> {t.submit}
            </>
          )}
        </button>
      </form>
    </div>
  );
};

export default SupportForm;

