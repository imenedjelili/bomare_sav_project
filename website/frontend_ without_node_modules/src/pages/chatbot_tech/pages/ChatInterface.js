// frontend/src/pages/chatbot_tech/pages/ChatInterface.js
import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';

import Sidebar from '../components/Sidebar.js';
import ChatArea from '../components/ChatArea.js';
import InputBar from '../components/InputBar.js';
import TopBar from '../components/TopBar.js';
import SupportForm from '../components/SupportForm.js';
import { FiLoader } from 'react-icons/fi';

import '../ChatInterface.css';
import bomareLogo from './bomare_logo.png';

const API_BASE_URL = 'http://localhost:5000/api';
const COMPANY_NAME = "Bomare Company";

const ChatInterface = () => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [currentChatId, setCurrentChatId] = useState(null);
  const [chatHistory, setChatHistory] = useState([]);
  const [selectedMode, setSelectedMode] = useState('Chatbot');
  const [currentLanguage, setCurrentLanguage] = useState('en');
  const [isLoadingResponse, setIsLoadingResponse] = useState(false);
  const [isChatModuleLoading, setIsChatModuleLoading] = useState(true);
  const [showSupportForm, setShowSupportForm] = useState(false);
  const [supportFormPrefill, setSupportFormPrefill] = useState({});

  const isChatCurrentlyActive = (messages.length > 0 && messages.some(m => m.sender === 'user' || m.sender === 'bot')) || isLoadingResponse || showSupportForm;

  const toggleSidebar = () => setIsSidebarOpen(!isSidebarOpen);

  const fetchChatHistory = useCallback(async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/chat_history`);
      const fetchedHistory = response.data || [];
      setChatHistory(fetchedHistory);
      return fetchedHistory;
    } catch (error) {
      console.error("Error fetching chat history:", error);
      setChatHistory([]);
      return [];
    }
  }, []);

  const startNewChat = useCallback(async (initialLoad = false) => {
    if (initialLoad) setIsChatModuleLoading(true);
    else if (messages.length === 0 && !isLoadingResponse) setIsLoadingResponse(true);

    setShowSupportForm(false);
    setSupportFormPrefill({});

    try {
      const response = await axios.post(`${API_BASE_URL}/new_chat`);
      setCurrentChatId(response.data.sessionId);
      setMessages(response.data.messages || []);
      await fetchChatHistory();
    } catch (error) {
      console.error("Error starting new chat:", error);
      setMessages([{ sender: 'system', type: 'text', text: 'Error starting new chat. Please try again.', timestamp: new Date().toISOString() }]);
    } finally {
      if (initialLoad) setIsChatModuleLoading(false);
      else setIsLoadingResponse(false);
    }
  }, [fetchChatHistory, messages.length, isLoadingResponse]);

  const loadChatSession = useCallback(async (sessionId, initialLoad = false) => {
    if (isLoadingResponse && !initialLoad) return;

    if (initialLoad) setIsChatModuleLoading(true);
    else setIsLoadingResponse(true);

    setShowSupportForm(false);
    setSupportFormPrefill({});

    try {
      const response = await axios.get(`${API_BASE_URL}/chat_session/${sessionId}`);
      setCurrentChatId(response.data.sessionId);
      const loadedMessages = response.data.messages || [];
      const lastMessage = loadedMessages.length > 0 ? loadedMessages[loadedMessages.length - 1] : null;

      // Check if the last message in the loaded session was a support form trigger *and* the form wasn't submitted
      // We can infer submission if the very next message isn't a user message or a system 'submitted' message.
      // For simplicity, if the last bot message is 'support_form', we show the form.
      if (lastMessage && lastMessage.type === 'support_form' && lastMessage.sender === 'bot') {
        // Check if there's a subsequent system message confirming submission or a user message
        const nextMessageIndex = loadedMessages.indexOf(lastMessage) + 1;
        let formShouldBeOpen = true;
        if (nextMessageIndex < loadedMessages.length) {
          const nextMsg = loadedMessages[nextMessageIndex];
          if (nextMsg.sender === 'system' && nextMsg.text.includes('Support request submitted')) {
            formShouldBeOpen = false;
          } else if (nextMsg.sender === 'user') {
            // If user sent a message after form trigger, form should be closed.
            formShouldBeOpen = false;
          }
        }

        if (formShouldBeOpen) {
          setShowSupportForm(true);
          setSupportFormPrefill(lastMessage.prefill || {});
          setMessages(loadedMessages);
        } else {
          setMessages(loadedMessages);
        }
      } else {
        setMessages(loadedMessages);
      }

    } catch (error) {
      console.error(`Error loading chat session ${sessionId}:`, error);
      if (error.response && error.response.status === 404) {
        setMessages([{ sender: 'system', type: 'text', text: `Session ${sessionId.substring(0, 8)} not found. Starting a new chat.`, timestamp: new Date().toISOString() }]);
        await startNewChat(initialLoad);
      } else {
        setMessages([{ sender: 'system', type: 'text', text: 'Error loading session.', timestamp: new Date().toISOString() }]);
        setCurrentChatId(null);
      }
    } finally {
      if (initialLoad) setIsChatModuleLoading(false);
      else setIsLoadingResponse(false);
    }
  }, [startNewChat, isLoadingResponse]);

  useEffect(() => {
    const initializeChatModule = async () => {
      setIsChatModuleLoading(true);
      const history = await fetchChatHistory();
      if (history.length > 0 && history[0]?.id) {
        await loadChatSession(history[0].id, true);
      } else {
        await startNewChat(true);
      }
    };
    initializeChatModule();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleSendMessage = async (content, type = 'text') => {
    if (!currentChatId) {
      setMessages(prev => [...prev, { sender: 'system', type: 'text', text: 'No active chat. Please start a new one.', timestamp: new Date().toISOString() }]);
      return;
    }
    if (type === 'text' && (!content || String(content).trim() === "")) return;
    if (isLoadingResponse) return;

    setShowSupportForm(false);

    const userMessageText = type === 'file' && content instanceof File ? content.name : String(content);
    const userMessage = { sender: 'user', text: userMessageText, timestamp: new Date().toISOString(), type: type };

    let updatedMessages = [...messages];
    const hasPriorUserOrBotMessages = messages.some(m => (m.sender === 'user' || m.sender === 'bot'));
    if (!hasPriorUserOrBotMessages && !messages.some(m => m.text.includes("Context: Mode"))) { // Add context only once
      updatedMessages.push({ sender: 'system', type: 'text', text: `Context: Mode - ${selectedMode}, Language - ${currentLanguage.toUpperCase()}.`, timestamp: new Date().toISOString() });
    }
    updatedMessages.push(userMessage);

    setMessages(updatedMessages);
    setIsLoadingResponse(true);

    const formData = new FormData();
    formData.append('sessionId', currentChatId);
    formData.append('language', currentLanguage);
    formData.append('mode', selectedMode);

    if (type === 'text') formData.append('message', content);
    else if (type === 'file' && content instanceof File) formData.append('file', content);
    else { setIsLoadingResponse(false); setMessages(prev => [...prev.slice(0, -1)]); return; }

    try {
      const response = await axios.post(`${API_BASE_URL}/chat`, formData);
      const botReplies = response.data.replies;

      let newMessagesToShow = [];
      let formTriggered = false;
      let prefillDataForForm = {};

      if (botReplies && Array.isArray(botReplies)) {
        botReplies.forEach(reply => {
          if (reply.type === 'support_form') {
            formTriggered = true;
            prefillDataForForm = reply.prefill || {};
          }
          newMessagesToShow.push(reply);
        });
        setMessages(prev => [...prev, ...newMessagesToShow]);
      }

      if (formTriggered) {
        setShowSupportForm(true);
        setSupportFormPrefill(prefillDataForForm);
      }

      const currentHistEntry = chatHistory.find(h => h.id === currentChatId);
      if (currentHistEntry && (currentHistEntry.title.startsWith("New Chat") || currentHistEntry.title.startsWith("Session") || !currentHistEntry.title)) {
        await fetchChatHistory();
      }
    } catch (error) {
      console.error("API Error sending message:", error);
      const errorMsg = error.response?.data?.error || 'API error. Could not send message.';
      setMessages(prev => [...prev, { sender: 'bot', text: errorMsg, timestamp: new Date().toISOString(), type: 'text' }]);
    } finally {
      setIsLoadingResponse(false);
    }
  };

  const handleModeChange = (newMode) => {
    setSelectedMode(newMode);
    if (messages.some(m => m.sender === 'user' || m.sender === 'bot')) {
      setMessages(prev => [...prev, { sender: 'system', type: 'text', text: `Switched to ${newMode} mode.`, timestamp: new Date().toISOString() }]);
    }
  };

  const handleLanguageChange = (lang) => {
    setCurrentLanguage(lang);
    if (messages.some(m => m.sender === 'user' || m.sender === 'bot')) {
      setMessages(prev => [...prev, { sender: 'system', type: 'text', text: `Language changed to ${lang.toUpperCase()}.`, timestamp: new Date().toISOString() }]);
    }
  };

  const handleSupportFormSubmit = async (formData) => {
    console.log("Support Form Submitted (Client-Side):", formData);
    // Simulate API call
    // await axios.post(`${API_BASE_URL}/submit_support_request`, { ...formData, sessionId: currentChatId });

    setMessages(prev => [
      ...prev,
      {
        sender: 'system',
        type: 'text',
        text: 'Support request submitted. Our team will get back to you soon. Thank you!',
        timestamp: new Date().toISOString()
      }
    ]);
    setShowSupportForm(false);
    setSupportFormPrefill({});
  };

  const handleCloseSupportForm = () => {
    setShowSupportForm(false);
    setSupportFormPrefill({});
    setMessages(prev => [
      ...prev,
      {
        sender: 'system',
        type: 'text',
        text: 'Support form closed. You can continue chatting or ask for help again.',
        timestamp: new Date().toISOString()
      }
    ]);
  };


  if (isChatModuleLoading) {
    return (
      <div className="chat-module-container chat-module-loading">
        <FiLoader className="spin" size={48} style={{ animation: 'spin 1s linear infinite', marginBottom: '16px' }} />
        <span>Bomare Assistant is loading...</span>
      </div>
    );
  }

  return (
    <div className="chat-module-container">
      <Sidebar
        isOpen={isSidebarOpen}
        toggleSidebar={toggleSidebar}
        onNewChat={() => startNewChat(false)}
        chatHistory={chatHistory}
        isHistoryLoading={isChatModuleLoading && chatHistory.length === 0}
        onSelectChat={(sessionId) => loadChatSession(sessionId, false)}
        currentChatId={currentChatId}
        currentLanguage={currentLanguage}
        onLanguageChange={handleLanguageChange}
      />
      <div className={`main-content ${isSidebarOpen ? 'sidebar-open' : ''} ${isChatCurrentlyActive ? 'input-bottom' : 'input-centered'}`}>
        <TopBar
          selectedMode={selectedMode}
          onModeChange={handleModeChange}
          onToggleSidebar={toggleSidebar}
          companyLogoPath={bomareLogo}
          companyName={COMPANY_NAME}
        />
        <div className="chat-interaction-area">
          {!isChatCurrentlyActive && !showSupportForm ? (
            <div className="chat-area welcome-message">
              <h2>Hello, I'm Bomare Assistant</h2>
              <p>Your guide for TV troubleshooting and more. How can I assist you today?</p>
            </div>
          ) : (
            <ChatArea messages={messages} isLoading={isLoadingResponse} />
          )}
          {showSupportForm ? (
            <SupportForm
              onSubmit={handleSupportFormSubmit}
              onClose={handleCloseSupportForm}
              prefillData={supportFormPrefill}
              currentLanguage={currentLanguage}
            />
          ) : (
            <InputBar onSendMessage={handleSendMessage} isLoading={isLoadingResponse} />
          )}
        </div>
      </div>
    </div>
  );
};

export default ChatInterface;