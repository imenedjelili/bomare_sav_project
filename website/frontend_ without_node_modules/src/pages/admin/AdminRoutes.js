// frontend/src/pages/admin/AdminRoutes.js
import React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
// Corrected path for AdminLayout: It's in the same directory as AdminRoutes.js
import AdminLayout from './AdminLayout';

// --- Core Admin Pages (from previous setup) ---
import AdminDashboardPage from './pages/DashboardPage';         // Original: DashboardPage.js
import AdminDatabaseManagementPage from './pages/DatabaseManagementPage'; // Original: DatabaseManagementPage.js
import AdminAddDataPage from './pages/AddDataPage';             // Original: AddDataPage.js
// Renaming EditDataPage.js's import to match your 'UpdateDatabase.js' component if you renamed the file
// OR, if you kept EditDataPage.js, you can use that and map it to the 'update-database' route.
// For this example, I'll assume you have a component named UpdateDatabase.js
import AdminUpdateGeneralDatabasePage from './pages/EditDataPage'; // This was my original EditDataPage.js
import AdminLogsPage from './pages/LogsPage';                   // Original: LogsPage.js


// --- Your Newly Provided Page Components ---
// Ensure these files exist in 'frontend/src/pages/admin/pages/'
// And that they export a component with the name you're importing.
// For example, 'CustomerView.js' should export 'CustomerView' or 'default CustomerView'.

import CustomerManagementPage from './pages/CustomerView';             // Your CustomerView.js
import ClientProductListPage from './pages/ClientProductView';         // Your ClientProductView.js
import AddClientProductPage from './pages/AddClientProductView';     // Your AddClientProductView.js
import UpdateClientProductPage from './pages/UpdateClientProductView'; // Your UpdateClientProductView.js
import UpdateTicketPage from './pages/UpdateTicket';                 // Your UpdateTicket.js
// If your 'UpdateDatabase.js' component is different from my 'EditDataPage.js', import it:
// import YourSpecificUpdateDatabasePage from './pages/UpdateDatabase';


const AdminRoutes = () => {
  return (
    <Routes>
      <Route path="/" element={<AdminLayout />}> {/* This layout wraps all admin pages */}
        <Route index element={<Navigate to="dashboard" replace />} />

        {/* --- Core Admin Routes --- */}
        <Route path="dashboard" element={<AdminDashboardPage />} />
        <Route path="database-management" element={<AdminDatabaseManagementPage />} /> {/* General DB list */}
        <Route path="add-data" element={<AdminAddDataPage />} /> {/* For adding to general knowledge base DB */}
        
        {/* Route for updating general database records (problems/solutions) */}
        {/* This uses the component previously named EditDataPage.js */}
        <Route path="update-general-database/:recordId" element={<AdminUpdateGeneralDatabasePage />} />
        <Route path="update-general-database" element={<AdminUpdateGeneralDatabasePage />} /> {/* If it can also handle creation */}
        
        <Route path="logs" element={<AdminLogsPage />} />

        {/* --- Routes for Your New Pages --- */}
        <Route path="customer-management" element={<CustomerManagementPage />} />
        
        <Route path="client-products" element={<ClientProductListPage />} /> {/* List view */}
        <Route path="add-client-product" element={<AddClientProductPage />} />
        <Route path="update-client-product/:productId" element={<UpdateClientProductPage />} />
        {/* If UpdateClientProductView can also handle general viewing without an ID or adding a new one if no ID: */}
        <Route path="update-client-product" element={<UpdateClientProductPage />} /> 

        <Route path="ticket-management/:ticketId" element={<UpdateTicketPage />} />
        {/* If UpdateTicket can also serve as a list view or a form for a new ticket: */}
        <Route path="ticket-management" element={<UpdateTicketPage />} />

        {/* If you have a separate UpdateDatabase.js component specifically for other types of DB updates: */}
        {/* <Route path="update-specific-db/:recordId" element={<YourSpecificUpdateDatabasePage />} /> */}

      </Route>
    </Routes>
  );
};

export default AdminRoutes;