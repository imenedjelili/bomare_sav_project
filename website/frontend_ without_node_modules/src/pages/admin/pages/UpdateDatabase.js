// frontend/src/pages/admin/pages/UpdateDatabase.js
import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';

// CSS Imports
import '../../admin/styles/_base.css';
import '../../admin/styles/UpdateDatabase.css'; // Or EditDataPage.css if identical

function UpdateDatabase() { // This is your specific UpdateDatabase component
    const location = useLocation();
    const navigate = useNavigate();
    const { recordId } = useParams(); 
    
    const initialRecordData = location.state?.recordData || {};
    const currentRecordId = recordId || initialRecordData.id;

    const [problemDescription, setProblemDescription] = useState("");
    const [solutionDescription, setSolutionDescription] = useState("");
    const [photoFile, setPhotoFile] = useState(null);
    const [docFile, setDocFile] = useState(null);
    const [videoFile, setVideoFile] = useState(null);

    useEffect(() => {
        if (currentRecordId) {
            console.log("Editing (UpdateDatabase.js) record ID:", currentRecordId);
            // MOCK: Fetch or use passed data
            if (initialRecordData.problem) setProblemDescription(initialRecordData.problem);
            if (initialRecordData.solution) setSolutionDescription(initialRecordData.solution);
            // TODO: Handle loading existing file names/previews if API provides them
        }
    }, [currentRecordId, initialRecordData]);

    const handleCancel = () => navigate('/admin/database-management'); // Or appropriate back route

    const handleConfirm = (e) => {
        e.preventDefault();
        const updatedRecord = { id: currentRecordId, problem: problemDescription, solution: solutionDescription };
        console.log("Updating (UpdateDatabase.js) record:", updatedRecord, { photoFile, docFile, videoFile });
        alert("Record updated (mock for UpdateDatabase.js)!");
        navigate('/admin/database-management');
    };
    
    const handleFileChange = (setter) => (event) => {
        if (event.target.files && event.target.files[0]) setter(event.target.files[0]);
        else setter(null);
    };

    return (
        <div className="update-database-container admin-main-content-wrapper">
            <div className="page-header-container header">
                <h1>Update & Refresh this Specific Dataset</h1> {/* Title specific to this component */}
                <div className="page-header-logo logo">
                </div>
            </div>

            <form className="data-form-container form-section" onSubmit={handleConfirm}>
                <div className="form-group input-group">
                    <label htmlFor="problemDescUpd">Update the problem description:</label>
                    <textarea id="problemDescUpd" value={problemDescription} className="form-control"
                        onChange={(e) => setProblemDescription(e.target.value)} rows="4" required />
                </div>
                <div className="form-group input-group">
                    <label htmlFor="solutionDescUpd">Update the solution description:</label>
                    <textarea id="solutionDescUpd" value={solutionDescription} className="form-control"
                        onChange={(e) => setSolutionDescription(e.target.value)} rows="4" required />
                </div>

                <div className="upload-section">
                    <div className="form-group file-upload-group upload-group">
                        <label>Upload photos:</label>
                        <div className="file-input-wrapper upload-container">
                            <button type="button" className="btn btn-upload" onClick={() => document.getElementById('photo-upload-upddb').click()}>
                                Upload photos
                            </button>
                            <input id="photo-upload-upddb" type="file" accept="image/*" multiple onChange={handleFileChange(setPhotoFile)} style={{ display: 'none' }}/>
                            {photoFile ? <span className="file-name-display">{photoFile.name}</span> : <div className="file-icon-placeholder media-icon"> {/* Placeholder SVG from your JSX */} <svg viewBox="0 0 24 24"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle cx="8.5" cy="8.5" r="1.5"></circle><polyline points="21 15 16 10 5 21"></polyline></svg></div>}
                        </div>
                    </div>
                    <div className="form-group file-upload-group upload-group">
                        <label>Upload documents (pdf):</label>
                        <div className="file-input-wrapper upload-container">
                            <button type="button" className="btn btn-upload" onClick={() => document.getElementById('doc-upload-upddb').click()}>
                                Upload files
                            </button>
                            <input id="doc-upload-upddb" type="file" accept=".pdf" onChange={handleFileChange(setDocFile)} style={{ display: 'none' }} />
                            {docFile ? <span className="file-name-display">{docFile.name}</span> : <div className="file-icon-placeholder media-icon"><svg viewBox="0 0 24 24"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg></div>}
                        </div>
                    </div>
                    <div className="form-group file-upload-group upload-group">
                        <label>Upload videos:</label>
                        <div className="file-input-wrapper upload-container">
                            <button type="button" className="btn btn-upload" onClick={() => document.getElementById('video-upload-upddb').click()}>
                                Upload videos
                            </button>
                            <input id="video-upload-upddb" type="file" accept="video/*" onChange={handleFileChange(setVideoFile)} style={{ display: 'none' }} />
                            {videoFile ? <span className="file-name-display">{videoFile.name}</span> : <div className="file-icon-placeholder media-icon"><svg viewBox="0 0 24 24"><polygon points="23 7 16 12 23 17 23 7"></polygon><rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect></svg></div>}
                        </div>
                    </div>
                </div>

                <div className="form-actions form-buttons">
                    <button type="button" className="btn btn-cancel" onClick={handleCancel}>Cancel</button>
                    <button type="submit" className="btn btn-confirm">Confirm & Update</button>
                </div>
            </form>
        </div>
    );
}
export default UpdateDatabase;