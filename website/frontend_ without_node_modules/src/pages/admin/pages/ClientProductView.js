// frontend/src/pages/admin/pages/ClientProductView.js
import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { supabase } from '../../../supabaseClient'; // Import supabase

// CSS Imports
import '../../admin/styles/_base.css';
import '../../admin/styles/ClientProductView.css';

function ClientProductView() {
    const location = useLocation();
    const queryParams = new URLSearchParams(location.search);
    const customerIdFilter = queryParams.get('customerId'); // Get customerId from query params

    const [clientProducts, setClientProducts] = useState([]);
    const [searchQuery, setSearchQuery] = useState(''); // <-- ADDED useState
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const navigate = useNavigate();

    // <-- MOVED fetchProducts OUTSIDE useEffect
    const fetchProducts = async (customerId, setLoading, setError, setProducts) => {
        setLoading(true);
        setError(null);
        try {
            let query = supabase
                .from('customer_product')
                .select('*'); // Select all columns

            // If customerId is in the URL, filter by it
            if (customerId) {
                console.log("Filtering products for customer ID:", customerId);
                query = query.eq('customer_id', customerId);
            } else {
                 console.log("Fetching all client products (no customer filter).");
            }

             // Order by creation date descending by default
            query = query.order('created_at', { ascending: false });

            // RLS policy "Admins have full access on customer_product" must be active
            const { data, error } = await query;


            if (error) {
                console.error("Error fetching client products:", error);
                setError("Erreur lors du chargement des produits clients.");
                setProducts([]);
            } else {
                console.log("Fetched client products:", data);
                setProducts(data || []);
            }
        } catch (err) {
             console.error("Unexpected error fetching client products:", err);
             setError("Une erreur inattendue est survenue.");
             setProducts([]);
        } finally {
            setLoading(false); // Set loading to false in finally
        }
    };


    useEffect(() => {
        let isMounted = true; // Use cleanup flag if needed, but fetchProducts handles state setters directly now

        fetchProducts(customerIdFilter, setIsLoading, setError, setClientProducts); // <-- Calling standalone function

        return () => { /* No specific cleanup needed for this fetch */ };

    }, [supabase, customerIdFilter]); // Dependency on customerIdFilter to refetch when it changes


    const addProduct = () => {
        // When adding a product, potentially pass the customerId if filtering
        const addPath = customerIdFilter ? `/admin/add-client-product?customerId=${customerIdFilter}` : '/admin/add-client-product';
        navigate(addPath);
    }

    const updateProduct = (productId) => navigate(`/admin/update-client-product/${productId}`);

    const warrantyStatusOptions = [
        { value: 'sous_garantie', label: 'Sous Garantie' }, { value: 'expiree', label: 'Expirée' },
        { value: 'extension', label: 'Extension Achetée' }, { value: 'hors_garantie', label: 'Hors Garantie' }
    ];

    const handleWarrantyStatusChange = async (productId, newStatus) => {
        setIsLoading(true); // Show loading while updating status
        setError(null);
        try {
            // Update the status and updated_at timestamp in the database
            // RLS policy "Admins have full access on customer_product" must be active
            const { error: updateError } = await supabase
                .from('customer_product')
                .update({ warranty_status: newStatus, updated_at: new Date().toISOString() }) // Use snake_case
                .eq('id', productId);

            if (updateError) {
                console.error(`Error updating product status for ${productId}:`, updateError);
                setError(`Erreur lors de la mise à jour du statut: ${updateError.message}`);
                 // Re-fetch all to ensure state is correct after potential error
                await fetchProducts(customerIdFilter, setIsLoading, setError, setClientProducts); // <-- Calling standalone function
            } else {
                 console.log(`Product status updated for ${productId}: ${newStatus}`);
                 // Optimistically update the local state (still good)
                 setClientProducts(prev =>
                     prev.map(p =>
                         p.id === productId ? { ...p, warranty_status: newStatus, updated_at: new Date().toISOString() } : p
                     )
                 );
                 setIsLoading(false); // Only set loading false here if optimistic update is successful
            }
        } catch (err) {
             console.error(`Unexpected error updating product status ${productId}:`, err);
             setError(`Une erreur inattendue est survenue lors de la mise à jour du statut.`);
             // Call the standalone fetchProducts function on unexpected error
             await fetchProducts(customerIdFilter, setIsLoading, setError, setClientProducts); // <-- Calling standalone function
        }
        // Removed redundant finally { setIsLoading(false); }
    };

    // Filtered products based on search term across multiple fields
    const filteredProducts = clientProducts.filter(p =>
        (p.serial_number && p.serial_number.toLowerCase().includes(searchQuery.toLowerCase())) || // Use snake_case
        (p.product_name && p.product_name.toLowerCase().includes(searchQuery.toLowerCase())) || // Use snake_case
        (p.purchase_date && p.purchase_date.toLowerCase().includes(searchQuery.toLowerCase())) || // Use snake_case
        (p.warranty_expiration && p.warranty_expiration.toLowerCase().includes(searchQuery.toLowerCase())) || // Use snake_case
        (p.warranty_status && p.warranty_status.toLowerCase().includes(searchQuery.toLowerCase())) || // Use snake_case
        (p.id && String(p.id).toLowerCase().includes(searchQuery.toLowerCase())) // Also search by ID
    );

    const columnLabels = [ "Series' number", "Product's name", "Purchase Date", 'Warranty Expiration', 'Warranty Status', 'Actions' ];

    const formatDateField = (dateString) => {
        if (!dateString) return 'N/A';
        try {
            const date = new Date(dateString);
             if (isNaN(date.getTime())) return 'Date invalide';
            return date.toLocaleDateString('fr-FR', { year: 'numeric', month: 'long', day: 'numeric' });
        } catch (e) {
            console.error("Error formatting date:", e);
            return 'Date invalide';
        }
    };


    return (
        <div className="client-product-main-content-wrapper admin-main-content-wrapper">
            <div className="page-header-container client-product-page-header HHeader">
                <h1>Client Dataset Operations</h1>
                <div className="page-header-logo client-product-logo">
                </div>
            </div>

            <div className="page-sub-header client-product-sub-header">
                <h2 className="client-product-sub-title">
                     {customerIdFilter ? `Products for Customer ID: ${customerIdFilter}` : "Manage Client's Products"}
                </h2>
                <div className="search-container client-product-search-container">
                    <input
                        type="search" placeholder="Search for a product..."
                        className="search-input client-product-search-input"
                        value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} // <-- Correct variable
                    />
                    <button className="search-icon-btn client-product-search-icon" type="button">
                        <svg viewBox="0 0 24 24"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"></path></svg>
                    </button>
                </div>
            </div>

             {error && <div className="error-message" style={{margin: '20px'}}>{error}</div>}

            {isLoading ? (
                 <div className="loading-state" style={{textAlign: 'center', padding: '50px'}}>
                      <h2>Chargement des produits...</h2>
                 </div>
            ) : (
            <div className="records-list-container client-product-records-list-container">
                 {/* Header Row */}
                {filteredProducts.length > 0 && (
                     <div className="record-list-header record-grid client-product-list-header client-product-record-grid">
                        {columnLabels.map(label => (
                            <div key={label} className="record-cell client-product-header-cell">{label}</div>
                        ))}
                    </div>
                )}

                 {/* Data Rows */}
                {filteredProducts.length > 0 ? (
                    filteredProducts.map((product) => (
                        <div key={product.id} className="record-item client-product-record">
                            <div className="record-grid client-product-record-grid">
                                {/* Use snake_case keys from DB */}
                                <div className="record-cell client-product-cell serial-number-cell" data-label="Serial #"><p>{product.serial_number}</p></div>
                                <div className="record-cell client-product-cell product-name-cell" data-label="Product"><p>{product.product_name}</p></div>
                                <div className="record-cell client-product-cell purchase-date-cell" data-label="Purchase Date"><p>{formatDateField(product.purchase_date)}</p></div>
                                <div className="record-cell client-product-cell warranty-expiration-cell" data-label="Warranty Exp."><p>{formatDateField(product.warranty_expiration)}</p></div>
                                <div className="record-cell client-product-cell client-product-warranty-status-cell" data-label="Status">
                                    <select
                                        className="form-control client-product-status-select"
                                        value={product.warranty_status || 'hors_garantie'} // Default value if null in DB
                                        onChange={(e) => handleWarrantyStatusChange(product.id, e.target.value)}
                                        aria-label={`Update warranty status for product ${product.serial_number}`}
                                        disabled={isLoading} // Disable select during saves
                                    >
                                        {warrantyStatusOptions.map(opt => (
                                            <option key={opt.value} value={opt.value}>{opt.label}</option>
                                        ))}
                                    </select>
                                </div>
                                <div className="record-cell client-product-cell client-product-record-actions" data-label="Actions">
                                     {/* Update button redirects to edit page */}
                                    <button className="btn client-product-action-button edit-blue" onClick={() => updateProduct(product.id)} disabled={isLoading}>
                                        Modify
                                    </button>
                                    {/* Add Delete button if needed and implement logic */}
                                    {/* <button className="btn delete-button" onClick={() => handleDelete(product.id)} disabled={isLoading}>Delete</button> */}
                                </div>
                            </div>
                        </div>
                    ))
                ) : (
                    <div className="no-records-found">
                         <p>{searchQuery || customerIdFilter ? "No products found matching your criteria." : "No products available."}</p> {/* Correct variable */}
                    </div>
                )}
            </div>
            )} {/* End Conditional Render */}

            {/* Add Button */}
            <div className="form-actions client-product-footer-actions">
                <button className="btn client-product-add-button" onClick={addProduct} disabled={isLoading}>
                    <svg width="18" height="18" viewBox="0 0 24 24"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
                    Add a Client's Product
                </button>
            </div>
        </div>
    );
}
export default ClientProductView;