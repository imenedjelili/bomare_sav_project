// frontend/src/pages/admin/pages/AddClientProductView.js
import React, { useState, useEffect } from 'react'; // Added useEffect
import { useNavigate, useLocation } from 'react-router-dom'; // Added useLocation
import { supabase } from '../../../supabaseClient'; // Import supabase

// CSS Imports
import '../../admin/styles/_base.css'; // Base admin styles
import '../../admin/styles/AddClientProductView.css'; // Page-specific styles


function AddClientProductView() {
    const navigate = useNavigate();
    const location = useLocation(); // To get customerId from state or query
    const queryParams = new URLSearchParams(location.search);
    const customerIdFromQuery = queryParams.get('customerId');

    const [formData, setFormData] = useState({
        serialNumber: '', productName: '', purchaseDate: '', warrantyExpiration: '',
        // customerId: '' // Removed from form, will be derived from query/state
    });
     const [saveError, setSaveError] = useState(null);
     const [isSaving, setIsSaving] = useState(false);
     const [customerName, setCustomerName] = useState('Loading...'); // To display which customer this is for


    useEffect(() => {
        let isMounted = true;
        async function fetchCustomerName(id) {
            if (!id) {
                 if (isMounted) setCustomerName('No customer specified');
                 return;
            }
            try {
                // Fetch customer name to display
                const { data, error } = await supabase
                    .from('customers')
                    .select('first_name, last_name')
                    .eq('id', id)
                    .single();

                if (!isMounted) return;

                if (error || !data) {
                     console.error("Error fetching customer name:", error);
                     setCustomerName('Error loading customer name');
                     setSaveError("Impossible de charger les informations client.");
                } else {
                     setCustomerName(`${data.first_name || ''} ${data.last_name || ''}`.trim());
                }
            } catch (err) {
                 if (!isMounted) return;
                 console.error("Unexpected error fetching customer name:", err);
                 setCustomerName('Unexpected error loading customer name');
                 setSaveError("Une erreur inattendue est survenue.");
            }
        }

        if (customerIdFromQuery) {
             fetchCustomerName(customerIdFromQuery);
        } else {
             setCustomerName('No customer specified (Will add unassigned product)');
             // Optionally, redirect if customerId is required for adding
             // navigate('/admin/client-products', { replace: true });
        }


        return () => { isMounted = false; };
    }, [customerIdFromQuery, supabase]);


    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prevFormData => ({ ...prevFormData, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!formData.serialNumber || !formData.productName || !formData.purchaseDate || !formData.warrantyExpiration) {
            setSaveError('Please fill in all required fields.');
            return;
        }

        setIsSaving(true);
        setSaveError(null);

        try {
             // Prepare data for insertion, including the customer_id if available
            const newProductData = {
                serial_number: formData.serialNumber, // snake_case for DB
                product_name: formData.productName,
                purchase_date: formData.purchaseDate,
                warranty_expiration: formData.warrantyExpiration,
                // warranty_status defaults to 'hors_garantie' in DB
                customer_id: customerIdFromQuery || null, // Link to customer ID if present, else null
                 // created_at and updated_at have default values
            };

            // Insert the new product record
            // RLS policy "Admins have full access on customer_product" must be active
            const { data, error } = await supabase
                .from('customer_product')
                .insert([newProductData])
                .select() // Select the inserted row
                .single(); // Expect one row back

            if (error) {
                console.error("Error adding product:", error);
                setSaveError(`Erreur lors de l'ajout du produit: ${error.message}`);
            } else {
                console.log("Product added successfully:", data);
                alert('Produit ajouté avec succès !');
                // Redirect back to client products list
                navigate('/admin/client-products'); // Redirect without query param
            }

        } catch (err) {
             console.error("Unexpected error during save:", err);
             setSaveError(`Une erreur inattendue est survenue lors de l'ajout: ${err.message}`);
        } finally {
            setIsSaving(false);
        }
    };

    const handleCancel = () => {
        navigate('/admin/client-products');
    };

    return (
        <div className="add-client-product-main-content-wrapper admin-main-content-wrapper">
            <div className="page-header-container add-client-product-page-header HHeader">
                <h1>Client Dataset Operations</h1>
                <div className="page-header-logo add-client-product-logo">
                </div>
            </div>

            <div className="page-sub-header add-client-product-sub-header">
                <h2>Add New Client Product</h2>
                 {/* Display customer name if adding for a specific customer */}
                {customerIdFromQuery && <p className="add-client-product-customer-info">For Customer: {customerName}</p>}
            </div>

            {saveError && <div className="error-message" style={{margin: '20px'}}>{saveError}</div>}

            <form className="data-form-container add-client-product-data-form" onSubmit={handleSubmit}>
                <div className="form-grid add-client-product-form-grid">
                    <div className="form-group add-client-product-form-group">
                        <label htmlFor="serialNumber">Series' number (Numéro de Série):</label>
                        <input
                            type="text" id="serialNumber" name="serialNumber"
                            className="form-control add-client-product-form-control"
                            value={formData.serialNumber} onChange={handleInputChange}
                            placeholder="e.g., BOM-TV55-123456" required
                            disabled={isSaving}
                        />
                    </div>
                    <div className="form-group add-client-product-form-group">
                        <label htmlFor="productName">Product's name (Nom du Produit):</label>
                        <input
                            type="text" id="productName" name="productName"
                            className="form-control add-client-product-form-control"
                            value={formData.productName} onChange={handleInputChange}
                            placeholder="e.g., Stream TV 55”" required
                            disabled={isSaving}
                        />
                    </div>
                    <div className="form-group add-client-product-form-group">
                        <label htmlFor="purchaseDate">Purchase Date (Date d'achat):</label>
                        <input
                            type="date" id="purchaseDate" name="purchaseDate"
                            className="form-control add-client-product-form-control"
                            value={formData.purchaseDate} onChange={handleInputChange} required
                            disabled={isSaving}
                        />
                    </div>
                    <div className="form-group add-client-product-form-group">
                        <label htmlFor="warrantyExpiration">Warranty Expiration (Expiration de la Garantie):</label>
                        <input
                            type="date" id="warrantyExpiration" name="warrantyExpiration"
                            className="form-control add-client-product-form-control"
                            value={formData.warrantyExpiration} onChange={handleInputChange} required
                            disabled={isSaving}
                        />
                    </div>
                </div>
                <div className="form-actions add-client-product-form-buttons">
                    <button type="button" className="btn btn-cancel add-client-product-btn-cancel" onClick={handleCancel} disabled={isSaving}>
                        Cancel
                    </button>
                    <button type="submit" className="btn btn-confirm add-client-product-btn-confirm" disabled={isSaving}>
                       {isSaving ? 'Saving...' : 'Confirm & Add Product'}
                    </button>
                </div>
            </form>
        </div>
    );
}
export default AddClientProductView;