// frontend/src/pages/admin/pages/LogsPage.js
import React, { useState, useEffect } from 'react';

// ===>>> FIX THIS IMPORT PATH <<<===
// Replace './supabaseClient' with the correct relative path to your actual Supabase client initialization file.
// Example: If it's in src/lib/supabaseClient.js, the path would be '../../../lib/supabaseClient';
import { supabase } from '../../../supabaseClient'; // Import supabase

// CSS Imports
import '../../admin/styles/_base.css';
import '../../admin/styles/LogsPage.css';


const LogsPage = () => {
  // State to store the logs fetched from the database
  const [logs, setLogs] = useState([]);
  // State to manage the loading status, set to true initially as we will fetch data
  const [isLoading, setIsLoading] = useState(true);
  // State to store any error that occurs during fetching
  const [error, setError] = useState(null);

  // State for controlling the export options dropdown
  const [showExportOptions, setShowExportOptions] = useState(false);

  // useEffect hook to fetch logs when the component mounts
  // This block is now uncommented to enable fetching from the database
  useEffect(() => {
      setIsLoading(true);
      setError(null);

      async function fetchLogs() {
          try {
              // Ensure 'supabase' is the correctly initialized Supabase client instance
              // Fetch data from your custom logs table
              // Replace 'admin_activity_logs' with the actual name of your table storing logs
              const { data, error } = await supabase
                  .from('admin_activity_logs')
                  .select('*')
                  .order('timestamp', { ascending: false }); // Order by timestamp

              if (error) {
                  console.error("Error fetching logs:", error);
                  setError("Erreur lors du chargement des journaux.");
                  setLogs([]); // Clear logs on error
              } else {
                  console.log("Fetched logs:", data);
                  setLogs(data || []); // Set logs, use empty array if data is null/undefined
              }
          } catch (err) {
               // Catch unexpected errors during the fetch process
              console.error("Unexpected error fetching logs:", err);
              setError("Une erreur inattendue est survenue lors du chargement des journaux.");
              setLogs([]); // Clear logs on unexpected error
          } finally {
               // Ensure loading state is set to false after fetch attempt
              setIsLoading(false);
          }
      }

      // Call the fetch function
      // Only attempt to fetch if the supabase client is available (optional check, but good practice)
      if (supabase) {
          fetchLogs();
      } else {
          setError("Supabase client not initialized.");
          setIsLoading(false);
      }


      // Dependencies array: React will re-run this effect if 'supabase' changes.
      // If your supabase client is guaranteed to be stable and globally available, you might use an empty array [].
      // However, explicitly listing 'supabase' as a dependency is safer if its reference could change.
  }, [supabase]);


  const handleExport = (format) => {
    // --- Implement Actual Export Logic Here ---
    // This is a mock implementation.
    console.log(`Mock: Exporting logs as ${format}`);
    alert(`Logs exported as ${format} (mock). (Actual export logic needs to be implemented)`);
    setShowExportOptions(false);
  };

  const formatDate = (isoString) => {
    if (!isoString) return 'N/A';
    try {
        const date = new Date(isoString);
        if (isNaN(date.getTime())) return 'Date invalide';

        return date.toLocaleString('fr-FR', {
            year: 'numeric', month: 'short', day: 'numeric',
            hour: '2-digit', minute: '2-digit'
        });
    } catch (e) {
         console.error("Error formatting date:", e);
        return 'Date invalide';
    }
  };

  // Column labels for the table header
  const columnDataLabels = ["Timestamp", "Event Type", "Status", "Details/Changes"];


  return (
    <div className="logs-page admin-main-content-wrapper">
      <div className="page-sub-header logs-header">
        <h2>Track Logs and Trace Your Actions</h2>
        <div className="export-dropdown-container">
          <button
            className="btn btn-export logs-btn-export"
            onClick={() => setShowExportOptions(!showExportOptions)}
            aria-haspopup="true" aria-expanded={showExportOptions}
          >
            Export to <span className="dropdown-arrow">{showExportOptions ? '▲' : '▼'}</span>
          </button>
          {showExportOptions && (
            <div className="export-options logs-export-options" role="menu">
              <button role="menuitem" onClick={() => handleExport('Excel')}>Excel (.xlsx)</button>
              <button role="menuitem" onClick={() => handleExport('CSV')}>CSV (.csv)</button>
              <button role="menuitem" onClick={() => handleExport('PDF')}>PDF (.pdf)</button>
            </div>
          )}
        </div>
      </div>

      {/* Display loading indicator while fetching */}
      {isLoading && <div className="loading-indicator" style={{margin: '20px'}}>Chargement des journaux...</div>}

      {/* Display error message if fetching failed */}
      {error && <div className="error-message" style={{margin: '20px'}}>{error}</div>}

      {/* Only show table if not loading and no error, and logs exist or are empty (after fetch) */}
      {!isLoading && !error && (
        <div className="logs-table-container records-list-container">
          <div className="logs-table-header record-grid">
            {columnDataLabels.map(label => <div key={label} className="record-cell">{label}</div>)}
          </div>
          <div className="logs-table-body">
            {logs.length > 0 ? logs.map(log => (
              // Ensure log object properties match your Supabase column names (timestamp, event_type, status, details)
              <div key={log.id} className={`logs-table-row record-grid status-${log.status ? log.status.toLowerCase() : 'unknown'}`}> {/* Handle potential null status */}
                <div className="record-cell" data-label="Timestamp">{formatDate(log.timestamp)}</div>
                <div className="record-cell" data-label="Event Type">{log.event_type}</div>
                {/* Safely access log.status */}
                <div className="record-cell" data-label="Status"><span className={`status-badge ${log.status ? log.status.toLowerCase() : 'unknown'}`}>{log.status || 'Inconnu'}</span></div>
                <div className="record-cell" data-label="Details">{log.details}</div>
              </div>
            )) : (
              // Display "No logs" message only when logs array is empty after loading and no error
              <div className="no-records-found">No logs available.</div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

// You might need to export the component differently based on your project setup
export default LogsPage;