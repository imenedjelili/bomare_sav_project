// frontend/src/pages/admin/pages/CustomerView.js
import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom'; // Added useLocation
import { supabase } from '../../../supabaseClient'; // Import supabase

// CSS Imports
import '../../admin/styles/_base.css';
import '../../admin/styles/CustomerView.css';

function CustomerView() {
    const location = useLocation(); // Added useLocation if needed
    const [customers, setCustomers] = useState([]);
    const [searchQuery, setSearchQuery] = useState(''); // <-- ADDED useState
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const navigate = useNavigate();

    useEffect(() => {
        setIsLoading(true);
        setError(null);
        async function fetchCustomers() {
            try {
                // Fetch all customers
                // RLS policy "Admins have full access on customers" must be active
                const { data, error } = await supabase
                    .from('customers')
                    .select('*'); // Select all columns

                if (error) {
                    console.error("Error fetching customers:", error);
                    setError("Erreur lors du chargement des clients.");
                    setCustomers([]);
                } else {
                    console.log("Fetched customers:", data);
                    setCustomers(data || []);
                }
            } catch (err) {
                 console.error("Unexpected error fetching customers:", err);
                 setError("Une erreur inattendue est survenue.");
                 setCustomers([]);
            } finally {
                setIsLoading(false);
            }
        }

        fetchCustomers();
    }, [supabase]); // Dependency on supabase

    const handleViewTickets = (customerId) => {
        navigate(`/admin/ticket-management?customerId=${customerId}`);
        console.log("View tickets for customer ID:", customerId);
    };
    const handleViewProducts = (customerId) => {
         navigate(`/admin/client-products?customerId=${customerId}`);
         console.log("View products for customer ID:", customerId);
     };

    // Filtered customers based on search term across multiple fields
    const filteredCustomers = customers.filter(c =>
        (c.first_name && c.first_name.toLowerCase().includes(searchQuery.toLowerCase())) || // Use snake_case
        (c.last_name && c.last_name.toLowerCase().includes(searchQuery.toLowerCase())) || // Use snake_case
        (c.email && c.email.toLowerCase().includes(searchQuery.toLowerCase())) ||
        (c.phone && c.phone.toLowerCase().includes(searchQuery.toLowerCase())) ||
        (c.id && String(c.id).toLowerCase().includes(searchQuery.toLowerCase())) // Also search by ID
    );

    const columnLabels = ['ID', 'First Name', 'Last Name', 'Email', 'Phone', 'Actions'];

    return (
        <div className="customer-view-container admin-main-content-wrapper">
            <div className="page-header-container header HHeader">
                <h1>Client Dataset Operations</h1>
                <div className="page-header-logo logo">
                </div>
            </div>

            <div className="page-sub-header update-ticket-header">
                <h2 className="update-ticket-title">Manage Customer Database</h2>
                <div className="search-container">
                    <input
                        type="search" placeholder="Search for customers..."
                        className="search-input"
                        value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} // <-- Using declared state variable
                    />
                    <button className="search-icon-btn search-icon" type="button">
                        <svg viewBox="0 0 24 24"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"></path></svg>
                    </button>
                </div>
            </div>

            {error && <div className="error-message" style={{margin: '20px'}}>{error}</div>}

            {isLoading ? (
                 <div className="loading-state" style={{textAlign: 'center', padding: '50px'}}>
                      <h2>Chargement des clients...</h2>
                 </div>
            ) : (
            <div className="records-list-container customer-records-container">
                {filteredCustomers.length > 0 ? (
                    <>
                     {/* Header Row */}
                     <div className="record-list-header record-grid customer-record-grid">
                         {columnLabels.map(label => <div key={label} className="record-cell">{label}</div>)}
                     </div>
                     {/* Data Rows */}
                     {filteredCustomers.map((customer) => (
                         <div key={customer.id} className="record-card-item record">
                             <div className="record-grid customer-record-grid">
                                 {/* Use snake_case keys from DB */}
                                 <div className="record-cell id-cell" data-label="ID"><p>{customer.id}</p></div>
                                 <div className="record-cell name-cell" data-label="First Name"><p>{customer.first_name}</p></div>
                                 <div className="record-cell name-cell" data-label="Last Name"><p>{customer.last_name}</p></div>
                                 <div className="record-cell contact-cell" data-label="Email"><p>{customer.email}</p></div>
                                 <div className="record-cell contact-cell" data-label="Phone"><p>{customer.phone || 'N/A'}</p></div>
                                 <div className="record-cell customer-record-actions" data-label="Actions">
                                     <button className="btn edit-button" onClick={() => handleViewProducts(customer.id)} disabled={isLoading}>Products</button>
                                     <button className="btn delete-button" onClick={() => handleViewTickets(customer.id)} disabled={isLoading}>Tickets</button>
                                      {/* Add Edit/Delete Customer buttons if needed and implement logic */}
                                     {/* <button className="btn edit-button" onClick={() => alert('Edit Customer (Not Implemented)')}>Edit</button> */}
                                     {/* <button className="btn delete-button" onClick={() => alert('Delete Customer (Not Implemented)')}>Delete</button> */}
                                 </div>
                             </div>
                         </div>
                     ))}
                    </>
                ) : (
                    <div className="no-records-found">
                         <p>{searchQuery ? `No customers found matching "${searchQuery}".` : "No customers available."}</p> {/* Correct variable */}
                    </div>
                )}
            </div>
            )} {/* End Conditional Render */}
        </div>
    );
}
export default CustomerView;