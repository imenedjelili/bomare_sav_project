// frontend/src/pages/admin/pages/UpdateClientProductView.js
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { supabase } from '../../../supabaseClient'; // Import supabase

// CSS Imports
import '../../admin/styles/_base.css';
import '../../admin/styles/UpdateClientProductView.css';

function UpdateClientProductView() {
    const { productId } = useParams(); // Get product ID from URL
    const navigate = useNavigate();

    const [formData, setFormData] = useState({
        serialNumber: '', productName: '', purchaseDate: '', warrantyExpiration: ''
    });
    const [isLoading, setIsLoading] = useState(true); // Loading state for fetching
    const [isSaving, setIsSaving] = useState(false); // Saving state for submission
    const [error, setError] = useState(null); // Error state

    useEffect(() => {
        let isMounted = true;

        async function fetchProduct(id) {
            setIsLoading(true);
            setError(null);
            try {
                // Fetch the specific product record by ID
                // RLS policy "Admins have full access on customer_product" must be active
                const { data, error } = await supabase
                    .from('customer_product')
                    .select('serial_number, product_name, purchase_date, warranty_expiration') // Select specific columns
                    .eq('id', id)
                    .single(); // Expect a single result

                if (!isMounted) return;

                if (error || !data) {
                    console.error(`Error fetching product ${id}:`, error);
                    setError(`Produit ${id} introuvable ou erreur lors du chargement.`);
                    // Redirect if product not found
                    navigate('/admin/client-products', { replace: true });
                } else {
                    console.log(`Fetched product ${id} for editing:`, data);
                    // Populate form state with fetched data (mapping snake_case to camelCase)
                    setFormData({
                        serialNumber: data.serial_number || '',
                        productName: data.product_name || '',
                        purchaseDate: data.purchase_date || '',
                        warrantyExpiration: data.warranty_expiration || '',
                    });
                }
            } catch (err) {
                 if (!isMounted) return;
                console.error(`Unexpected error fetching product ${id}:`, err);
                setError(`Une erreur inattendue est survenue lors du chargement du produit ${id}.`);
                 navigate('/admin/client-products', { replace: true });
            } finally {
                if (isMounted) setIsLoading(false);
            }
        }

        if (productId) {
            fetchProduct(productId);
        } else {
            // Should not happen if routed correctly, but handle defensively
            console.error("Product ID is missing for update view.");
            navigate('/admin/client-products', { replace: true });
             setIsLoading(false);
        }


        return () => { isMounted = false; }; // Cleanup
    }, [productId, navigate, supabase]); // Dependencies

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!formData.serialNumber || !formData.productName || !formData.purchaseDate || !formData.warrantyExpiration) {
            setError('Please fill in all fields.');
            return;
        }

        setIsSaving(true);
        setError(null);

        try {
             // Prepare updated data (mapping camelCase to snake_case)
            const updatedProductData = {
                serial_number: formData.serialNumber,
                product_name: formData.productName,
                purchase_date: formData.purchaseDate,
                warranty_expiration: formData.warrantyExpiration,
                updated_at: new Date().toISOString(), // Manually update timestamp
                // Note: warranty_status is updated via dropdown on the list page
            };

            // Update the record by its ID
            // RLS policy "Admins have full access on customer_product" must be active
            const { data: updatedProduct, error: updateError } = await supabase
                .from('customer_product')
                .update(updatedProductData)
                .eq('id', productId)
                .select() // Select the updated row
                .single(); // Expecting the updated row back

            if (updateError) {
                console.error(`Error updating product ${productId}:`, updateError);
                setError(`Erreur lors de la mise à jour du produit: ${updateError.message}`);
            } else {
                console.log(`Product updated successfully:`, updatedProduct);
                alert('Produit mis à jour avec succès !');
                // Redirect back to client products list
                navigate('/admin/client-products');
            }

        } catch (err) {
             console.error(`Unexpected error during update ${productId}:`, err);
             setError(`Une erreur inattendue est survenue lors de la mise à jour.`);
        } finally {
            setIsSaving(false);
        }
    };

    const handleCancel = () => navigate('/admin/client-products');


     // Show loading state while fetching initial data
    if (isLoading) {
        return (
            <div className="update-client-product-main-content-wrapper admin-main-content-wrapper">
                <div className="loading-state" style={{textAlign: 'center', padding: '50px'}}>
                    <h2>Chargement du produit...</h2>
                </div>
            </div>
        );
    }

     // If productId is provided but no product data was found after loading
    if (!isLoading && productId && !formData.serialNumber) {
         return (
              <div className="update-client-product-main-content-wrapper admin-main-content-wrapper">
                 <div className="error-message" style={{margin: '20px'}}>
                      Produit avec l'ID {productId} introuvable.
                     {error && ` Détails: ${error}`}
                  </div>
                  <div className="form-actions" style={{padding: '20px'}}>
                      <button type="button" className="btn btn-cancel" onClick={() => navigate('/admin/client-products')}>Retour à la liste des produits</button>
                  </div>
             </div>
         );
     }


    return (
        <div className="update-client-product-main-content-wrapper admin-main-content-wrapper">
            <div className="page-header-container update-client-product-page-header HHeader">
                <h1>Client Dataset Operations</h1>
                <div className="page-header-logo update-client-product-logo">
                </div>
            </div>
            <div className="page-sub-header update-client-product-sub-header">
                <h2>Editing Product ID: {productId}</h2>
            </div>

             {error && <div className="error-message" style={{margin: '20px'}}>{error}</div>}

            <form className="data-form-container update-client-product-data-form" onSubmit={handleSubmit}>
                <div className="form-grid update-client-product-form-grid">
                    <div className="form-group update-client-product-form-group">
                        <label htmlFor="serialNumberUpd">Series' number (Numéro de Série):</label>
                        <input type="text" id="serialNumberUpd" name="serialNumber"
                            className="form-control update-client-product-form-control"
                            value={formData.serialNumber} onChange={handleInputChange} required
                            disabled={isSaving}
                        />
                    </div>
                    <div className="form-group update-client-product-form-group">
                        <label htmlFor="productNameUpd">Product's name (Nom du Produit):</label>
                        <input type="text" id="productNameUpd" name="productName"
                            className="form-control update-client-product-form-control"
                            value={formData.productName} onChange={handleInputChange} required
                            disabled={isSaving}
                        />
                    </div>
                    <div className="form-group update-client-product-form-group">
                        <label htmlFor="purchaseDateUpd">Purchase Date (Date d'achat):</label>
                        <input type="date" id="purchaseDateUpd" name="purchaseDate"
                            className="form-control update-client-product-form-control"
                            value={formData.purchaseDate} onChange={handleInputChange} required
                            disabled={isSaving}
                        />
                    </div>
                    <div className="form-group update-client-product-form-group">
                        <label htmlFor="warrantyExpirationUpd">Warranty Expiration (Expiration de la Garantie):</label>
                        <input type="date" id="warrantyExpirationUpd" name="warrantyExpiration"
                            className="form-control update-client-product-form-control"
                            value={formData.warrantyExpiration} onChange={handleInputChange} required
                            disabled={isSaving}
                        />
                    </div>
                </div>
                <div className="form-actions update-client-product-form-buttons">
                    <button type="button" className="btn btn-cancel update-client-product-btn-cancel" onClick={handleCancel} disabled={isSaving}>Cancel</button>
                    <button type="submit" className="btn btn-confirm update-client-product-btn-confirm" disabled={isSaving}>
                       {isSaving ? 'Updating...' : 'Confirm & Update Product'}
                    </button>
                </div>
            </form>
        </div>
    );
}
export default UpdateClientProductView;