// frontend/src/pages/admin/pages/AddDataPage.js
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../../supabaseClient'; // Import supabase
import FileIcon from '../components/FileIcon';

// CSS Imports
import '../../admin/styles/_base.css'; // Base admin styles
import '../../admin/styles/AddDataPage.css'; // Page-specific styles

// Helper function to upload a single file
const uploadFile = async (bucketName, file, filePath) => {
    if (!file) return null; // Return null if no file is provided
    try {
        const { data, error } = await supabase.storage
            .from(bucketName) // Your Supabase Storage bucket name
            .upload(filePath, file); // Upload the file to the specified path

        if (error) {
            console.error(`Error uploading file ${file.name}:`, error);
            throw error; // Re-throw the error to be caught by the handleSubmit try/catch
        }
        console.log(`File uploaded successfully: ${data.path}`);
        return data.path; // Return the path where the file was stored in Storage
    } catch (err) {
         console.error(`Failed to upload file ${file.name}:`, err);
         throw err; // Ensure error is propagated
    }
};


const AddDataPage = () => {
  const [problem, setProblem] = useState('');
  const [solution, setSolution] = useState('');
  const [photosFiles, setPhotosFiles] = useState([]); // Use array for multiple files
  const [documentsFiles, setDocumentsFiles] = useState([]); // Use array
  const [videosFiles, setVideosFiles] = useState([]); // Use array
  const [isSaving, setIsSaving] = useState(false); // State to indicate saving process
  const [saveError, setSaveError] = useState(null); // State for save errors

  const navigate = useNavigate();

  const handleFileChange = (setter) => (event) => {
    if (event.target.files) {
       // Basic validation could go here if not handled by 'accept'
       setter(Array.from(event.target.files)); // Store File objects in state array
    } else {
      setter([]); // Clear files if input is cleared
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!problem.trim() || !solution.trim()) {
      setSaveError("Problem and Solution descriptions are required.");
      return;
    }

    setIsSaving(true);
    setSaveError(null); // Clear previous errors

    try {
        // --- File Uploads ---
        // Need to upload each file and collect their paths/URLs

        const bucketName = 'admin_files'; // Your Supabase Storage bucket name
        const basePath = `problems_solutions/${Date.now()}`; // Base path for this record's files (e.g., unique timestamp)
        const uploadedPhotoPaths = [];
        const uploadedDocumentPaths = [];
        const uploadedVideoPaths = [];

        // Upload Photos
        for (const file of photosFiles) {
            const filePath = `${basePath}/photos/${file.name}`;
            const path = await uploadFile(bucketName, file, filePath);
            if (path) uploadedPhotoPaths.push(path);
             // Error handling inside uploadFile, so we just check if path was returned
             // Or check fileDeletes array if you handle errors differently in uploadFile
        }

        // Upload Documents
         for (const file of documentsFiles) {
            const filePath = `${basePath}/documents/${file.name}`;
            const path = await uploadFile(bucketName, file, filePath);
            if (path) uploadedDocumentPaths.push(path);
        }

        // Upload Videos
         for (const file of videosFiles) {
            const filePath = `${basePath}/videos/${file.name}`;
            const path = await uploadFile(bucketName, file, filePath);
            if (path) uploadedVideoPaths.push(path);
        }


        // --- Insert Record into Database ---
        // Prepare the data matching the problems_solutions table schema
        const newRecordData = {
            problem: problem.trim(),
            solution: solution.trim(),
            photos: uploadedPhotoPaths.length > 0 ? uploadedPhotoPaths : null, // Store array of paths, null if empty
            documents: uploadedDocumentPaths.length > 0 ? uploadedDocumentPaths : null,
            videos: uploadedVideoPaths.length > 0 ? uploadedVideoPaths : null,
             // created_at and updated_at have default values in the table
        };

        // Insert the record
        // RLS policy "Admins have full access on problems_solutions" must be active
        const { data: insertedRecord, error: insertError } = await supabase
            .from('problems_solutions')
            .insert([newRecordData]) // Insert as an array even for a single record
            .select() // Select the inserted row to get its ID, etc.
            .single(); // Expecting only one row back

        if (insertError) {
            console.error("Error inserting record:", insertError);
            setSaveError(`Erreur lors de l'enregistrement de l'enregistrement: ${insertError.message}`);
             // TODO: Clean up uploaded files if DB insert fails? Requires tracking successful uploads.
        } else {
            console.log("Record inserted successfully:", insertedRecord);
            alert("Enregistrement ajouté avec succès !");
            // Redirect back to the database management page
            navigate('/admin/database-management');
        }

    } catch (err) {
        // This catches errors from uploadFile or unexpected issues
        console.error("Unexpected error during save:", err);
        setSaveError(`Une erreur inattendue est survenue lors de l'enregistrement: ${err.message}`);
         // TODO: Implement cleanup for files uploaded before the error occurred.
    } finally {
        setIsSaving(false); // Stop saving state
    }
  };

  const handleCancel = () => {
    navigate('/admin/database-management');
  };

   // Helper to display file names or count
   const formatFileNames = (filesArray) => {
       if (!filesArray || filesArray.length === 0) return null;
       if (filesArray.length === 1) return filesArray[0].name;
        return `${filesArray.length} files selected`;
   };

   // Helper to determine FileIcon type based on selected files (first file's type)
   const getFileIconType = (filesArray) => {
       if (!filesArray || filesArray.length === 0) return null;
       const fileType = filesArray[0]?.type?.toLowerCase();
        if (!fileType) return null;
       if (fileType.startsWith('image/')) return 'photo';
       if (fileType === 'application/pdf') return 'document';
       if (fileType.startsWith('video/')) return 'video';
        return 'document'; // Default
   };


  return (
    <div className="add-data-main-content admin-main-content-wrapper">
      <div className="page-header-container add-data-header">
        <h1>Client Dataset Operations</h1>
        <div className="page-header-logo add-data-logo">
        </div>
      </div>

      <div className="page-sub-header add-data-sub-header">
        <h2>Add New Knowledge Base Data</h2>
      </div>

       {saveError && <div className="error-message" style={{margin: '20px'}}>{saveError}</div>}

      <form onSubmit={handleSubmit} className="data-form-container add-data-form">
        <div className="form-group add-data-form-group">
          <label htmlFor="problem">Describe the problem:</label>
          <textarea
            id="problem"
            value={problem}
             className="form-control add-data-form-control"
            onChange={(e) => setProblem(e.target.value)}
            rows="4"
            required
          />
        </div>
        <div className="form-group add-data-form-group">
          <label htmlFor="solution">Give a description for the solution:</label>
          <textarea
            id="solution"
            value={solution}
             className="form-control add-data-form-control"
            onChange={(e) => setSolution(e.target.value)}
            rows="4"
            required
          />
        </div>

        <div className="form-group file-upload-group add-data-file-group">
          <label htmlFor="photos-upload-btn">Upload photos:</label>
          <div className="file-input-wrapper add-data-upload-container">
            <button id="photos-upload-btn" type="button" className="btn btn-upload add-data-btn-upload" onClick={() => document.getElementById('photos-upload-input').click()}>
              Upload photos
            </button>
            <input type="file" id="photos-upload-input" accept="image/*" multiple onChange={handleFileChange(setPhotosFiles)} style={{ display: 'none' }} />
             {photosFiles.length > 0 ? (
                 <span className="file-name-display add-data-file-name-display">{formatFileNames(photosFiles)}</span>
            ) : (
                 <FileIcon type="photo" className="add-data-media-icon" />
            )}
          </div>
        </div>

        <div className="form-group file-upload-group add-data-file-group">
          <label htmlFor="documents-upload-btn">Upload documents (pdf):</label>
          <div className="file-input-wrapper add-data-upload-container">
            <button id="documents-upload-btn" type="button" className="btn btn-upload add-data-btn-upload" onClick={() => document.getElementById('documents-upload-input').click()}>
              Upload files
            </button>
            <input type="file" id="documents-upload-input" accept=".pdf" multiple onChange={handleFileChange(setDocumentsFiles)} style={{ display: 'none' }} />
             {documentsFiles.length > 0 ? (
                <span className="file-name-display add-data-file-name-display">{formatFileNames(documentsFiles)}</span>
             ) : (
                <FileIcon type="document" className="add-data-media-icon" />
             )}
          </div>
        </div>

        <div className="form-group file-upload-group add-data-file-group">
          <label htmlFor="videos-upload-btn">Upload videos:</label>
          <div className="file-input-wrapper add-data-upload-container">
            <button id="videos-upload-btn" type="button" className="btn btn-upload add-data-btn-upload" onClick={() => document.getElementById('videos-upload-input').click()}>
              Upload videos
            </button>
            <input type="file" id="videos-upload-input" accept="video/*" multiple onChange={handleFileChange(setVideosFiles)} style={{ display: 'none' }} />
            {videosFiles.length > 0 ? (
                 <span className="file-name-display add-data-file-name-display">{formatFileNames(videosFiles)}</span>
            ) : (
                 <FileIcon type="video" className="add-data-media-icon" />
            )}
          </div>
        </div>

        <div className="form-actions add-data-form-buttons">
          <button type="button" className="btn btn-cancel add-data-btn-cancel" onClick={handleCancel} disabled={isSaving}>Cancel</button>
          <button type="submit" className="btn btn-confirm add-data-btn-confirm" disabled={isSaving}>
             {isSaving ? 'Saving...' : 'Confirm & Add Data'}
           </button>
        </div>
      </form>
    </div>
  );
};

export default AddDataPage;