// frontend/src/pages/admin/components/Sidebar.js
import React, { useEffect, useState } from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import { supabase } from '../../../supabaseClient'; // Import Supabase client

const UserIcon = () => ( /* ... same as before ... */
  <svg viewBox="0 0 24 24" fill="currentColor" width="100%" height="100%">
    <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z" />
  </svg>
);

const Sidebar = () => {
  const navigate = useNavigate();
  const [userDisplayName, setUserDisplayName] = useState('');
  const [isLoadingUserInfo, setIsLoadingUserInfo] = useState(true);

  useEffect(() => {
    let isMounted = true;

    const fetchUserData = async () => {
      setIsLoadingUserInfo(true);
      try {
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (!isMounted) return;

        if (authError || !user) {
          console.error("Error fetching user session for sidebar:", authError);
          setUserDisplayName('Utilisateur'); // Fallback display name
          setIsLoadingUserInfo(false);
          return;
        }

        // Fetch user details from your 'users' table
        const { data: userData, error: userDetailsError } = await supabase
          .from('users')
          .select('first_name, last_name, email') // Select fields you want to use
          .eq('id', user.id)
          .single();

        if (!isMounted) return;

        if (userDetailsError || !userData) {
          console.warn("Could not fetch user details from 'users' table for sidebar, or user not in table. Falling back to auth email.", userDetailsError);
          // Fallback to email from authentication if details are not found or error occurs
          setUserDisplayName(user.email || 'Admin');
        } else {
          let displayName = '';
          if (userData.first_name && userData.last_name) {
            displayName = `${userData.first_name} ${userData.last_name}`;
          } else if (userData.first_name) {
            displayName = userData.first_name;
          } else if (userData.email) { // Email from 'users' table
            displayName = userData.email;
          } else if (user.email) { // Email from 'auth.users'
            displayName = user.email;
          } else {
            displayName = 'Admin'; // Ultimate fallback
          }
          setUserDisplayName(displayName.trim() || 'Admin'); // Ensure not an empty string
        }
      } catch (error) {
        console.error("Unexpected error fetching user data for sidebar:", error);
        if (isMounted) {
          setUserDisplayName('Erreur Profil'); // Error display
        }
      } finally {
        if (isMounted) {
          setIsLoadingUserInfo(false);
        }
      }
    };

    fetchUserData();

    return () => {
      isMounted = false; // Cleanup to prevent state updates on unmounted component
    };
  }, []); // Empty dependency array ensures this runs once on mount

  const handleLogout = async () => {
    console.log("User logged out");
    // Clear any local mock user info if it's still being used
    localStorage.removeItem('devUserRole');
    localStorage.removeItem('devUserEmail');

    // Actual Supabase logout
    const { error } = await supabase.auth.signOut();
    if (error) {
        console.error("Error logging out:", error.message);
    }
    navigate('/login');
  };

  return (
    <aside className="admin-sidebar">
      <div className="sidebar-profile">
        <div className="sidebar-profile-icon-container">
          <UserIcon />
        </div>
        <span>
          {isLoadingUserInfo ? 'Chargement...' : userDisplayName}
        </span>
      </div>
      <nav className="sidebar-nav">
        <ul>
          <li>
            <NavLink 
              to="/admin/dashboard" 
              className={({ isActive }) => isActive ? "nav-link active" : "nav-link"}
            >
              Dashboard
            </NavLink>
          </li>
          <li>
            <NavLink 
              to="/admin/database-management" 
              className={({ isActive }) => isActive ? "nav-link active" : "nav-link"}
            >
              Database Management
            </NavLink>
          </li>
          <li>
            <NavLink 
              to="/admin/add-data"
              className={({ isActive }) => isActive ? "nav-link active" : "nav-link"}
            >
              Add to Database
            </NavLink>
          </li>
          <li>
            <NavLink 
              to="/admin/customer-management" 
              className={({ isActive }) => isActive ? "nav-link active" : "nav-link"}
            >
              Customer Management
            </NavLink>
          </li>
          <li>
            <NavLink 
              to="/admin/client-products" 
              className={({ isActive }) => isActive ? "nav-link active" : "nav-link"}
            >
              Client Products
            </NavLink>
          </li>
           <li>
            <NavLink 
              to="/admin/add-client-product" 
              className={({ isActive }) => isActive ? "nav-link active" : "nav-link"}
            >
              Add Client Product
            </NavLink>
          </li>
          <li>
            <NavLink 
              to="/admin/ticket-management"
              className={({ isActive }) => isActive ? "nav-link active" : "nav-link"}
            >
              Ticket Management
            </NavLink>
          </li>
          <li>
            <NavLink 
              to="/admin/logs" 
              className={({ isActive }) => isActive ? "nav-link active" : "nav-link"}
            >
              Logs and Audit Tracking
            </NavLink>
          </li>
        </ul>
      </nav>
      <button onClick={handleLogout} className="btn btn-logout">
        Log Out
      </button>
    </aside>
  );
};

export default Sidebar;