// src/pages/home/HomePage.js
import React, { useEffect, useState, useRef } from 'react';
import { Link, NavLink, useNavigate, useLocation } from 'react-router-dom';
import './HomePage.css';
import { supabase } from '../../supabaseClient';

import bomareLogoHeader from '../../assets/bomare_logo.png';
import heroImage from '../../assets/images/bomare_company.jpeg';
import techImage from '../../assets/images/bomare_tech.jpeg';

import {
    FaRobot, FaTasks, FaBook, FaUserCircle,
    FaFacebookF, FaTwitter, FaLinkedinIn, FaInstagram,
    FaChevronDown, FaChevronUp, FaStar, FaPaperPlane
} from 'react-icons/fa';

// --- HELPER COMPONENT FOR ANIMATED SECTIONS ---
const AnimatedSection = ({ children, animationClass = "fade-in-up-on-scroll", threshold = 0.1, style = {}, innerClass = "" }) => {
    const sectionRef = useRef(null);
    useEffect(() => {
        const currentRef = sectionRef.current;
        if (!currentRef) return;
        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        currentRef.classList.add('is-visible');
                        observer.unobserve(currentRef); // Animate only once
                    }
                });
            }, { threshold: threshold }
        );
        observer.observe(currentRef);
        return () => { if (currentRef) observer.unobserve(currentRef); };
    }, [threshold, animationClass, innerClass]); // Added dependencies
    return (
        <div ref={sectionRef} className={`home-section-animate-wrapper ${animationClass} ${innerClass}`} style={style}>
            {children}
        </div>
    );
};

const HomePage = () => {
    const navigate = useNavigate();
    const location = useLocation();

    // State for Review Modal, lifted to HomePage to be accessible by HomeHeroComponent
    const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);
    const [reviewStatus, setReviewStatus] = useState({ type: '', message: '' }); // For modal feedback

    // 1. HomeHeaderComponent
    const HomeHeaderComponent = () => {
        useEffect(() => {
            const headerElement = document.getElementById('home-header');
            const navMenu = document.querySelector('.home-nav-menu');
            let observer;

            const handleScroll = () => { 
                if (headerElement && window.scrollY > 50) headerElement.classList.add('scrolled');
                else if (headerElement) headerElement.classList.remove('scrolled');
            };
            window.addEventListener('scroll', handleScroll);

            const observerCallback = (entries) => {
                let anActiveHashLinkSet = false;
                const currentlyActiveLinks = navMenu?.querySelectorAll('a.active') || [];
                
                entries.forEach(entry => {
                    const id = entry.target.getAttribute('id');
                    const navLink = navMenu?.querySelector(`a[href="/#${id}"]`);
                    if (navLink) {
                        const rect = entry.boundingClientRect;
                        const vh = window.innerHeight;
                        const headerHeight = headerElement?.offsetHeight || 80;
                        if (entry.isIntersecting && 
                            ( (rect.top >= 0 && rect.top <= headerHeight + vh * 0.25) || // Top of section near header
                              (rect.top < 0 && rect.bottom >= headerHeight + vh * 0.15) || // Scrolling past, bottom still visible
                              (entry.intersectionRatio > 0.35 && rect.top < vh * 0.6 && rect.bottom > vh*0.2 ) // Reasonable portion in view
                            )
                           ) {
                            currentlyActiveLinks.forEach(link => link.classList.remove('active')); // Remove from all
                            navLink.classList.add('active'); // Add to current
                            anActiveHashLinkSet = true; 
                        } else {
                             // Only remove if this specific link was active and no longer meets criteria
                             // And another hash link hasn't taken precedence
                            // navLink.classList.remove('active'); 
                        }
                    }
                });

                const currentPath = window.location.pathname;
                const currentHash = window.location.hash;
                const homeBaseLink = navMenu?.querySelector('a[href="/"]:not([href^="/#"])'); // The root NavLink
                const aboutLink = navMenu?.querySelector('a[href="/public-about"]'); // The About NavLink

                // After processing intersections, if no hash link is active, manage NavLinks
                if (!anActiveHashLinkSet) {
                    currentlyActiveLinks.forEach(link => { // Remove from any hash links
                        if(link.getAttribute('href')?.startsWith('/#')) link.classList.remove('active');
                    }); 
                }
                
                // Handle NavLink active state for non-hash routes, react-router NavLink className prop does this mostly
                if (currentPath === "/public-about") {
                    if(homeBaseLink) homeBaseLink.classList.remove('active');
                    if(aboutLink && !aboutLink.classList.contains('active')) aboutLink.classList.add('active'); // NavLink should handle
                } else if (currentPath === "/" && !currentHash && !anActiveHashLinkSet) {
                    if(aboutLink) aboutLink.classList.remove('active');
                    if(homeBaseLink && !homeBaseLink.classList.contains('active')) homeBaseLink.classList.add('active');
                } else if (currentPath === "/" && currentHash) { // Hash is active
                    if(homeBaseLink) homeBaseLink.classList.remove('active');
                    if(aboutLink) aboutLink.classList.remove('active');
                }

            };
            const observerOptions = { rootMargin: `-${(headerElement?.offsetHeight || 80) + 5}px 0px -${window.innerHeight * 0.50}px 0px`, threshold: [0.01, 0.35, 0.5, 0.7]};
            const sections = document.querySelectorAll('.homepage-main-content section[id]');
            if(sections.length > 0 && navMenu) {
                 observer = new IntersectionObserver(observerCallback, observerOptions);
                 sections.forEach(section => observer.observe(section));
            }

            const handleNavClick = (e) => {
                const targetLink = e.target.closest('a');
                if (targetLink && targetLink.hash && (targetLink.pathname === '/' || targetLink.pathname === window.location.pathname)) { 
                    e.preventDefault();
                    const targetId = targetLink.hash.substring(1);
                    const targetElement = document.getElementById(targetId);
                    if (targetElement) {
                        navMenu?.querySelectorAll('a.active').forEach(link => link.classList.remove('active'));
                        targetLink.classList.add('active');
                        const headerOffset = headerElement?.offsetHeight || 80;
                        const elementPosition = targetElement.getBoundingClientRect().top + window.pageYOffset;
                        const offsetPosition = elementPosition - headerOffset;
                        window.scrollTo({ top: offsetPosition, behavior: "smooth" });
                        if (window.history.pushState) window.history.pushState(null, null, `/#${targetId}`);
                        else window.location.hash = targetId;
                    }
                }
            };
            navMenu?.addEventListener('click', handleNavClick);

            // Initial active state on page load
            const currentHash = window.location.hash;
            const currentPath = window.location.pathname;
            navMenu?.querySelectorAll('a.active').forEach(link => link.classList.remove('active'));

            if (currentPath === "/public-about") { /* NavLink handles */ }
            else if (currentPath === "/" && currentHash) {
                 navMenu?.querySelector(`a[href="/${currentHash}"]`)?.classList.add('active');
            } else if (currentPath === "/" && !currentHash) {
                 navMenu?.querySelector('a[href="/"]:not([href^="/#"])')?.classList.add('active');
            }

            return () => {
                window.removeEventListener('scroll', handleScroll);
                if (observer) observer.disconnect();
                navMenu?.removeEventListener('click', handleNavClick);
            };
        }, []);

        return ( 
            <header id="home-header" className="home-page-header">
                <div className="container home-header-content">
                    <Link to="/" className="home-logo-link"><img src={bomareLogoHeader} alt="Logo BOMARE" className="bomare-logo-img-header"/></Link>
                    <nav className="home-nav-menu">
                        <ul>
                            {/* NavLink uses its `className` prop for active state for full page routes */}
                            <li><NavLink to="/" end className={({isActive}) => (isActive && !window.location.hash && window.location.pathname === "/" ? "active" : "")}>Accueil</NavLink></li>
                            <li><NavLink to="/public-about" className={({isActive}) => (isActive ? "active" : "")}>Découvrez Bomare et notre Plateforme SAV</NavLink></li>
                            {/* In-page links managed by JS */}
                            <li><a href="/#how-ai-transforms">Fonctionnalités</a></li>
                            <li><a href="/#faq-public-section">FAQ</a></li>
                        </ul>
                    </nav>
                    <div className="home-auth-buttons">
                         <Link to="/login" className="btn btn-outline home-btn">Connexion / S'inscrire</Link>
                         {/* <Link to="/ai-chatbot-demo" className="btn btn-primary home-btn">Essayer le Chatbot IA</Link> */}
                    </div>
                </div>
            </header>
        );
    };

    // 2. HomeHeroComponent
    const HomeHeroComponent = () => {
        const openReviewModal = () => {
            setReviewStatus({type:'', message:''}); // Clear previous status
            setIsReviewModalOpen(true);
        };
        return ( 
            <section className="hero" id="hero-section">
                <div className="container">
                    <h1>GESTION DU SERVICE APRÈS-VENTE POUR BOMARE</h1>
                    <p>Améliorer le support après-vente avec une assistance par chatbot IA, le suivi des problèmes en temps réel et une interaction transparente technicien-client.</p>
                    <div className="hero-buttons">
                        <button onClick={openReviewModal} className="btn btn-primary">
                            Laisser un Avis <FaStar style={{marginLeft: '5px', fontSize: '0.9em'}}/>
                        </button>
                        <Link to="/report-website-issue" className="btn btn-outline">
                            Signaler un Problème <FaPaperPlane style={{marginLeft: '5px', fontSize: '0.9em'}}/>
                        </Link>
                    </div>
                    <div className="hero-image float-animation"><img src={heroImage} alt="Présentation de l'entreprise BOMARE" /></div>
                </div>
            </section>
        );
    };

    // 3. HomeHowAiTransformsComponent ("Fonctionnalités")
    const HomeHowAiTransformsComponent = () => { 
        return (
            <section className="how-ai-section" id="how-ai-transforms">
                <div className="container">
                    <div className="section-header"><h2>Comment l'IA Transforme <br/> le Support Après-Vente</h2><p className="section-subtitle">Notre plateforme intelligente basée sur l'IA améliore le service client, rationalise la résolution des problèmes et dote les techniciens des bons outils.</p></div>
                    <div className="how-ai-grid">
                        <div className="how-ai-item"><div className="how-ai-icon"><FaRobot size={30} /></div><h3>Assistance Chatbot IA</h3><p>Support IA instantané pour les clients avec des requêtes liées aux produits, fournit des guides de dépannage et transmet les problèmes non résolus aux techniciens.</p></div>
                        <div className="how-ai-item"><div className="how-ai-icon"><FaTasks size={30} /></div><h3>Suivi et Escalade des Problèmes</h3><p>Les clients peuvent signaler des problèmes et suivre leur statut de réparation en temps réel. La plateforme les transmet automatiquement à un technicien.</p></div>
                        <div className="how-ai-item"><div className="how-ai-icon"><FaBook size={30} /></div><h3>Base de Connaissances Technicien</h3><p>Les techniciens peuvent rechercher des guides, manuels, vidéos et solutions de dépannage. L'IA trouve les instructions de réparation les plus pertinentes en fonction du problème.</p></div>
                    </div>
                </div>
            </section>
        );
    };

    // 4. HomeSmartSupportComponent
    const HomeSmartSupportComponent = () => { 
        return (
            <section className="smart-support-section" id="smart-support-section">
                <div className="container smart-support-container">
                    <div className="smart-support-content"><h2>Support Intelligent, Service de Confiance, Solutions Instantanées</h2><div className="smart-support-features-list"><p><span>✓</span> Support instantané pour les requêtes clients avec dépannage intelligent.</p><p><span>✓</span> Signalez et suivez facilement les problèmes des produits en temps réel.</p><p><span>✓</span> Clients, techniciens et administrateurs obtiennent un accès sécurisé basé sur les rôles.</p></div></div>
                    <div className="smart-support-image-container"><img src={techImage} alt="BOMARE Company Conçoit la Technologie du Futur" className="smart-support-illustration-image"/></div>
                </div>
            </section>
        );
    };
    
    // 5. HomeTestimonialsComponent
    const HomeTestimonialsComponent = () => { 
        const [testimonials, setTestimonials] = useState([]);
        const [isLoading, setIsLoading] = useState(true);
        const [error, setError] = useState(null);

        useEffect(() => {
            const fetchTestimonials = async () => {
                setIsLoading(true);
                try {
                    const { data, error: supabaseError } = await supabase.from('testimonials').select('id, name, role, testimonial_text, avatar_url, rating').eq('is_approved', true).order('submitted_at', { ascending: false }).limit(3);
                    if (supabaseError) throw supabaseError;
                    setTestimonials(data || []);
                } catch (err) { console.error("Testimonial fetch error:", err); setError("Impossible de charger les témoignages."); } 
                finally { setIsLoading(false); }
            };
            fetchTestimonials();
        }, []);

        return (
            <section className="testimonials-section" id="testimonials">
                <div className="container">
                    <div className="section-header"><h2>Ce que disent nos clients</h2><p className="section-subtitle">Découvrez les retours de nos clients satisfaits.</p></div>
                    {isLoading && <p className="loading-text">Chargement des témoignages...</p>}
                    {error && <p className="error-text">{error}</p>}
                    {!isLoading && !error && testimonials.length === 0 && <p className="info-text">Aucun témoignage à afficher pour le moment.</p>}
                    {!isLoading && !error && testimonials.length > 0 && (
                        <div className="testimonials-grid">
                            {testimonials.map((testimonial) => (
                                <div className="testimonial-card" key={testimonial.id}>
                                    <div className="testimonial-quote-icon">”</div>
                                    <div className="testimonial-content"><p>{testimonial.testimonial_text}</p></div>
                                    <div className="testimonial-author">
                                        <div className="testimonial-avatar-icon-wrapper">{testimonial.avatar_url ? <img src={testimonial.avatar_url} alt={testimonial.name} className="testimonial-avatar-img" /> : <FaUserCircle className="testimonial-avatar-icon" size={45} />}</div>
                                        <div className="testimonial-author-info"><h4>{testimonial.name}</h4><span>{testimonial.role || 'Client'}</span></div>
                                    </div>
                                    {testimonial.rating && (<div className="testimonial-rating">{Array.from({ length: 5 }, (_, i) => (<FaStar key={i} className={i < testimonial.rating ? 'star-filled' : 'star-empty'}/>))}</div>)}
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            </section>
        );
    };

    // ReviewFormModal Component (for anonymous review submission)
    const ReviewFormModal = ({ isOpen, onClose, onSubmitStatusUpdate }) => {
        const [formData, setFormData] = useState({ name: '', role: '', testimonial_text: '', rating: 5 });
        const [isSubmitting, setIsSubmitting] = useState(false);

        useEffect(() => {
            if(isOpen) {
                setFormData({ name: '', role: '', testimonial_text: '', rating: 5 }); // Reset form on open
            }
        }, [isOpen]);

        if (!isOpen) return null;

        const handleChange = (e) => setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));
        
        const handleSubmit = async (e) => {
            e.preventDefault();
            if (!formData.name.trim()) { onSubmitStatusUpdate({ type: 'error', message: 'Le nom est requis.' }); return; }
            if (!formData.testimonial_text.trim()) { onSubmitStatusUpdate({ type: 'error', message: 'Le témoignage ne peut pas être vide.' }); return; }
            
            setIsSubmitting(true);
            onSubmitStatusUpdate({ type: '', message: ''}); 
            try {
                const { error } = await supabase.from('testimonials').insert([{ name: formData.name, role: formData.role || null, testimonial_text: formData.testimonial_text, rating: parseInt(formData.rating, 10) }]);
                if (error) throw error;
                onSubmitStatusUpdate({ type: 'success', message: 'Avis soumis pour approbation. Merci !' });
                setTimeout(() => { onClose(); onSubmitStatusUpdate({ type: '', message: '' }); }, 2500); 
            } catch (error) {
                console.error("Error submitting review:", error);
                let msg = 'Échec de la soumission de l\'avis. Veuillez réessayer.';
                if (error.message.includes("violates check constraint")) msg = "Veuillez vérifier que tous les champs obligatoires sont remplis correctement (Nom, Témoignage, Note).";
                onSubmitStatusUpdate({ type: 'error', message: msg });
            } finally { setIsSubmitting(false); }
        };

        return ( 
            <div className="review-modal-overlay">
                <div className="review-modal-content">
                    <button onClick={onClose} className="review-modal-close">×</button>
                    <h2>Laissez votre avis</h2>
                    {reviewStatus.message && <p className={`form-message ${reviewStatus.type}`}>{reviewStatus.message}</p>}
                    <form onSubmit={handleSubmit}>
                        <input type="text" name="name" value={formData.name} onChange={handleChange} placeholder="Votre Nom (public)" required />
                        <input type="text" name="role" value={formData.role} onChange={handleChange} placeholder="Votre Rôle/Entreprise (optionnel)" />
                        <textarea name="testimonial_text" value={formData.testimonial_text} onChange={handleChange} placeholder="Votre témoignage..." rows="4" required></textarea>
                        <div className="rating-input-container"><label htmlFor="rating-modal">Note :</label><select name="rating" id="rating-modal" value={formData.rating} onChange={handleChange} required>{[5,4,3,2,1].map(num => <option key={num} value={num}>{num} Étoile{num > 1 ? 's':''}</option>)}</select></div>
                        <button type="submit" className="btn btn-primary" disabled={isSubmitting}>{isSubmitting ? 'Envoi...' : <>Envoyer l'avis <FaPaperPlane style={{marginLeft:"8px"}}/></>}</button>
                    </form>
                </div>
            </div>
        );
    };

    // 6. HomeFaqSectionComponent
    const HomeFaqSectionComponent = () => { 
        const [faqs, setFaqs] = useState([]); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); const [openFaqId, setOpenFaqId] = useState(null);
        useEffect(() => {const fetchFaqs = async () => {setLoading(true); try { const { data, error: e } = await supabase.from('public_faqs').select('id, question, answer').order('display_order', { ascending: true }); if (e) throw e; setFaqs(data || []); } catch (err) { console.error("FAQ fetch error:", err); setError("Erreur chargement FAQs.");} finally {setLoading(false);}}; fetchFaqs();}, []);
        const toggleFaq = (id) => setOpenFaqId(openFaqId === id ? null : id);
        if (loading) return <section className="home-faq-section" id="faq-public-section"><div className="container"><p className="loading-text">Chargement des FAQs...</p></div></section>;
        if (error) return <section className="home-faq-section" id="faq-public-section"><div className="container"><p className="error-text">{error}</p></div></section>;
        if (faqs.length === 0 && !loading) return <section className="home-faq-section" id="faq-public-section"><div className="container"><p className="info-text">Aucune FAQ disponible pour le moment.</p></div></section>;

        return (
            <section className="home-faq-section" id="faq-public-section">
                <div className="container">
                    <div className="section-header"><h2>Questions Fréquemment Posées</h2><p className="section-subtitle">Trouvez des réponses rapides aux questions courantes.</p></div>
                    <div className="faq-list">
                        {faqs.map(faq => (
                            <div className={`faq-item-public ${openFaqId === faq.id ? 'open' : ''}`} key={faq.id}>
                                <button className="faq-question-public" onClick={() => toggleFaq(faq.id)}><span>{faq.question}</span>{openFaqId === faq.id ? <FaChevronUp /> : <FaChevronDown />}</button>
                                <div className="faq-answer-public"><p>{faq.answer}</p></div>
                            </div>
                        ))}
                    </div>
                </div>
            </section>
        );
    };

    // 7. HomeJoinUsComponent
    const HomeJoinUsComponent = () => { 
        return (
            <section className="join-us-section" id="join-us-section">
                <div className="container"><div className="join-us-container join-us-container-animated"><h2>Prêt à transformer votre expérience SAV?</h2><p className="section-subtitle" style={{color:'var(--text-secondary)',maxWidth:'600px',margin:'0 auto 30px auto'}}>Rejoignez la plateforme SAVBot pour une assistance intelligente et efficace.</p><div className="join-us-buttons"><Link to="/signup" className="btn btn-primary join-us-btn">Créer un compte</Link><Link to="/login" className="btn btn-outline join-us-btn">Se connecter</Link></div></div></div><div className="join-us-bg-elements"></div>
            </section>
        );
    };
    
    // 8. HomeFooterComponent (with updated links)
    const HomeFooterComponent = () => { 
        const currentYear = new Date().getFullYear(); 
        const scrollToSection = (e, sectionId) => {
            if (window.location.pathname === '/') {
                e.preventDefault(); 
                const targetElement = document.getElementById(sectionId); 
                if (targetElement) { 
                    const headerOffset = document.getElementById('home-header')?.offsetHeight || 80; 
                    const elementPosition = targetElement.getBoundingClientRect().top + window.pageYOffset; 
                    const offsetPosition = elementPosition - headerOffset; 
                    window.scrollTo({ top: offsetPosition, behavior: 'smooth' }); 
                    if(window.history.pushState) window.history.pushState(null, null, `/#${sectionId}`); 
                    else window.location.hash = sectionId;
                }
            }
            // If not on homepage, allow default link behavior (e.g., to navigate to /#sectionId)
        };
        return (
            <footer className="home-page-footer">
                <div className="container">
                    <div className="home-footer-content">
                        <div className="home-footer-col footer-col-main"><div className="home-footer-logo"><span className="savbot-logo-text">SAVBot</span></div><p style={{color:'var(--text-secondary)',fontSize:'0.9rem',marginTop:'-15px',marginBottom:'20px'}}>Une solution BOMARE Company</p><div className="home-footer-social"><a href="https://facebook.com/bomarecompany" target="_blank" rel="noopener noreferrer" className="social-icon" aria-label="Facebook"><FaFacebookF/></a><a href="https://twitter.com/bomarecompany" target="_blank" rel="noopener noreferrer" className="social-icon" aria-label="Twitter"><FaTwitter/></a><a href="https://linkedin.com/company/bomarecompany" target="_blank" rel="noopener noreferrer" className="social-icon" aria-label="LinkedIn"><FaLinkedinIn/></a><a href="https://instagram.com/bomarecompany" target="_blank" rel="noopener noreferrer" className="social-icon" aria-label="Instagram"><FaInstagram/></a></div></div>
                        <div className="home-footer-col footer-col-links"><h3>Navigation</h3><ul><li><Link to="/">Accueil</Link></li><li><Link to="/public-about">À Propos</Link></li><li><Link to="/#how-ai-transforms" onClick={(e)=>scrollToSection(e,'how-ai-transforms')}>Fonctionnalités</Link></li>{/* <li><Link to="/ai-chatbot-demo">Démo Chatbot IA</Link></li> */}<li><Link to="/#faq-public-section" onClick={(e)=>scrollToSection(e,'faq-public-section')}>FAQ Publique</Link></li></ul></div>
                        <div className="home-footer-col footer-col-links"><h3>Support Client</h3><ul><li><Link to="/contact-support">Contacter le Support</Link></li><li><Link to="/report-website-issue">Signaler Problème Site</Link></li><li><Link to="/customer/knowledge-base">Base de Connaissances</Link></li></ul></div>
                        <div className="home-footer-col footer-col-links"><h3>Légal</h3><ul><li><Link to="/privacy-policy">Politique de Confidentialité</Link></li><li><Link to="/terms-of-use">Conditions d'Utilisation</Link></li></ul></div>
                    </div>
                    <div className="home-footer-bottom"><p>© {currentYear} SAVBot par BOMARE Company. Tous droits réservés.</p></div>
                </div>
            </footer>
        );
    };

    // --- RETURN MAIN HOMEPAGE STRUCTURE ---
    return (
        <div className="homepage-wrapper">
            <HomeHeaderComponent />
            <main className="homepage-main-content">
                <HomeHeroComponent />
                <AnimatedSection animationClass="fade-in-up-on-scroll" threshold={0.2} innerClass="how-ai-wrapper"><HomeHowAiTransformsComponent /></AnimatedSection>
                <AnimatedSection animationClass="fade-in-up-on-scroll" threshold={0.25} innerClass="smart-support-wrapper"><HomeSmartSupportComponent /></AnimatedSection>
                <AnimatedSection animationClass="fade-in-up-on-scroll" threshold={0.15} innerClass="testimonials-wrapper"><HomeTestimonialsComponent /></AnimatedSection>
                <AnimatedSection animationClass="fade-in-up-on-scroll" threshold={0.15} innerClass="faq-wrapper"><HomeFaqSectionComponent /></AnimatedSection>
                <AnimatedSection animationClass="fade-in-up-on-scroll" threshold={0.1} innerClass="join-us-wrapper"><HomeJoinUsComponent /></AnimatedSection>
            </main>
            <HomeFooterComponent />
            <ReviewFormModal 
                isOpen={isReviewModalOpen} 
                onClose={() => { 
                    setIsReviewModalOpen(false); 
                    setReviewStatus({type:'', message:''}); // Clear status on explicit close
                }} 
                onSubmitStatusUpdate={setReviewStatus}
            />
        </div>
    );
};

export default HomePage;