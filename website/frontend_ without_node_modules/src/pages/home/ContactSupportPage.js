// src/pages/home/ContactSupportPage.js
import React, { useState, useEffect, useRef } from 'react';
import { Link } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import './PublicPageStyles.css'; // Shared styles for header/footer consistency
import './ContactSupportPage.css'; // Specific styles for this page
import { FaEnvelope, FaPaperPlane, FaCheckCircle, FaExclamationTriangle } from 'react-icons/fa';

// Re-using AnimatedElement logic for consistency if needed
const AnimatedElement = ({ children, animationClass = "fade-in-up-on-scroll", threshold = 0.1, style = {}, delay = 0 }) => {
    const elementRef = useRef(null);
    useEffect(() => {
        const currentRef = elementRef.current;
        if (!currentRef) return;
        const observer = new IntersectionObserver(
            (entries) => { entries.forEach((entry) => { if (entry.isIntersecting) { if(delay > 0 && currentRef.style.animationDelay === '') { currentRef.style.animationDelay = `${delay}s`; } currentRef.classList.add('is-visible'); observer.unobserve(currentRef); } }); },
            { threshold: threshold }
        );
        observer.observe(currentRef);
        return () => { if (currentRef) observer.unobserve(currentRef); };
    }, [threshold, delay, animationClass]); // Added animationClass to deps
    return ( <div ref={elementRef} className={`contact-support-animated-element ${animationClass}`} style={style}>{children}</div> );
};

const ContactSupportPage = () => {
    const [formData, setFormData] = useState({
        name: '',
        email: '',
        subject: '',
        message: '',
        category: 'General Inquiry',
    });
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [submitStatus, setSubmitStatus] = useState({ type: '', message: '' });

    useEffect(() => {
        window.scrollTo(0, 0);
        // Pre-fill email if user is logged in (optional)
        const fetchUser = async () => {
            const { data: { user } } = await supabase.auth.getUser();
            if (user && user.email) {
                setFormData(prev => ({ ...prev, email: user.email }));
                 // You could also fetch name from 'Users' table if available
                 const {data: profile} = await supabase.from('Users').select('first_name, last_name').eq('id', user.id).single();
                 if(profile && (profile.first_name || profile.last_name)){
                     setFormData(prev => ({...prev, name: `${profile.first_name || ''} ${profile.last_name || ''}`.trim() }));
                 }
            }
        };
        fetchUser();
    }, []);

    const handleChange = (e) => {
        setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!formData.email.trim() || !formData.subject.trim() || !formData.message.trim()) {
            setSubmitStatus({ type: 'error', message: 'Email, Sujet, et Message sont requis.' });
            return;
        }
        setIsSubmitting(true);
        setSubmitStatus({ type: '', message: '' });

        try {
            const { error } = await supabase.from('support_requests').insert([formData]);
            if (error) throw error;
            setSubmitStatus({ type: 'success', message: 'Votre demande d\'assistance a été envoyée. Nous vous répondrons bientôt !' });
            setFormData({ name: '', email: '', subject: '', message: '', category: 'General Inquiry' }); // Reset form
            // Optionally re-fetch user data to pre-fill if user was logged in, for next submission
            const { data: { user } } = await supabase.auth.getUser();
            if (user && user.email) setFormData(prev => ({ ...prev, email: user.email }));

            setTimeout(() => setSubmitStatus({ type: '', message: '' }), 6000);
        } catch (error) {
            console.error("Error submitting support request:", error);
            setSubmitStatus({ type: 'error', message: 'Échec de l\'envoi. Veuillez réessayer.' });
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <div className="public-page-container contact-support-page-container">
            <div className="container contact-support-form-wrapper">
                <AnimatedElement animationClass="fade-in-down-on-scroll" threshold={0.1}>
                    <div className="contact-support-header">
                        <FaEnvelope className="header-icon" />
                        <h1>Contacter Notre Support</h1>
                        <p>
                            Besoin d'aide ou une question ? Remplissez le formulaire ci-dessous et notre équipe vous contactera dans les plus brefs délais.
                        </p>
                    </div>
                </AnimatedElement>

                <form onSubmit={handleSubmit} className="contact-support-form">
                    <AnimatedElement animationClass="fade-in-up-on-scroll" delay={0.1}>
                        <div className="form-grid">
                            <div className="form-group">
                                <label htmlFor="name">Votre Nom (Optionnel)</label>
                                <input type="text" id="name" name="name" value={formData.name} onChange={handleChange} placeholder="Ex: Marie Curie" />
                            </div>
                            <div className="form-group">
                                <label htmlFor="email">Votre Email *</label>
                                <input type="email" id="email" name="email" value={formData.email} onChange={handleChange} placeholder="Ex: marie.curie@example.com" required />
                            </div>
                        </div>
                    </AnimatedElement>

                    <AnimatedElement animationClass="fade-in-up-on-scroll" delay={0.2}>
                        <div className="form-group">
                            <label htmlFor="category">Catégorie de la Demande</label>
                            <select id="category" name="category" value={formData.category} onChange={handleChange}>
                                <option value="General Inquiry">Question Générale</option>
                                <option value="Technical Issue">Problème Technique (Produit)</option>
                                <option value="Product Question">Question sur un Produit</option>
                                <option value="Account Help">Aide Compte Utilisateur</option>
                                <option value="Feedback">Commentaire / Suggestion</option>
                                <option value="Other">Autre</option>
                            </select>
                        </div>
                    </AnimatedElement>
                    
                    <AnimatedElement animationClass="fade-in-up-on-scroll" delay={0.3}>
                        <div className="form-group">
                            <label htmlFor="subject">Sujet *</label>
                            <input type="text" id="subject" name="subject" value={formData.subject} onChange={handleChange} placeholder="Ex: Problème avec mon téléviseur modèle X" required />
                        </div>
                    </AnimatedElement>

                    <AnimatedElement animationClass="fade-in-up-on-scroll" delay={0.4}>
                        <div className="form-group">
                            <label htmlFor="message">Votre Message *</label>
                            <textarea id="message" name="message" value={formData.message} onChange={handleChange} rows="7" placeholder="Décrivez votre demande en détail..." required></textarea>
                        </div>
                    </AnimatedElement>

                    {submitStatus.message && (
                        <AnimatedElement animationClass="fade-in-up-on-scroll" delay={0.45}>
                            <div className={`form-message ${submitStatus.type}`}>
                                {submitStatus.type === 'success' ? <FaCheckCircle /> : <FaExclamationTriangle />}
                                {submitStatus.message}
                            </div>
                        </AnimatedElement>
                    )}

                    <AnimatedElement animationClass="fade-in-up-on-scroll" delay={0.5}>
                        <div className="form-actions">
                            <Link to="/" className="btn btn-outline contact-cancel-btn">Retour à l'Accueil</Link>
                            <button type="submit" className="btn btn-primary contact-submit-btn" disabled={isSubmitting}>
                                {isSubmitting ? (<>Envoi... <span className="button-spinner"></span></>) : (<>Envoyer <FaPaperPlane /></>)}
                            </button>
                        </div>
                    </AnimatedElement>
                </form>
            </div>
        </div>
    );
};

export default ContactSupportPage;