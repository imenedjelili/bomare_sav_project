// src/pages/home/PublicReportIssuePage.js
import React, { useState, useEffect, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import './PublicPageStyles.css'; // Shared styles
import './PublicReportIssuePage.css'; // Specific styles for this page
import { FaPaperPlane, FaExclamationTriangle, FaCheckCircle } from 'react-icons/fa';

// Re-using AnimatedSection logic for consistency if needed, or just apply directly
const AnimatedElement = ({ children, animationClass = "fade-in-up-on-scroll", threshold = 0.1, style = {}, delay = 0 }) => {
    const elementRef = useRef(null);

    useEffect(() => {
        const currentRef = elementRef.current;
        if (!currentRef) return;

        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        // Add delay via style if not handled by animation-delay in CSS
                        if(delay > 0 && currentRef.style.animationDelay === '') {
                            currentRef.style.animationDelay = `${delay}s`;
                        }
                        currentRef.classList.add('is-visible');
                        observer.unobserve(currentRef);
                    }
                });
            },
            { threshold: threshold }
        );
        observer.observe(currentRef);
        return () => { if (currentRef) observer.unobserve(currentRef); };
    }, [threshold, delay]);

    return (
        <div ref={elementRef} className={`report-issue-animated-element ${animationClass}`} style={style}>
            {children}
        </div>
    );
};


const PublicReportIssuePage = () => {
    const navigate = useNavigate();
    const [formData, setFormData] = useState({
        reporter_name: '',
        reporter_email: '',
        issue_type: 'Bug',
        page_url: '',
        description: '',
    });
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [submitStatus, setSubmitStatus] = useState({ type: '', message: '' }); // 'success', 'error'

    useEffect(() => {
        window.scrollTo(0, 0);
        // Pre-fill URL if available (simple version, more robust detection might be needed)
        if (window.location. Lreferr) { // if this page was navigated from another page on the same site
            try {
                 const previousUrl = new URL(document.referrer);
                 if(previousUrl.origin === window.location.origin){
                     setFormData(prev => ({ ...prev, page_url: document.referrer }));
                 }
            } catch (e) { /* Not a valid URL or different origin */ }
        }
    }, []);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!formData.description.trim()) {
            setSubmitStatus({ type: 'error', message: 'La description est requise.' });
            return;
        }
        setIsSubmitting(true);
        setSubmitStatus({ type: '', message: '' });

        const browser_info = navigator.userAgent;

        try {
            const { error } = await supabase
                .from('public_website_issues')
                .insert([{ ...formData, browser_info }]);

            if (error) throw error;

            setSubmitStatus({ type: 'success', message: 'Votre problème a été signalé avec succès. Merci !' });
            setFormData({ reporter_name: '', reporter_email: '', issue_type: 'Bug', page_url: '', description: '' });
            setTimeout(() => {
                // navigate('/'); // Optionally navigate away or just show message
                setSubmitStatus({ type: '', message: ''}); // Clear message after a while
            }, 5000);

        } catch (error) {
            console.error("Error submitting issue:", error);
            setSubmitStatus({ type: 'error', message: 'Échec de la soumission. Veuillez réessayer.' });
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <div className="public-page-container report-issue-page-container">
            <div className="container report-issue-form-wrapper">
                <AnimatedElement animationClass="fade-in-down-on-scroll" threshold={0.1}>
                    <div className="report-issue-header">
                        <FaExclamationTriangle className="header-icon" />
                        <h1>Signaler un Problème sur le Site</h1>
                        <p>
                            Aidez-nous à améliorer votre expérience en signalant tout bug, erreur,
                            ou suggestion concernant notre site web.
                        </p>
                    </div>
                </AnimatedElement>

                <form onSubmit={handleSubmit} className="report-issue-form">
                    <AnimatedElement animationClass="fade-in-up-on-scroll" delay={0.1}>
                        <div className="form-grid">
                            <div className="form-group">
                                <label htmlFor="reporter_name">Votre Nom (Optionnel)</label>
                                <input
                                    type="text"
                                    id="reporter_name"
                                    name="reporter_name"
                                    value={formData.reporter_name}
                                    onChange={handleChange}
                                    placeholder="Ex: Jean Dupont"
                                />
                            </div>
                            <div className="form-group">
                                <label htmlFor="reporter_email">Votre Email (Optionnel)</label>
                                <input
                                    type="email"
                                    id="reporter_email"
                                    name="reporter_email"
                                    value={formData.reporter_email}
                                    onChange={handleChange}
                                    placeholder="Ex: jean.dupont@example.com"
                                />
                            </div>
                        </div>
                    </AnimatedElement>

                    <AnimatedElement animationClass="fade-in-up-on-scroll" delay={0.2}>
                         <div className="form-group">
                            <label htmlFor="issue_type">Type de Problème</label>
                            <select
                                id="issue_type"
                                name="issue_type"
                                value={formData.issue_type}
                                onChange={handleChange}
                            >
                                <option value="Bug">Bug / Erreur Technique</option>
                                <option value="Typo">Erreur de Texte / Faute</option>
                                <option value="Suggestion">Suggestion d'Amélioration</option>
                                <option value="Performance">Problème de Performance</option>
                                <option value="Accessibility">Problème d'Accessibilité</option>
                                <option value="Other">Autre</option>
                            </select>
                        </div>
                    </AnimatedElement>

                   <AnimatedElement animationClass="fade-in-up-on-scroll" delay={0.3}>
                        <div className="form-group">
                            <label htmlFor="page_url">URL de la Page Concernée (Si applicable)</label>
                            <input
                                type="url"
                                id="page_url"
                                name="page_url"
                                value={formData.page_url}
                                onChange={handleChange}
                                placeholder="Ex: https://votre-site.com/page-specifique"
                            />
                        </div>
                    </AnimatedElement>

                    <AnimatedElement animationClass="fade-in-up-on-scroll" delay={0.4}>
                        <div className="form-group">
                            <label htmlFor="description">Description du Problème *</label>
                            <textarea
                                id="description"
                                name="description"
                                value={formData.description}
                                onChange={handleChange}
                                rows="6"
                                required
                                placeholder="Veuillez décrire le problème rencontré le plus précisément possible..."
                            ></textarea>
                        </div>
                    </AnimatedElement>

                    {submitStatus.message && (
                        <AnimatedElement animationClass="fade-in-up-on-scroll" delay={0.45}>
                            <div className={`form-message ${submitStatus.type}`}>
                                {submitStatus.type === 'success' ? <FaCheckCircle /> : <FaExclamationTriangle />}
                                {submitStatus.message}
                            </div>
                        </AnimatedElement>
                    )}

                    <AnimatedElement animationClass="fade-in-up-on-scroll" delay={0.5}>
                        <div className="form-actions">
                            <Link to="/" className="btn btn-outline report-cancel-btn">
                                Annuler
                            </Link>
                            <button type="submit" className="btn btn-primary report-submit-btn" disabled={isSubmitting}>
                                {isSubmitting ? (
                                    <>
                                        Envoi en cours... <span className="button-spinner"></span>
                                    </>
                                ) : (
                                    <>
                                        Envoyer le Rapport <FaPaperPlane />
                                    </>
                                )}
                            </button>
                        </div>
                    </AnimatedElement>
                </form>
            </div>
        </div>
    );
};

export default PublicReportIssuePage;