// src/components/Sidebar.js
import React, { useState, useEffect } from 'react';
import { NavLink } from 'react-router-dom';
import {
  FiGrid, FiAlertCircle, FiFilePlus, FiHelpCircle, FiFileText,
  FiBell, FiSettings, FiUser, FiGlobe, FiArchive
} from 'react-icons/fi';
// Removed mockUser
import { supabase } from '../supabaseClient'; // Import Supabase client
import './Sidebar.css';

const Sidebar = React.forwardRef(({ isOpen }, ref) => {
  // const user = mockUser; // Remove mockUser
  const [userData, setUserData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchUserData = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();

        if (authError || !authUser) {
          console.warn("Sidebar: No authenticated user found or error.", authError?.message);
          setError("Utilisateur non authentifié.");
          setUserData(null);
          setIsLoading(false);
          return;
        }

        const userId = authUser.id;

        const { data: dbUserData, error: dbUserError } = await supabase
          .from('Users') // Assuming your table is named 'Users'
          .select('first_name, last_name') // Fetch first_name and last_name
          .eq('id', userId)
          .single();

        if (dbUserError) {
          console.error("Sidebar: Error fetching user details from DB:", dbUserError);
          setError("Erreur de chargement du profil.");
          setUserData(null); // Clear data on error
        } else if (dbUserData) {
          setUserData({
            name: `${dbUserData.first_name || ''} ${dbUserData.last_name || ''}`.trim() || "Utilisateur",
            clientId: userId // Use the auth user's ID as the client ID
          });
        } else {
          // User authenticated but no corresponding row in Users table
          console.warn("Sidebar: User data not found in 'Users' table for ID:", userId);
          setError("Profil utilisateur introuvable.");
          setUserData({ name: "Utilisateur Invité", clientId: userId }); // Fallback
        }
      } catch (e) {
        console.error("Sidebar: Unexpected error fetching user data:", e);
        setError("Une erreur inattendue est survenue.");
        setUserData(null);
      } finally {
        setIsLoading(false);
      }
    };

    if (isOpen) { // Optionally fetch only when sidebar is open or becomes visible
        fetchUserData();
    } else {
        // If you want to clear data when sidebar closes or reset loading:
        // setUserData(null);
        // setIsLoading(true); // So it fetches fresh when opened again
    }

    // If you want data to be always fresh even if sidebar remains open,
    // you might listen to auth changes or other triggers.
    // For now, fetching on mount/open is typical.
    const { data: authListener } = supabase.auth.onAuthStateChange(
      (event, session) => {
        if (event === 'SIGNED_IN' || event === 'USER_UPDATED' || event === 'INITIAL_SESSION') {
           if (isOpen) fetchUserData(); // Re-fetch if sidebar is open
        } else if (event === 'SIGNED_OUT') {
          setUserData(null);
          setIsLoading(false);
          setError(null);
        }
      }
    );
    
    // Initial fetch if sidebar is already open on component mount (e.g. due to persisted state)
    if (isOpen && !userData && isLoading) {
        fetchUserData();
    }


    return () => {
      if (authListener && authListener.subscription) {
        authListener.subscription.unsubscribe();
      }
    };
  }, [isOpen]); // Re-run effect if `isOpen` changes, to fetch when it opens.

  const handleLanguageSwitch = () => {
    alert("Language switch action! Implement i18n logic or modal.");
  };

  const displayName = isLoading ? "Chargement..." : (userData?.name || "Utilisateur");
  const displayClientId = isLoading ? "xxxxxx" : (userData?.clientId ? `#${userData.clientId.substring(0,8)}...` : "N/A"); // Display a portion of UUID


  return (
    <aside className={`sidebar ${isOpen ? 'open' : ''}`} ref={ref}>
      <div className="sidebar-profile">
        <div className="avatar-placeholder">
          <FiUser size={20} />
        </div>
        <div className="user-info">
          <h4>{displayName}</h4>
          {error && <p className="text-secondary error-text" style={{fontSize: '0.75rem', color: 'var(--status-error-text, red)'}}>{error}</p>}
          {!error && <p className="text-secondary">ID Client: {displayClientId}</p>}
        </div>
      </div>

      <nav className="sidebar-nav-main">
        <NavLink to="/customer/dashboard" className={({ isActive }) => isActive ? "active" : ""} end>
          <FiGrid /> Tableau de bord
        </NavLink>

        <div className="sidebar-nav-group">
          <NavLink
            to="/customer/my-problems"
            className={({ isActive, isPending }) =>
              isPending ? "pending" : isActive ? "active main-nav-item-active" : "main-nav-item"
            }
          >
            <FiAlertCircle /> Mes problèmes
          </NavLink>
          <NavLink
            to="/customer/report-issue"
            className={({ isActive }) => `sidebar-nav-subitem ${isActive ? "active-subitem" : ""}`}
          >
            <FiFilePlus style={{ opacity: 0.9 }} />
            Signaler un problème
          </NavLink>
        </div>

        <NavLink to="/customer/knowledge-base" className={({ isActive }) => isActive ? "active" : ""}>
          <FiHelpCircle /> Base de connaissances
        </NavLink>
        <NavLink to="/customer/my-products" className={({ isActive }) => isActive ? "active" : ""}>
          <FiArchive /> Mes Produits
        </NavLink>
        <NavLink to="/customer/warranty-products" className={({ isActive }) => isActive ? "active" : ""}>
          <FiFileText /> Garantie & Produits
        </NavLink>
        <NavLink to="/customer/notifications" className={({ isActive }) => isActive ? "active" : ""}>
          <FiBell /> Notifications
        </NavLink>
      </nav>

      <div className="sidebar-bottom-actions">
        <button
          onClick={handleLanguageSwitch}
          className="sidebar-action-icon-btn"
          title="Changer la langue"
          aria-label="Changer la langue"
        >
          <FiGlobe />
        </button>
        <NavLink
          to="/customer/settings"
          className={({ isActive }) => `sidebar-action-icon-btn ${isActive ? "active-icon" : ""}`}
          title="Paramètres"
          aria-label="Paramètres du compte"
        >
          <FiSettings />
        </NavLink>
      </div>
    </aside>
  );
});

export default Sidebar;