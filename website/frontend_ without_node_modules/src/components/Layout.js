// src/components/Layout.js
import React, { useState, useEffect, useRef, useCallback } from 'react';
import Header from './Header';
import Sidebar from './Sidebar';
import { Outlet, useLocation } from 'react-router-dom';
// import { useTranslation } from 'react-i18next'; // Not strictly needed here if navLinks are passed translated
import './Layout.css';

const CustomerLayout = () => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const sidebarRef = useRef(null);
  const headerToggleRef = useRef(null);
  const location = useLocation();
  // const { t } = useTranslation(); // Only if you construct links here with t()

  const toggleSidebar = useCallback(() => {
    setIsSidebarOpen(prevState => !prevState);
  }, []);

  useEffect(() => {
    if (isSidebarOpen) {
      setIsSidebarOpen(false);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [location.pathname]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (headerToggleRef.current && headerToggleRef.current.contains(event.target)) {
        return;
      }
      const overlayElement = document.querySelector('.page-overlay');
      if (overlayElement && overlayElement.contains(event.target)) {
        return;
      }
      if (isSidebarOpen && sidebarRef.current && !sidebarRef.current.contains(event.target)) {
        setIsSidebarOpen(false);
      }
    };

    if (isSidebarOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isSidebarOpen, sidebarRef, headerToggleRef]);

  // Nav links now use labelKey for translation, which will be resolved by Header component
  const customerHeaderNavLinks = [
    { to: '/', labelKey: 'customerLayout.home', isNavLink: true, end: true },
    { to: '/customer/dashboard', labelKey: 'customerLayout.dashboard', isNavLink: true, end: true, rootLink: '/customer/dashboard' },
    { to: '/customer/about', labelKey: 'customerLayout.about', isNavLink: true },
    { to: '/customer/profile', labelKey: 'customerLayout.profile', isNavLink: true },
    { to: '/contact-support', labelKey: 'customerLayout.support', isNavLink: true }, // Public support page
    { to: '/customer/faq', labelKey: 'customerLayout.faq', isNavLink: true },
  ];

  return (
    <>
      <Header
        onToggleSidebar={toggleSidebar}
        isSidebarOpen={isSidebarOpen}
        navLinks={customerHeaderNavLinks} // Pass links with labelKey
        buttonRef={headerToggleRef}
      />
      <Sidebar
        isOpen={isSidebarOpen}
        ref={sidebarRef}
      />

      <div
        className={`page-overlay ${isSidebarOpen ? 'sidebar-open-overlay-visible' : ''}`}
        onClick={toggleSidebar}
      ></div>

      <main
        className={`main-content-area ${isSidebarOpen ? 'sidebar-open-blur-content sidebar-open-main-content-shifted' : ''}`}
      >
        <div className="main-content">
          <Outlet />
        </div>
      </main>
    </>
  );
};

export default CustomerLayout;