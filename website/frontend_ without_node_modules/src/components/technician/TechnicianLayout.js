// src/components/technician/TechnicianLayout.js
import React, { useState, useEffect, useRef, useCallback } from 'react';
import Header from '../Header';
import TechnicianAppSidebar from './TechnicianAppSidebar';
import { Outlet, useLocation, useNavigate } from 'react-router-dom';
import { supabase } from '../../supabaseClient';
import '../Layout.css';

const TechnicianLayout = () => {
  const [isAppSidebarOpen, setIsAppSidebarOpen] = useState(false);
  const [technicianInfo, setTechnicianInfo] = useState(null);
  const [isLoadingInfo, setIsLoadingInfo] = useState(true);

  const headerToggleRef = useRef(null);
  const sidebarRef = useRef(null);
  const location = useLocation();
  const navigate = useNavigate();

  useEffect(() => {
    let isMounted = true;
    const fetchInfo = async () => {
      setIsLoadingInfo(true);
      const { data: { user } } = await supabase.auth.getUser();
      if (user && isMounted) {
        const { data: profile, error } = await supabase
          .from('Users')
          .select('first_name, last_name, role')
          .eq('id', user.id)
          .single();
        if (error && isMounted) console.error("Error fetching tech info for sidebar:", error);
        else if (profile && isMounted) {
          setTechnicianInfo({
            name: `${profile.first_name || ''} ${profile.last_name || ''}`.trim() || user.email,
            role: profile.role || 'Technicien'
          });
        } else if (isMounted) {
            setTechnicianInfo({ name: user.email, role: 'Technicien'});
        }
      } else if (isMounted) {
         console.log("No user found for tech sidebar info, or component unmounted.");
      }
      if(isMounted) setIsLoadingInfo(false);
    };
    fetchInfo();
    return () => { isMounted = false; };
  }, []);


  const toggleAppSidebar = useCallback(() => {
    setIsAppSidebarOpen(prevState => !prevState);
  }, []);

  useEffect(() => {
    if (isAppSidebarOpen) setIsAppSidebarOpen(false);
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [location.pathname]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (isAppSidebarOpen &&
          sidebarRef.current && !sidebarRef.current.contains(event.target) &&
          headerToggleRef.current && !headerToggleRef.current.contains(event.target)) {
        toggleAppSidebar();
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [isAppSidebarOpen, toggleAppSidebar]);


  const technicianHeaderNavLinks = [
    { to: '/technician/dashboard', label: 'Tableau de Bord', isNavLink: true, end: true, rootLink: '/technician/dashboard' },
    { to: '/technician/work-orders', label: 'Ordres de Travail', isNavLink: true },
    { to: '/technician/chatbot', label: 'Chatbot IA', isNavLink: true }, // <-- CHATBOT LINK ADDED HERE
    { to: '/technician/videos', label: 'Vidéothèque', isNavLink: true },
    { to: '/technician/faq', label: 'FAQ Tech', isNavLink: true },
    { to: '/technician/support', label: 'Support Intern', isNavLink: true },
  ];

  return (
    <>
      <Header
        onToggleSidebar={toggleAppSidebar}
        isSidebarOpen={isAppSidebarOpen}
        navLinks={technicianHeaderNavLinks}
        buttonRef={headerToggleRef}
      />
      <TechnicianAppSidebar
        ref={sidebarRef}
        isOpen={isAppSidebarOpen}
        technicianInfo={technicianInfo}
      />
      {isAppSidebarOpen && <div className="page-overlay sidebar-open-overlay-visible" onClick={toggleAppSidebar}></div>}
      <main className={`main-content-area ${isAppSidebarOpen ? 'sidebar-open-main-content-shifted sidebar-open-blur-content' : ''}`}>
        <div className="main-content">
          <Outlet />
        </div>
      </main>
    </>
  );
};

export default TechnicianLayout;